/* tslint:disable */
/* eslint-disable */
/**
 * Puupee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AbpLoginResult
 */
export interface AbpLoginResult {
    /**
     * 
     * @type {LoginResultType}
     * @memberof AbpLoginResult
     */
    'result'?: LoginResultType;
    /**
     * 
     * @type {string}
     * @memberof AbpLoginResult
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ActionApiDescriptionModel
 */
export interface ActionApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'uniqueName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'httpMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'url'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActionApiDescriptionModel
     */
    'supportedVersions'?: Array<string>;
    /**
     * 
     * @type {Array<MethodParameterApiDescriptionModel>}
     * @memberof ActionApiDescriptionModel
     */
    'parametersOnMethod'?: Array<MethodParameterApiDescriptionModel>;
    /**
     * 
     * @type {Array<ParameterApiDescriptionModel>}
     * @memberof ActionApiDescriptionModel
     */
    'parameters'?: Array<ParameterApiDescriptionModel>;
    /**
     * 
     * @type {ReturnValueApiDescriptionModel}
     * @memberof ActionApiDescriptionModel
     */
    'returnValue'?: ReturnValueApiDescriptionModel;
    /**
     * 
     * @type {boolean}
     * @memberof ActionApiDescriptionModel
     */
    'allowAnonymous'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'implementFrom'?: string;
}
/**
 * 
 * @export
 * @interface AppDto
 */
export interface AppDto {
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'framework'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'appType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'homePage'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'gitRepositoryType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof AppDto
     */
    'latestReleases'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {IdentityUserDto}
     * @memberof AppDto
     */
    'creator'?: IdentityUserDto;
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof AppDto
     */
    'features'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof AppDto
     */
    'sdks'?: Array<AppSdkDto>;
}
/**
 * 
 * @export
 * @interface AppDtoPagedResultDto
 */
export interface AppDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppDto>}
     * @memberof AppDtoPagedResultDto
     */
    'items'?: Array<AppDto>;
    /**
     * 
     * @type {number}
     * @memberof AppDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppFeatureDto
 */
export interface AppFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppFeatureDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'screenshotKeys'?: string;
}
/**
 * 
 * @export
 * @interface AppPricingDto
 */
export interface AppPricingDto {
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'naming'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthDiscount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthDiscountPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'monthDiscountStartAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'monthDiscountEndAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearDiscount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearDiscountPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'yearDiscountStartAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'yearDiscountEndAt'?: string;
    /**
     * 
     * @type {Array<AppPricingItemDto>}
     * @memberof AppPricingDto
     */
    'items'?: Array<AppPricingItemDto>;
}
/**
 * 
 * @export
 * @interface AppPricingDtoPagedResultDto
 */
export interface AppPricingDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppPricingDto>}
     * @memberof AppPricingDtoPagedResultDto
     */
    'items'?: Array<AppPricingDto>;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppPricingItemDto
 */
export interface AppPricingItemDto {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'display'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AppPricingItemDto
     */
    'values'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemDto
     */
    'isAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemDto
     */
    'hasValue'?: boolean;
}
/**
 * 
 * @export
 * @interface AppReleaseDto
 */
export interface AppReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'versionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppReleaseDto
     */
    'versionCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'platform'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppReleaseDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'downloadUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'productType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isForceUpdate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'environment'?: string;
}
/**
 * 
 * @export
 * @interface AppReleaseDtoPagedResultDto
 */
export interface AppReleaseDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof AppReleaseDtoPagedResultDto
     */
    'items'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {number}
     * @memberof AppReleaseDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppSdkDto
 */
export interface AppSdkDto {
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppSdkDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'privacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'privacyUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'homePage'?: string;
}
/**
 * 
 * @export
 * @interface AppTheme
 */
export interface AppTheme {
    /**
     * 
     * @type {string}
     * @memberof AppTheme
     */
    'sourceColor'?: string;
    /**
     * 
     * @type {AppThemeMode}
     * @memberof AppTheme
     */
    'themeMode'?: AppThemeMode;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AppThemeMode = {
    System: 'System',
    Light: 'Light',
    Dark: 'Dark'
} as const;

export type AppThemeMode = typeof AppThemeMode[keyof typeof AppThemeMode];


/**
 * 
 * @export
 * @interface AppUserScoreDto
 */
export interface AppUserScoreDto {
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppUserScoreDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppUserScoreDto
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ApplicationApiDescriptionModel
 */
export interface ApplicationApiDescriptionModel {
    /**
     * 
     * @type {{ [key: string]: ModuleApiDescriptionModel | undefined; }}
     * @memberof ApplicationApiDescriptionModel
     */
    'modules'?: { [key: string]: ModuleApiDescriptionModel | undefined; };
    /**
     * 
     * @type {{ [key: string]: TypeApiDescriptionModel | undefined; }}
     * @memberof ApplicationApiDescriptionModel
     */
    'types'?: { [key: string]: TypeApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationAuthConfigurationDto
 */
export interface ApplicationAuthConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: boolean | undefined; }}
     * @memberof ApplicationAuthConfigurationDto
     */
    'grantedPolicies'?: { [key: string]: boolean | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationConfigurationDto
 */
export interface ApplicationConfigurationDto {
    /**
     * 
     * @type {ApplicationLocalizationConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'localization'?: ApplicationLocalizationConfigurationDto;
    /**
     * 
     * @type {ApplicationAuthConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'auth'?: ApplicationAuthConfigurationDto;
    /**
     * 
     * @type {ApplicationSettingConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'setting'?: ApplicationSettingConfigurationDto;
    /**
     * 
     * @type {CurrentUserDto}
     * @memberof ApplicationConfigurationDto
     */
    'currentUser'?: CurrentUserDto;
    /**
     * 
     * @type {ApplicationFeatureConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'features'?: ApplicationFeatureConfigurationDto;
    /**
     * 
     * @type {ApplicationGlobalFeatureConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'globalFeatures'?: ApplicationGlobalFeatureConfigurationDto;
    /**
     * 
     * @type {MultiTenancyInfoDto}
     * @memberof ApplicationConfigurationDto
     */
    'multiTenancy'?: MultiTenancyInfoDto;
    /**
     * 
     * @type {CurrentTenantDto}
     * @memberof ApplicationConfigurationDto
     */
    'currentTenant'?: CurrentTenantDto;
    /**
     * 
     * @type {TimingDto}
     * @memberof ApplicationConfigurationDto
     */
    'timing'?: TimingDto;
    /**
     * 
     * @type {ClockDto}
     * @memberof ApplicationConfigurationDto
     */
    'clock'?: ClockDto;
    /**
     * 
     * @type {ObjectExtensionsDto}
     * @memberof ApplicationConfigurationDto
     */
    'objectExtensions'?: ObjectExtensionsDto;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ApplicationConfigurationDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationFeatureConfigurationDto
 */
export interface ApplicationFeatureConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationFeatureConfigurationDto
     */
    'values'?: { [key: string]: string | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationGlobalFeatureConfigurationDto
 */
export interface ApplicationGlobalFeatureConfigurationDto {
    /**
     * 
     * @type {Set<string>}
     * @memberof ApplicationGlobalFeatureConfigurationDto
     */
    'enabledFeatures'?: Set<string>;
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationConfigurationDto
 */
export interface ApplicationLocalizationConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string | undefined; } | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'values'?: { [key: string]: { [key: string]: string | undefined; } | undefined; };
    /**
     * 
     * @type {{ [key: string]: ApplicationLocalizationResourceDto | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'resources'?: { [key: string]: ApplicationLocalizationResourceDto | undefined; };
    /**
     * 
     * @type {Array<LanguageInfo>}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languages'?: Array<LanguageInfo>;
    /**
     * 
     * @type {CurrentCultureDto}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'currentCulture'?: CurrentCultureDto;
    /**
     * 
     * @type {string}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'defaultResourceName'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<NameValue> | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languagesMap'?: { [key: string]: Array<NameValue> | undefined; };
    /**
     * 
     * @type {{ [key: string]: Array<NameValue> | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languageFilesMap'?: { [key: string]: Array<NameValue> | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationDto
 */
export interface ApplicationLocalizationDto {
    /**
     * 
     * @type {{ [key: string]: ApplicationLocalizationResourceDto | undefined; }}
     * @memberof ApplicationLocalizationDto
     */
    'resources'?: { [key: string]: ApplicationLocalizationResourceDto | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationResourceDto
 */
export interface ApplicationLocalizationResourceDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationLocalizationResourceDto
     */
    'texts'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationLocalizationResourceDto
     */
    'baseResources'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApplicationSettingConfigurationDto
 */
export interface ApplicationSettingConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationSettingConfigurationDto
     */
    'values'?: { [key: string]: string | undefined; };
}
/**
 * 
 * @export
 * @interface BindDeviceDto
 */
export interface BindDeviceDto {
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'tpnsToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BindDeviceDto
     */
    'isPhysicalDevice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'systemVersion'?: string;
}
/**
 * 
 * @export
 * @interface BooleanKeyValue
 */
export interface BooleanKeyValue {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanKeyValue
     */
    'value'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BooleanKeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof BooleanKeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BooleanKeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface BooleanSetKeyValueDto
 */
export interface BooleanSetKeyValueDto {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanSetKeyValueDto
     */
    'value'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BooleanSetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface ChangePasswordInput
 */
export interface ChangePasswordInput {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface ClockDto
 */
export interface ClockDto {
    /**
     * 
     * @type {string}
     * @memberof ClockDto
     */
    'kind'?: string;
}
/**
 * 
 * @export
 * @interface ControllerApiDescriptionModel
 */
export interface ControllerApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'controllerGroupName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllerApiDescriptionModel
     */
    'isRemoteService'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ControllerApiDescriptionModel
     */
    'isIntegrationService'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'apiVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {Array<ControllerInterfaceApiDescriptionModel>}
     * @memberof ControllerApiDescriptionModel
     */
    'interfaces'?: Array<ControllerInterfaceApiDescriptionModel>;
    /**
     * 
     * @type {{ [key: string]: ActionApiDescriptionModel | undefined; }}
     * @memberof ControllerApiDescriptionModel
     */
    'actions'?: { [key: string]: ActionApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ControllerInterfaceApiDescriptionModel
 */
export interface ControllerInterfaceApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<InterfaceMethodApiDescriptionModel>}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'methods'?: Array<InterfaceMethodApiDescriptionModel>;
}
/**
 * 
 * @export
 * @interface CreateMessageTemplateReleaseDto
 */
export interface CreateMessageTemplateReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMessageTemplateReleaseDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageTemplateReleaseDto
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface CreateOpenIddictApplicationDto
 */
export interface CreateOpenIddictApplicationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'displayNames'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'permissions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'postLogoutRedirectUris'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'properties'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'redirectUris'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'clientUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'logoUri'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'grantTypes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'scopes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppDto
 */
export interface CreateOrUpdateAppDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'framework'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'appType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'homePage'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'gitRepositoryType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof CreateOrUpdateAppDto
     */
    'features'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof CreateOrUpdateAppDto
     */
    'sdks'?: Array<AppSdkDto>;
    /**
     * 
     * @type {CreateOpenIddictApplicationDto}
     * @memberof CreateOrUpdateAppDto
     */
    'openClient'?: CreateOpenIddictApplicationDto;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppFeatureDto
 */
export interface CreateOrUpdateAppFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'screenshotKeys'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppPricingDto
 */
export interface CreateOrUpdateAppPricingDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'naming'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountStartAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountEndAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountStartAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountEndAt'?: string;
    /**
     * 
     * @type {Array<AppPricingItemDto>}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'items'?: Array<AppPricingItemDto>;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppPricingItemDto
 */
export interface CreateOrUpdateAppPricingItemDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'display'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'hasValue'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppReleaseDto
 */
export interface CreateOrUpdateAppReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'versionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'versionCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'platform'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'productType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'isForceUpdate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'environment'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppSdkDto
 */
export interface CreateOrUpdateAppSdkDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'privacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'privacyUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'homePage'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppUserScoreDto
 */
export interface CreateOrUpdateAppUserScoreDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateMessageTemplateDto
 */
export interface CreateOrUpdateMessageTemplateDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateMessageTemplateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateMessageTemplateDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdatePuupeeDto
 */
export interface CreateOrUpdatePuupeeDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'format'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'parentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'contentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'displayStyle'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'storageObjectCreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'storageObjectUpdatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'syncVersion'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'endAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'notifyAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'notifyTimingType'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'notifyTimingUnit'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'notifyTimingValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'repeat'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'repeatOffAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'repeatOffTimes'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'repetitions'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'isDone'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'doneAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'tagging'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'lastModifierDeviceToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'lastModifierDevice'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'app'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'pushToUser'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdatePuupeeDto
     */
    'sortIndex'?: number;
}
/**
 * 
 * @export
 * @interface CreatePushNotificationDto
 */
export interface CreatePushNotificationDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'puupeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'app'?: string;
}
/**
 * 
 * @export
 * @interface CurrentCultureDto
 */
export interface CurrentCultureDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'englishName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'threeLetterIsoLanguageName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'twoLetterIsoLanguageName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentCultureDto
     */
    'isRightToLeft'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'cultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'nativeName'?: string;
    /**
     * 
     * @type {DateTimeFormatDto}
     * @memberof CurrentCultureDto
     */
    'dateTimeFormat'?: DateTimeFormatDto;
}
/**
 * 
 * @export
 * @interface CurrentTenantDto
 */
export interface CurrentTenantDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentTenantDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentTenantDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentTenantDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface CurrentUserDto
 */
export interface CurrentUserDto {
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'isAuthenticated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorTenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorTenantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'surName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'phoneNumberVerified'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUserDto
     */
    'roles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DateTimeFormatDto
 */
export interface DateTimeFormatDto {
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'calendarAlgorithmType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'dateTimeFormatLong'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'shortDatePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'fullDateTimePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'dateSeparator'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'shortTimePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'longTimePattern'?: string;
}
/**
 * 
 * @export
 * @interface DateTimeKeyValue
 */
export interface DateTimeKeyValue {
    /**
     * 
     * @type {string}
     * @memberof DateTimeKeyValue
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof DateTimeKeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof DateTimeKeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeKeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface DateTimeSetKeyValueDto
 */
export interface DateTimeSetKeyValueDto {
    /**
     * 
     * @type {string}
     * @memberof DateTimeSetKeyValueDto
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof DateTimeSetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface DecimalKeyValue
 */
export interface DecimalKeyValue {
    /**
     * 
     * @type {number}
     * @memberof DecimalKeyValue
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof DecimalKeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof DecimalKeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DecimalKeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface DecimalSetKeyValueDto
 */
export interface DecimalSetKeyValueDto {
    /**
     * 
     * @type {number}
     * @memberof DecimalSetKeyValueDto
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof DecimalSetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface DeviceDto
 */
export interface DeviceDto {
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'tpnsToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isPhysicalDevice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'platform'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'systemVersion'?: string;
}
/**
 * 
 * @export
 * @interface DeviceDtoPagedResultDto
 */
export interface DeviceDtoPagedResultDto {
    /**
     * 
     * @type {Array<DeviceDto>}
     * @memberof DeviceDtoPagedResultDto
     */
    'items'?: Array<DeviceDto>;
    /**
     * 
     * @type {number}
     * @memberof DeviceDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface DoubleKeyValue
 */
export interface DoubleKeyValue {
    /**
     * 
     * @type {number}
     * @memberof DoubleKeyValue
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof DoubleKeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof DoubleKeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DoubleKeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface DoubleSetKeyValueDto
 */
export interface DoubleSetKeyValueDto {
    /**
     * 
     * @type {number}
     * @memberof DoubleSetKeyValueDto
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof DoubleSetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface EmailSettingsDto
 */
export interface EmailSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpHost'?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailSettingsDto
     */
    'smtpPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpDomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSettingsDto
     */
    'smtpEnableSsl'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSettingsDto
     */
    'smtpUseDefaultCredentials'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'defaultFromAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'defaultFromDisplayName'?: string;
}
/**
 * 
 * @export
 * @interface EntityExtensionDto
 */
export interface EntityExtensionDto {
    /**
     * 
     * @type {{ [key: string]: ExtensionPropertyDto | undefined; }}
     * @memberof EntityExtensionDto
     */
    'properties'?: { [key: string]: ExtensionPropertyDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof EntityExtensionDto
     */
    'configuration'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ExtensionEnumDto
 */
export interface ExtensionEnumDto {
    /**
     * 
     * @type {Array<ExtensionEnumFieldDto>}
     * @memberof ExtensionEnumDto
     */
    'fields'?: Array<ExtensionEnumFieldDto>;
    /**
     * 
     * @type {string}
     * @memberof ExtensionEnumDto
     */
    'localizationResource'?: string;
}
/**
 * 
 * @export
 * @interface ExtensionEnumFieldDto
 */
export interface ExtensionEnumFieldDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionEnumFieldDto
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof ExtensionEnumFieldDto
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiCreateDto
 */
export interface ExtensionPropertyApiCreateDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiCreateDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiDto
 */
export interface ExtensionPropertyApiDto {
    /**
     * 
     * @type {ExtensionPropertyApiGetDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onGet'?: ExtensionPropertyApiGetDto;
    /**
     * 
     * @type {ExtensionPropertyApiCreateDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onCreate'?: ExtensionPropertyApiCreateDto;
    /**
     * 
     * @type {ExtensionPropertyApiUpdateDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onUpdate'?: ExtensionPropertyApiUpdateDto;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiGetDto
 */
export interface ExtensionPropertyApiGetDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiGetDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiUpdateDto
 */
export interface ExtensionPropertyApiUpdateDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiUpdateDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyAttributeDto
 */
export interface ExtensionPropertyAttributeDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyAttributeDto
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ExtensionPropertyAttributeDto
     */
    'config'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ExtensionPropertyDto
 */
export interface ExtensionPropertyDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {LocalizableStringDto}
     * @memberof ExtensionPropertyDto
     */
    'displayName'?: LocalizableStringDto;
    /**
     * 
     * @type {ExtensionPropertyApiDto}
     * @memberof ExtensionPropertyDto
     */
    'api'?: ExtensionPropertyApiDto;
    /**
     * 
     * @type {ExtensionPropertyUiDto}
     * @memberof ExtensionPropertyDto
     */
    'ui'?: ExtensionPropertyUiDto;
    /**
     * 
     * @type {Array<ExtensionPropertyAttributeDto>}
     * @memberof ExtensionPropertyDto
     */
    'attributes'?: Array<ExtensionPropertyAttributeDto>;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ExtensionPropertyDto
     */
    'configuration'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {object}
     * @memberof ExtensionPropertyDto
     */
    'defaultValue'?: object;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiDto
 */
export interface ExtensionPropertyUiDto {
    /**
     * 
     * @type {ExtensionPropertyUiTableDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onTable'?: ExtensionPropertyUiTableDto;
    /**
     * 
     * @type {ExtensionPropertyUiFormDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onCreateForm'?: ExtensionPropertyUiFormDto;
    /**
     * 
     * @type {ExtensionPropertyUiFormDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onEditForm'?: ExtensionPropertyUiFormDto;
    /**
     * 
     * @type {ExtensionPropertyUiLookupDto}
     * @memberof ExtensionPropertyUiDto
     */
    'lookup'?: ExtensionPropertyUiLookupDto;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiFormDto
 */
export interface ExtensionPropertyUiFormDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyUiFormDto
     */
    'isVisible'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiLookupDto
 */
export interface ExtensionPropertyUiLookupDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'resultListPropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'displayPropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'valuePropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'filterParamName'?: string;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiTableDto
 */
export interface ExtensionPropertyUiTableDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyUiTableDto
     */
    'isVisible'?: boolean;
}
/**
 * 
 * @export
 * @interface FeatureDto
 */
export interface FeatureDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'value'?: string;
    /**
     * 
     * @type {FeatureProviderDto}
     * @memberof FeatureDto
     */
    'provider'?: FeatureProviderDto;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {IStringValueType}
     * @memberof FeatureDto
     */
    'valueType'?: IStringValueType;
    /**
     * 
     * @type {number}
     * @memberof FeatureDto
     */
    'depth'?: number;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'parentName'?: string;
}
/**
 * 
 * @export
 * @interface FeatureGroupDto
 */
export interface FeatureGroupDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureGroupDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureGroupDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {Array<FeatureDto>}
     * @memberof FeatureGroupDto
     */
    'features'?: Array<FeatureDto>;
}
/**
 * 
 * @export
 * @interface FeatureProviderDto
 */
export interface FeatureProviderDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureProviderDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureProviderDto
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @interface FindTenantResultDto
 */
export interface FindTenantResultDto {
    /**
     * 
     * @type {boolean}
     * @memberof FindTenantResultDto
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FindTenantResultDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindTenantResultDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindTenantResultDto
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface GetFeatureListResultDto
 */
export interface GetFeatureListResultDto {
    /**
     * 
     * @type {Array<FeatureGroupDto>}
     * @memberof GetFeatureListResultDto
     */
    'groups'?: Array<FeatureGroupDto>;
}
/**
 * 
 * @export
 * @interface GetPermissionListResultDto
 */
export interface GetPermissionListResultDto {
    /**
     * 
     * @type {string}
     * @memberof GetPermissionListResultDto
     */
    'entityDisplayName'?: string;
    /**
     * 
     * @type {Array<PermissionGroupDto>}
     * @memberof GetPermissionListResultDto
     */
    'groups'?: Array<PermissionGroupDto>;
}
/**
 * 
 * @export
 * @interface IStringValueType
 */
export interface IStringValueType {
    /**
     * 
     * @type {string}
     * @memberof IStringValueType
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IStringValueType
     */
    'properties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {IValueValidator}
     * @memberof IStringValueType
     */
    'validator'?: IValueValidator;
}
/**
 * 
 * @export
 * @interface IValueValidator
 */
export interface IValueValidator {
    /**
     * 
     * @type {string}
     * @memberof IValueValidator
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IValueValidator
     */
    'properties'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface IanaTimeZone
 */
export interface IanaTimeZone {
    /**
     * 
     * @type {string}
     * @memberof IanaTimeZone
     */
    'timeZoneName'?: string;
}
/**
 * 
 * @export
 * @interface IdentityRoleCreateDto
 */
export interface IdentityRoleCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleCreateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    'isPublic'?: boolean;
}
/**
 * 
 * @export
 * @interface IdentityRoleDto
 */
export interface IdentityRoleDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isStatic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityRoleDtoListResultDto
 */
export interface IdentityRoleDtoListResultDto {
    /**
     * 
     * @type {Array<IdentityRoleDto>}
     * @memberof IdentityRoleDtoListResultDto
     */
    'items'?: Array<IdentityRoleDto>;
}
/**
 * 
 * @export
 * @interface IdentityRoleDtoPagedResultDto
 */
export interface IdentityRoleDtoPagedResultDto {
    /**
     * 
     * @type {Array<IdentityRoleDto>}
     * @memberof IdentityRoleDtoPagedResultDto
     */
    'items'?: Array<IdentityRoleDto>;
    /**
     * 
     * @type {number}
     * @memberof IdentityRoleDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface IdentityRoleUpdateDto
 */
export interface IdentityRoleUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleUpdateDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleUpdateDto
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserCreateDto
 */
export interface IdentityUserCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserCreateDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserCreateDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserCreateDto
     */
    'roleNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface IdentityUserDto
 */
export interface IdentityUserDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lockoutEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserDtoPagedResultDto
 */
export interface IdentityUserDtoPagedResultDto {
    /**
     * 
     * @type {Array<IdentityUserDto>}
     * @memberof IdentityUserDtoPagedResultDto
     */
    'items'?: Array<IdentityUserDto>;
    /**
     * 
     * @type {number}
     * @memberof IdentityUserDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface IdentityUserUpdateDto
 */
export interface IdentityUserUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserUpdateDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserUpdateDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserUpdateDto
     */
    'roleNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserUpdateRolesDto
 */
export interface IdentityUserUpdateRolesDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserUpdateRolesDto
     */
    'roleNames': Array<string>;
}
/**
 * 
 * @export
 * @interface Int32KeyValue
 */
export interface Int32KeyValue {
    /**
     * 
     * @type {number}
     * @memberof Int32KeyValue
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof Int32KeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof Int32KeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Int32KeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface Int32SetKeyValueDto
 */
export interface Int32SetKeyValueDto {
    /**
     * 
     * @type {number}
     * @memberof Int32SetKeyValueDto
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof Int32SetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface InterfaceMethodApiDescriptionModel
 */
export interface InterfaceMethodApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<MethodParameterApiDescriptionModel>}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'parametersOnMethod'?: Array<MethodParameterApiDescriptionModel>;
    /**
     * 
     * @type {ReturnValueApiDescriptionModel}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'returnValue'?: ReturnValueApiDescriptionModel;
}
/**
 * 
 * @export
 * @interface LanguageInfo
 */
export interface LanguageInfo {
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'cultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'uiCultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'twoLetterISOLanguageName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'flagIcon'?: string;
}
/**
 * 
 * @export
 * @interface LocalizableStringDto
 */
export interface LocalizableStringDto {
    /**
     * 
     * @type {string}
     * @memberof LocalizableStringDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalizableStringDto
     */
    'resource'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LoginResultType = {
    Success: 'Success',
    InvalidUserNameOrPassword: 'InvalidUserNameOrPassword',
    NotAllowed: 'NotAllowed',
    LockedOut: 'LockedOut',
    RequiresTwoFactor: 'RequiresTwoFactor'
} as const;

export type LoginResultType = typeof LoginResultType[keyof typeof LoginResultType];


/**
 * 
 * @export
 * @interface MessagePublishDto
 */
export interface MessagePublishDto {
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'template'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof MessagePublishDto
     */
    'data'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface MessageRecallDto
 */
export interface MessageRecallDto {
    /**
     * 
     * @type {string}
     * @memberof MessageRecallDto
     */
    'puupeeId'?: string;
}
/**
 * 
 * @export
 * @interface MessageSubscribeDto
 */
export interface MessageSubscribeDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSubscribeDto
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface MessageTemplateDto
 */
export interface MessageTemplateDto {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageTemplateDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageTemplateDto
     */
    'latestVersion'?: number;
}
/**
 * 
 * @export
 * @interface MessageTemplateReleaseDto
 */
export interface MessageTemplateReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageTemplateReleaseDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'templateName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageTemplateReleaseDto
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface MessageUnsubscribeDto
 */
export interface MessageUnsubscribeDto {
    /**
     * 
     * @type {string}
     * @memberof MessageUnsubscribeDto
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface MethodParameterApiDescriptionModel
 */
export interface MethodParameterApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'typeAsString'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MethodParameterApiDescriptionModel
     */
    'isOptional'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof MethodParameterApiDescriptionModel
     */
    'defaultValue'?: object;
}
/**
 * 
 * @export
 * @interface ModuleApiDescriptionModel
 */
export interface ModuleApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    'rootPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    'remoteServiceName'?: string;
    /**
     * 
     * @type {{ [key: string]: ControllerApiDescriptionModel | undefined; }}
     * @memberof ModuleApiDescriptionModel
     */
    'controllers'?: { [key: string]: ControllerApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ModuleExtensionDto
 */
export interface ModuleExtensionDto {
    /**
     * 
     * @type {{ [key: string]: EntityExtensionDto | undefined; }}
     * @memberof ModuleExtensionDto
     */
    'entities'?: { [key: string]: EntityExtensionDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ModuleExtensionDto
     */
    'configuration'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface MultiTenancyInfoDto
 */
export interface MultiTenancyInfoDto {
    /**
     * 
     * @type {boolean}
     * @memberof MultiTenancyInfoDto
     */
    'isEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface NameValue
 */
export interface NameValue {
    /**
     * 
     * @type {string}
     * @memberof NameValue
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NameValue
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface NotificationInfoDto
 */
export interface NotificationInfoDto {
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationInfoDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'deletionTime'?: string;
}
/**
 * 
 * @export
 * @interface NotificationInfoDtoPagedResultDto
 */
export interface NotificationInfoDtoPagedResultDto {
    /**
     * 
     * @type {Array<NotificationInfoDto>}
     * @memberof NotificationInfoDtoPagedResultDto
     */
    'items'?: Array<NotificationInfoDto>;
    /**
     * 
     * @type {number}
     * @memberof NotificationInfoDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface ObjectExtensionsDto
 */
export interface ObjectExtensionsDto {
    /**
     * 
     * @type {{ [key: string]: ModuleExtensionDto | undefined; }}
     * @memberof ObjectExtensionsDto
     */
    'modules'?: { [key: string]: ModuleExtensionDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: ExtensionEnumDto | undefined; }}
     * @memberof ObjectExtensionsDto
     */
    'enums'?: { [key: string]: ExtensionEnumDto | undefined; };
}
/**
 * 
 * @export
 * @interface ParameterApiDescriptionModel
 */
export interface ParameterApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'nameOnMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'jsonName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ParameterApiDescriptionModel
     */
    'isOptional'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof ParameterApiDescriptionModel
     */
    'defaultValue'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof ParameterApiDescriptionModel
     */
    'constraintTypes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'bindingSourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'descriptorName'?: string;
}
/**
 * 
 * @export
 * @interface PermissionGrantInfoDto
 */
export interface PermissionGrantInfoDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'parentName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PermissionGrantInfoDto
     */
    'isGranted'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PermissionGrantInfoDto
     */
    'allowedProviders'?: Array<string>;
    /**
     * 
     * @type {Array<ProviderInfoDto>}
     * @memberof PermissionGrantInfoDto
     */
    'grantedProviders'?: Array<ProviderInfoDto>;
}
/**
 * 
 * @export
 * @interface PermissionGroupDto
 */
export interface PermissionGroupDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayNameKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayNameResource'?: string;
    /**
     * 
     * @type {Array<PermissionGrantInfoDto>}
     * @memberof PermissionGroupDto
     */
    'permissions'?: Array<PermissionGrantInfoDto>;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ProfileDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'isExternal'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'hasPassword'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface PropertyApiDescriptionModel
 */
export interface PropertyApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'jsonName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyApiDescriptionModel
     */
    'isRequired'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PropertyApiDescriptionModel
     */
    'minLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyApiDescriptionModel
     */
    'maxLength'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'minimum'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'maximum'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'regex'?: string;
}
/**
 * 
 * @export
 * @interface ProviderInfoDto
 */
export interface ProviderInfoDto {
    /**
     * 
     * @type {string}
     * @memberof ProviderInfoDto
     */
    'providerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderInfoDto
     */
    'providerKey'?: string;
}
/**
 * 
 * @export
 * @interface PublicAppDto
 */
export interface PublicAppDto {
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicAppDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'framework'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'appType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'homePage'?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicAppDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicAppDto
     */
    'gitRepositoryType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicAppDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicAppDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof PublicAppDto
     */
    'latestReleases'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {IdentityUserDto}
     * @memberof PublicAppDto
     */
    'creator'?: IdentityUserDto;
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof PublicAppDto
     */
    'features'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof PublicAppDto
     */
    'sdks'?: Array<AppSdkDto>;
    /**
     * 
     * @type {boolean}
     * @memberof PublicAppDto
     */
    'subscribed'?: boolean;
}
/**
 * 
 * @export
 * @interface PublicAppDtoPagedResultDto
 */
export interface PublicAppDtoPagedResultDto {
    /**
     * 
     * @type {Array<PublicAppDto>}
     * @memberof PublicAppDtoPagedResultDto
     */
    'items'?: Array<PublicAppDto>;
    /**
     * 
     * @type {number}
     * @memberof PublicAppDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface PuupeeChangedEto
 */
export interface PuupeeChangedEto {
    /**
     * 
     * @type {PuupeeDto}
     * @memberof PuupeeChangedEto
     */
    'data'?: PuupeeDto;
    /**
     * 
     * @type {string}
     * @memberof PuupeeChangedEto
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface PuupeeDto
 */
export interface PuupeeDto {
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PuupeeDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'format'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'parentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'contentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'displayStyle'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'storageObjectCreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'storageObjectUpdatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'storageObjectId'?: string;
    /**
     * 
     * @type {StorageObjectDto}
     * @memberof PuupeeDto
     */
    'storageObject'?: StorageObjectDto;
    /**
     * 
     * @type {StorageObjectDto}
     * @memberof PuupeeDto
     */
    'thumb'?: StorageObjectDto;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'doneAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PuupeeDto
     */
    'isDone'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'startAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'endAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'notifyAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'notifyTimingType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'notifyTimingUnit'?: string;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'notifyTimingValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'repeat'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'repeatOffAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'repeatOffTimes'?: number;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'repetitions'?: number;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'syncVersion'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PuupeeDto
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'tagging'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'lastModifierDeviceToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'lastModifierDevice'?: string;
    /**
     * 
     * @type {string}
     * @memberof PuupeeDto
     */
    'app'?: string;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDto
     */
    'sortIndex'?: number;
}
/**
 * 
 * @export
 * @interface PuupeeDtoPagedResultDto
 */
export interface PuupeeDtoPagedResultDto {
    /**
     * 
     * @type {Array<PuupeeDto>}
     * @memberof PuupeeDtoPagedResultDto
     */
    'items'?: Array<PuupeeDto>;
    /**
     * 
     * @type {number}
     * @memberof PuupeeDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface RefreshDeviceStatusDto
 */
export interface RefreshDeviceStatusDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDeviceStatusDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof RefreshDeviceStatusDto
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof RegisterDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'appName': string;
}
/**
 * 
 * @export
 * @interface RemoteServiceErrorInfo
 */
export interface RemoteServiceErrorInfo {
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'details'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof RemoteServiceErrorInfo
     */
    'data'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {Array<RemoteServiceValidationErrorInfo>}
     * @memberof RemoteServiceErrorInfo
     */
    'validationErrors'?: Array<RemoteServiceValidationErrorInfo>;
}
/**
 * 
 * @export
 * @interface RemoteServiceErrorResponse
 */
export interface RemoteServiceErrorResponse {
    /**
     * 
     * @type {RemoteServiceErrorInfo}
     * @memberof RemoteServiceErrorResponse
     */
    'error'?: RemoteServiceErrorInfo;
}
/**
 * 
 * @export
 * @interface RemoteServiceValidationErrorInfo
 */
export interface RemoteServiceValidationErrorInfo {
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceValidationErrorInfo
     */
    'message'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoteServiceValidationErrorInfo
     */
    'members'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'resetToken': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ReturnValueApiDescriptionModel
 */
export interface ReturnValueApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ReturnValueApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReturnValueApiDescriptionModel
     */
    'typeSimple'?: string;
}
/**
 * 
 * @export
 * @interface SendPasswordResetCodeDto
 */
export interface SendPasswordResetCodeDto {
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'appName': string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'returnUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'returnUrlHash'?: string;
}
/**
 * 
 * @export
 * @interface SendTestEmailInput
 */
export interface SendTestEmailInput {
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'senderEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'targetEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'body'?: string;
}
/**
 * 
 * @export
 * @interface SendVerificationCodeDto
 */
export interface SendVerificationCodeDto {
    /**
     * 
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'codeSender'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'purpose'?: string;
}
/**
 * 
 * @export
 * @interface SettingsDto
 */
export interface SettingsDto {
    /**
     * 
     * @type {AppTheme}
     * @memberof SettingsDto
     */
    'appTheme'?: AppTheme;
    /**
     * 
     * @type {string}
     * @memberof SettingsDto
     */
    'language'?: string;
    /**
     * 
     * @type {TodoSettingsDto}
     * @memberof SettingsDto
     */
    'todoSettings'?: TodoSettingsDto;
}
/**
 * 
 * @export
 * @interface SimpleDataDto
 */
export interface SimpleDataDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof SimpleDataDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof SimpleDataDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleDataDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleDataDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleDataDto
     */
    'collection'?: string;
}
/**
 * 
 * @export
 * @interface SimpleDataDtoPagedResultDto
 */
export interface SimpleDataDtoPagedResultDto {
    /**
     * 
     * @type {Array<SimpleDataDto>}
     * @memberof SimpleDataDtoPagedResultDto
     */
    'items'?: Array<SimpleDataDto>;
    /**
     * 
     * @type {number}
     * @memberof SimpleDataDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface StorageObjectCredentials
 */
export interface StorageObjectCredentials {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'endPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'protocal'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'bucketName'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'regionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'securityToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'accessKeySecret'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'expiration'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectCredentials
     */
    'expiredTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface StorageObjectDto
 */
export interface StorageObjectDto {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StorageObjectDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'contentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageObjectCreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageObjectUpdatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectDto
     */
    'syncVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface StorageObjectOrCredentialsDto
 */
export interface StorageObjectOrCredentialsDto {
    /**
     * 
     * @type {StorageObjectDto}
     * @memberof StorageObjectOrCredentialsDto
     */
    'storageObject'?: StorageObjectDto;
    /**
     * 
     * @type {StorageObjectCredentials}
     * @memberof StorageObjectOrCredentialsDto
     */
    'credentials'?: StorageObjectCredentials;
}
/**
 * 
 * @export
 * @interface StringKeyValue
 */
export interface StringKeyValue {
    /**
     * 
     * @type {string}
     * @memberof StringKeyValue
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof StringKeyValue
     */
    'durationSeconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof StringKeyValue
     */
    'expiredAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StringKeyValue
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface StringSetKeyValueDto
 */
export interface StringSetKeyValueDto {
    /**
     * 
     * @type {string}
     * @memberof StringSetKeyValueDto
     */
    'value'?: string;
    /**
     * 
     * @type {number}
     * @memberof StringSetKeyValueDto
     */
    'durationSeconds'?: number;
}
/**
 * 
 * @export
 * @interface SyncStateDto
 */
export interface SyncStateDto {
    /**
     * 
     * @type {string}
     * @memberof SyncStateDto
     */
    'lastSyncAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof SyncStateDto
     */
    'version'?: number;
}
/**
 * 
 * @export
 * @interface TenantCreateDto
 */
export interface TenantCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'adminEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'adminPassword': string;
}
/**
 * 
 * @export
 * @interface TenantDto
 */
export interface TenantDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface TenantDtoPagedResultDto
 */
export interface TenantDtoPagedResultDto {
    /**
     * 
     * @type {Array<TenantDto>}
     * @memberof TenantDtoPagedResultDto
     */
    'items'?: Array<TenantDto>;
    /**
     * 
     * @type {number}
     * @memberof TenantDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface TenantUpdateDto
 */
export interface TenantUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface TestDateTime
 */
export interface TestDateTime {
    /**
     * 
     * @type {string}
     * @memberof TestDateTime
     */
    'createdAt'?: string;
    /**
     * 
     * @type {PuupeeDto}
     * @memberof TestDateTime
     */
    'puupee'?: PuupeeDto;
}
/**
 * 
 * @export
 * @interface TimeZone
 */
export interface TimeZone {
    /**
     * 
     * @type {IanaTimeZone}
     * @memberof TimeZone
     */
    'iana'?: IanaTimeZone;
    /**
     * 
     * @type {WindowsTimeZone}
     * @memberof TimeZone
     */
    'windows'?: WindowsTimeZone;
}
/**
 * 
 * @export
 * @interface TimingDto
 */
export interface TimingDto {
    /**
     * 
     * @type {TimeZone}
     * @memberof TimingDto
     */
    'timeZone'?: TimeZone;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TodoOrderBy = {
    CreationTime: 'CreationTime',
    CreationTimeDesc: 'CreationTimeDesc',
    LastModificationTime: 'LastModificationTime',
    LastModificationTimeDesc: 'LastModificationTimeDesc',
    Title: 'Title',
    TitleDesc: 'TitleDesc',
    Priority: 'Priority',
    PriorityDesc: 'PriorityDesc',
    Tag: 'Tag',
    TagDesc: 'TagDesc'
} as const;

export type TodoOrderBy = typeof TodoOrderBy[keyof typeof TodoOrderBy];


/**
 * 
 * @export
 * @interface TodoSettingsDto
 */
export interface TodoSettingsDto {
    /**
     * 
     * @type {boolean}
     * @memberof TodoSettingsDto
     */
    'showCompleted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TodoSettingsDto
     */
    'showDetails'?: boolean;
    /**
     * 
     * @type {TodoOrderBy}
     * @memberof TodoSettingsDto
     */
    'orderBy'?: TodoOrderBy;
}
/**
 * 
 * @export
 * @interface TypeApiDescriptionModel
 */
export interface TypeApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof TypeApiDescriptionModel
     */
    'baseType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TypeApiDescriptionModel
     */
    'isEnum'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    'enumNames'?: Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof TypeApiDescriptionModel
     */
    'enumValues'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    'genericArguments'?: Array<string>;
    /**
     * 
     * @type {Array<PropertyApiDescriptionModel>}
     * @memberof TypeApiDescriptionModel
     */
    'properties'?: Array<PropertyApiDescriptionModel>;
}
/**
 * 
 * @export
 * @interface UpdateEmailSettingsDto
 */
export interface UpdateEmailSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpHost'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpDomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpEnableSsl'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpUseDefaultCredentials'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'defaultFromAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'defaultFromDisplayName': string;
}
/**
 * 
 * @export
 * @interface UpdateFeatureDto
 */
export interface UpdateFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFeatureDto
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface UpdateFeaturesDto
 */
export interface UpdateFeaturesDto {
    /**
     * 
     * @type {Array<UpdateFeatureDto>}
     * @memberof UpdateFeaturesDto
     */
    'features'?: Array<UpdateFeatureDto>;
}
/**
 * 
 * @export
 * @interface UpdatePermissionDto
 */
export interface UpdatePermissionDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePermissionDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePermissionDto
     */
    'isGranted'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdatePermissionsDto
 */
export interface UpdatePermissionsDto {
    /**
     * 
     * @type {Array<UpdatePermissionDto>}
     * @memberof UpdatePermissionsDto
     */
    'permissions'?: Array<UpdatePermissionDto>;
}
/**
 * 
 * @export
 * @interface UpdateProfileDto
 */
export interface UpdateProfileDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof UpdateProfileDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'surname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'phoneNumberConfirmed'?: boolean;
}
/**
 * 
 * @export
 * @interface UserDataListResultDto
 */
export interface UserDataListResultDto {
    /**
     * 
     * @type {Array<UserData>}
     * @memberof UserDataListResultDto
     */
    'items'?: Array<UserData>;
}
/**
 * 
 * @export
 * @interface UserLoginInfo
 */
export interface UserLoginInfo {
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfo
     */
    'userNameOrEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfo
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserLoginInfo
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface UserStorageDto
 */
export interface UserStorageDto {
    /**
     * 
     * @type {string}
     * @memberof UserStorageDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserStorageDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserStorageDto
     */
    'maxSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserStorageDto
     */
    'currentSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserStorageDto
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserStorageDto
     */
    'singleFileMaxSize'?: number;
    /**
     * 
     * @type {Array<UserStorageItemDto>}
     * @memberof UserStorageDto
     */
    'items'?: Array<UserStorageItemDto>;
}
/**
 * 
 * @export
 * @interface UserStorageItemDto
 */
export interface UserStorageItemDto {
    /**
     * 
     * @type {string}
     * @memberof UserStorageItemDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserStorageItemDto
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserStorageItemDto
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserStorageItemDto
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface VerifyPasswordResetTokenInput
 */
export interface VerifyPasswordResetTokenInput {
    /**
     * 
     * @type {string}
     * @memberof VerifyPasswordResetTokenInput
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyPasswordResetTokenInput
     */
    'resetToken': string;
}
/**
 * 
 * @export
 * @interface WindowsTimeZone
 */
export interface WindowsTimeZone {
    /**
     * 
     * @type {string}
     * @memberof WindowsTimeZone
     */
    'timeZoneId'?: string;
}

/**
 * AbpApiDefinitionApi - axios parameter creator
 * @export
 */
export const AbpApiDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [includeTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApiDefinitionGet: async (includeTypes?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/abp/api-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (includeTypes !== undefined) {
                localVarQueryParameter['IncludeTypes'] = includeTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApiDefinitionApi - functional programming interface
 * @export
 */
export const AbpApiDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApiDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAbpApiDefinitionGet(includeTypes?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApiDescriptionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAbpApiDefinitionGet(includeTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApiDefinitionApi - factory interface
 * @export
 */
export const AbpApiDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApiDefinitionApiFp(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApiDefinitionGet(includeTypes?: boolean, options?: any): AxiosPromise<ApplicationApiDescriptionModel> {
            return localVarFp.apiAbpApiDefinitionGet(includeTypes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AbpApiDefinitionApi - object-oriented interface
 * @export
 * @class AbpApiDefinitionApi
 * @extends {BaseAPI}
 */
export class AbpApiDefinitionApi extends BaseAPI {
    /**
     * 
     * @param {boolean} [includeTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApiDefinitionApi
     */
    public apiAbpApiDefinitionGet(includeTypes?: boolean, options?: AxiosRequestConfig) {
        return AbpApiDefinitionApiFp(this.configuration).apiAbpApiDefinitionGet(includeTypes, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpApplicationConfigurationApi - axios parameter creator
 * @export
 */
export const AbpApplicationConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [includeLocalizationResources] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApplicationConfigurationGet: async (includeLocalizationResources?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/abp/application-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (includeLocalizationResources !== undefined) {
                localVarQueryParameter['IncludeLocalizationResources'] = includeLocalizationResources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApplicationConfigurationApi - functional programming interface
 * @export
 */
export const AbpApplicationConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApplicationConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeLocalizationResources] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAbpApplicationConfigurationGet(includeLocalizationResources?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAbpApplicationConfigurationGet(includeLocalizationResources, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApplicationConfigurationApi - factory interface
 * @export
 */
export const AbpApplicationConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApplicationConfigurationApiFp(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeLocalizationResources] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApplicationConfigurationGet(includeLocalizationResources?: boolean, options?: any): AxiosPromise<ApplicationConfigurationDto> {
            return localVarFp.apiAbpApplicationConfigurationGet(includeLocalizationResources, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AbpApplicationConfigurationApi - object-oriented interface
 * @export
 * @class AbpApplicationConfigurationApi
 * @extends {BaseAPI}
 */
export class AbpApplicationConfigurationApi extends BaseAPI {
    /**
     * 
     * @param {boolean} [includeLocalizationResources] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApplicationConfigurationApi
     */
    public apiAbpApplicationConfigurationGet(includeLocalizationResources?: boolean, options?: AxiosRequestConfig) {
        return AbpApplicationConfigurationApiFp(this.configuration).apiAbpApplicationConfigurationGet(includeLocalizationResources, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpApplicationLocalizationApi - axios parameter creator
 * @export
 */
export const AbpApplicationLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cultureName 
         * @param {boolean} [onlyDynamics] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApplicationLocalizationGet: async (cultureName: string, onlyDynamics?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cultureName' is not null or undefined
            assertParamExists('apiAbpApplicationLocalizationGet', 'cultureName', cultureName)
            const localVarPath = `/api/abp/application-localization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (cultureName !== undefined) {
                localVarQueryParameter['CultureName'] = cultureName;
            }

            if (onlyDynamics !== undefined) {
                localVarQueryParameter['OnlyDynamics'] = onlyDynamics;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApplicationLocalizationApi - functional programming interface
 * @export
 */
export const AbpApplicationLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApplicationLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cultureName 
         * @param {boolean} [onlyDynamics] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAbpApplicationLocalizationGet(cultureName: string, onlyDynamics?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLocalizationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAbpApplicationLocalizationGet(cultureName, onlyDynamics, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApplicationLocalizationApi - factory interface
 * @export
 */
export const AbpApplicationLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApplicationLocalizationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cultureName 
         * @param {boolean} [onlyDynamics] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpApplicationLocalizationGet(cultureName: string, onlyDynamics?: boolean, options?: any): AxiosPromise<ApplicationLocalizationDto> {
            return localVarFp.apiAbpApplicationLocalizationGet(cultureName, onlyDynamics, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AbpApplicationLocalizationApi - object-oriented interface
 * @export
 * @class AbpApplicationLocalizationApi
 * @extends {BaseAPI}
 */
export class AbpApplicationLocalizationApi extends BaseAPI {
    /**
     * 
     * @param {string} cultureName 
     * @param {boolean} [onlyDynamics] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApplicationLocalizationApi
     */
    public apiAbpApplicationLocalizationGet(cultureName: string, onlyDynamics?: boolean, options?: AxiosRequestConfig) {
        return AbpApplicationLocalizationApiFp(this.configuration).apiAbpApplicationLocalizationGet(cultureName, onlyDynamics, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpTenantApi - axios parameter creator
 * @export
 */
export const AbpTenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpMultiTenancyTenantsByIdIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAbpMultiTenancyTenantsByIdIdGet', 'id', id)
            const localVarPath = `/api/abp/multi-tenancy/tenants/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpMultiTenancyTenantsByNameNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiAbpMultiTenancyTenantsByNameNameGet', 'name', name)
            const localVarPath = `/api/abp/multi-tenancy/tenants/by-name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpTenantApi - functional programming interface
 * @export
 */
export const AbpTenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpTenantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAbpMultiTenancyTenantsByIdIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTenantResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAbpMultiTenancyTenantsByIdIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAbpMultiTenancyTenantsByNameNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTenantResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAbpMultiTenancyTenantsByNameNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpTenantApi - factory interface
 * @export
 */
export const AbpTenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpTenantApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpMultiTenancyTenantsByIdIdGet(id: string, options?: any): AxiosPromise<FindTenantResultDto> {
            return localVarFp.apiAbpMultiTenancyTenantsByIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAbpMultiTenancyTenantsByNameNameGet(name: string, options?: any): AxiosPromise<FindTenantResultDto> {
            return localVarFp.apiAbpMultiTenancyTenantsByNameNameGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AbpTenantApi - object-oriented interface
 * @export
 * @class AbpTenantApi
 * @extends {BaseAPI}
 */
export class AbpTenantApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpTenantApi
     */
    public apiAbpMultiTenancyTenantsByIdIdGet(id: string, options?: AxiosRequestConfig) {
        return AbpTenantApiFp(this.configuration).apiAbpMultiTenancyTenantsByIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpTenantApi
     */
    public apiAbpMultiTenancyTenantsByNameNameGet(name: string, options?: AxiosRequestConfig) {
        return AbpTenantApiFp(this.configuration).apiAbpMultiTenancyTenantsByNameNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost: async (body?: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountResetPasswordPost: async (body?: ResetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendPasswordResetCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountSendPasswordResetCodePost: async (body?: SendPasswordResetCodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/send-password-reset-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyPasswordResetTokenInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountVerifyPasswordResetTokenPost: async (body?: VerifyPasswordResetTokenInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/verify-password-reset-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAccountDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountRegisterPost(body?: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountRegisterPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountResetPasswordPost(body?: ResetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountResetPasswordPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendPasswordResetCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountSendPasswordResetCodePost(body?: SendPasswordResetCodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountSendPasswordResetCodePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyPasswordResetTokenInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountVerifyPasswordResetTokenPost(body?: VerifyPasswordResetTokenInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountVerifyPasswordResetTokenPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAccountDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAccountDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(body?: RegisterDto, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiAccountRegisterPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountResetPasswordPost(body?: ResetPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountResetPasswordPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendPasswordResetCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountSendPasswordResetCodePost(body?: SendPasswordResetCodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountSendPasswordResetCodePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyPasswordResetTokenInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountVerifyPasswordResetTokenPost(body?: VerifyPasswordResetTokenInput, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiAccountVerifyPasswordResetTokenPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAccountDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAccountDelete(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {RegisterDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRegisterPost(body?: RegisterDto, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountRegisterPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountResetPasswordPost(body?: ResetPasswordDto, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountResetPasswordPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendPasswordResetCodeDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountSendPasswordResetCodePost(body?: SendPasswordResetCodeDto, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountSendPasswordResetCodePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyPasswordResetTokenInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountVerifyPasswordResetTokenPost(body?: VerifyPasswordResetTokenInput, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountVerifyPasswordResetTokenPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAppAccountDelete(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAppAccountDelete(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByDeveloperAllGet: async (developerAccount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/by-developer-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (developerAccount !== undefined) {
                localVarQueryParameter['developerAccount'] = developerAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByDeveloperGet: async (developerAccount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/by-developer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (developerAccount !== undefined) {
                localVarQueryParameter['developerAccount'] = developerAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByNameGet: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/by-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [creatorId] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppGet: async (creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (creatorId !== undefined) {
                localVarQueryParameter['CreatorId'] = creatorId;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppIdDelete', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppIdGet', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdPut: async (id: string, body?: CreateOrUpdateAppDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppIdPut', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPost: async (body?: CreateOrUpdateAppDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [type] 
         * @param {string} [searchKey] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPublicGet: async (type?: string, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (searchKey !== undefined) {
                localVarQueryParameter['SearchKey'] = searchKey;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppUploadCredentialsGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/upload-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppByDeveloperAllGet(developerAccount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppByDeveloperAllGet(developerAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppByDeveloperGet(developerAccount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppByDeveloperGet(developerAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppByNameGet(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppByNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [creatorId] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppGet(creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppGet(creatorId, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppIdPut(id: string, body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPost(body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [type] 
         * @param {string} [searchKey] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPublicGet(type?: string, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicAppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPublicGet(type, searchKey, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppUploadCredentialsGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObjectCredentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppUploadCredentialsGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByDeveloperAllGet(developerAccount?: string, options?: any): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.apiAppAppByDeveloperAllGet(developerAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByDeveloperGet(developerAccount?: string, options?: any): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.apiAppAppByDeveloperGet(developerAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppByNameGet(name?: string, options?: any): AxiosPromise<AppDto> {
            return localVarFp.apiAppAppByNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [creatorId] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppGet(creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.apiAppAppGet(creatorId, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdGet(id: string, options?: any): AxiosPromise<AppDto> {
            return localVarFp.apiAppAppIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppIdPut(id: string, body?: CreateOrUpdateAppDto, options?: any): AxiosPromise<AppDto> {
            return localVarFp.apiAppAppIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPost(body?: CreateOrUpdateAppDto, options?: any): AxiosPromise<AppDto> {
            return localVarFp.apiAppAppPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [type] 
         * @param {string} [searchKey] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPublicGet(type?: string, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<PublicAppDtoPagedResultDto> {
            return localVarFp.apiAppAppPublicGet(type, searchKey, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppUploadCredentialsGet(key?: string, options?: any): AxiosPromise<StorageObjectCredentials> {
            return localVarFp.apiAppAppUploadCredentialsGet(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {string} [developerAccount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppByDeveloperAllGet(developerAccount?: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppByDeveloperAllGet(developerAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [developerAccount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppByDeveloperGet(developerAccount?: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppByDeveloperGet(developerAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppByNameGet(name?: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppByNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [creatorId] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppGet(creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppGet(creatorId, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppIdGet(id: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppIdPut(id: string, body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppPost(body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [type] 
     * @param {string} [searchKey] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppPublicGet(type?: string, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppPublicGet(type, searchKey, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppAppUploadCredentialsGet(key?: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppAppUploadCredentialsGet(key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppFeatureApi - axios parameter creator
 * @export
 */
export const AppFeatureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-feature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppFeatureIdDelete', 'id', id)
            const localVarPath = `/api/app/app-feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureIdPut: async (id: string, body?: CreateOrUpdateAppFeatureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppFeatureIdPut', 'id', id)
            const localVarPath = `/api/app/app-feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeaturePost: async (body?: CreateOrUpdateAppFeatureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-feature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppFeatureApi - functional programming interface
 * @export
 */
export const AppFeatureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppFeatureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppFeatureGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppFeatureDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppFeatureGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppFeatureIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppFeatureIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppFeatureIdPut(id: string, body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppFeatureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppFeatureIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppFeaturePost(body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppFeatureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppFeaturePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppFeatureApi - factory interface
 * @export
 */
export const AppFeatureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppFeatureApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureGet(options?: any): AxiosPromise<Array<AppFeatureDto>> {
            return localVarFp.apiAppAppFeatureGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppFeatureIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeatureIdPut(id: string, body?: CreateOrUpdateAppFeatureDto, options?: any): AxiosPromise<AppFeatureDto> {
            return localVarFp.apiAppAppFeatureIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppFeaturePost(body?: CreateOrUpdateAppFeatureDto, options?: any): AxiosPromise<AppFeatureDto> {
            return localVarFp.apiAppAppFeaturePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppFeatureApi - object-oriented interface
 * @export
 * @class AppFeatureApi
 * @extends {BaseAPI}
 */
export class AppFeatureApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public apiAppAppFeatureGet(options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).apiAppAppFeatureGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public apiAppAppFeatureIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).apiAppAppFeatureIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppFeatureDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public apiAppAppFeatureIdPut(id: string, body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).apiAppAppFeatureIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppFeatureDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public apiAppAppFeaturePost(body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).apiAppAppFeaturePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppPricingApi - axios parameter creator
 * @export
 */
export const AppPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingByAppIdAppIdGet: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiAppAppPricingByAppIdAppIdGet', 'appId', appId)
            const localVarPath = `/api/app/app-pricing/by-app-id/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingGet: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingIdDelete', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingIdGet', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdPut: async (id: string, body?: CreateOrUpdateAppPricingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingIdPut', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingPost: async (body?: CreateOrUpdateAppPricingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppPricingApi - functional programming interface
 * @export
 */
export const AppPricingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppPricingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingByAppIdAppIdGet(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppPricingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingByAppIdAppIdGet(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingGet(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingIdPut(id: string, body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingPost(body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppPricingApi - factory interface
 * @export
 */
export const AppPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppPricingApiFp(configuration)
    return {
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingByAppIdAppIdGet(appId: string, options?: any): AxiosPromise<Array<AppPricingDto>> {
            return localVarFp.apiAppAppPricingByAppIdAppIdGet(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<AppPricingDtoPagedResultDto> {
            return localVarFp.apiAppAppPricingGet(sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppPricingIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdGet(id: string, options?: any): AxiosPromise<AppPricingDto> {
            return localVarFp.apiAppAppPricingIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingIdPut(id: string, body?: CreateOrUpdateAppPricingDto, options?: any): AxiosPromise<AppPricingDto> {
            return localVarFp.apiAppAppPricingIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingPost(body?: CreateOrUpdateAppPricingDto, options?: any): AxiosPromise<AppPricingDto> {
            return localVarFp.apiAppAppPricingPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppPricingApi - object-oriented interface
 * @export
 * @class AppPricingApi
 * @extends {BaseAPI}
 */
export class AppPricingApi extends BaseAPI {
    /**
     * 
     * @param {string} appId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingByAppIdAppIdGet(appId: string, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingByAppIdAppIdGet(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingGet(sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingIdGet(id: string, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppPricingDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingIdPut(id: string, body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppPricingDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public apiAppAppPricingPost(body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).apiAppAppPricingPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppPricingItemApi - axios parameter creator
 * @export
 */
export const AppPricingItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemGet: async (appId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingItemIdDelete', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingItemIdGet', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdPut: async (id: string, body?: CreateOrUpdateAppPricingItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppPricingItemIdPut', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemPost: async (body?: CreateOrUpdateAppPricingItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppPricingItemApi - functional programming interface
 * @export
 */
export const AppPricingItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppPricingItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingItemGet(appId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppPricingItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingItemGet(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingItemIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingItemIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingItemIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingItemIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingItemIdPut(id: string, body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingItemIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppPricingItemPost(body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppPricingItemPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppPricingItemApi - factory interface
 * @export
 */
export const AppPricingItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppPricingItemApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemGet(appId?: string, options?: any): AxiosPromise<Array<AppPricingItemDto>> {
            return localVarFp.apiAppAppPricingItemGet(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppPricingItemIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdGet(id: string, options?: any): AxiosPromise<AppPricingItemDto> {
            return localVarFp.apiAppAppPricingItemIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemIdPut(id: string, body?: CreateOrUpdateAppPricingItemDto, options?: any): AxiosPromise<AppPricingItemDto> {
            return localVarFp.apiAppAppPricingItemIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppPricingItemPost(body?: CreateOrUpdateAppPricingItemDto, options?: any): AxiosPromise<AppPricingItemDto> {
            return localVarFp.apiAppAppPricingItemPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppPricingItemApi - object-oriented interface
 * @export
 * @class AppPricingItemApi
 * @extends {BaseAPI}
 */
export class AppPricingItemApi extends BaseAPI {
    /**
     * 
     * @param {string} [appId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public apiAppAppPricingItemGet(appId?: string, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).apiAppAppPricingItemGet(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public apiAppAppPricingItemIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).apiAppAppPricingItemIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public apiAppAppPricingItemIdGet(id: string, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).apiAppAppPricingItemIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppPricingItemDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public apiAppAppPricingItemIdPut(id: string, body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).apiAppAppPricingItemIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppPricingItemDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public apiAppAppPricingItemPost(body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).apiAppAppPricingItemPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppReleaseApi - axios parameter creator
 * @export
 */
export const AppReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {string} [environment] 
         * @param {string} [platformName] 
         * @param {string} [platformValue] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseGet: async (appId?: string, environment?: string, platformName?: string, platformValue?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appId !== undefined) {
                localVarQueryParameter['AppId'] = appId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['Environment'] = environment;
            }

            if (platformName !== undefined) {
                localVarQueryParameter['Platform.Name'] = platformName;
            }

            if (platformValue !== undefined) {
                localVarQueryParameter['Platform.Value'] = platformValue;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppReleaseIdDelete', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppReleaseIdGet', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdPut: async (id: string, body?: CreateOrUpdateAppReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppReleaseIdPut', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [appName] 
         * @param {string} [platform] 
         * @param {string} [productType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseLatestGet: async (appName?: string, platform?: string, productType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appName !== undefined) {
                localVarQueryParameter['AppName'] = appName;
            }

            if (platform !== undefined) {
                localVarQueryParameter['Platform'] = platform;
            }

            if (productType !== undefined) {
                localVarQueryParameter['ProductType'] = productType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleasePost: async (body?: CreateOrUpdateAppReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppReleaseApi - functional programming interface
 * @export
 */
export const AppReleaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppReleaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {string} [environment] 
         * @param {string} [platformName] 
         * @param {string} [platformValue] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleaseGet(appId?: string, environment?: string, platformName?: string, platformValue?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleaseGet(appId, environment, platformName, platformValue, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleaseIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleaseIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleaseIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleaseIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleaseIdPut(id: string, body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleaseIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [appName] 
         * @param {string} [platform] 
         * @param {string} [productType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleaseLatestGet(appName?: string, platform?: string, productType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleaseLatestGet(appName, platform, productType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppReleasePost(body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppReleasePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppReleaseApi - factory interface
 * @export
 */
export const AppReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppReleaseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [appId] 
         * @param {string} [environment] 
         * @param {string} [platformName] 
         * @param {string} [platformValue] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseGet(appId?: string, environment?: string, platformName?: string, platformValue?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<AppReleaseDtoPagedResultDto> {
            return localVarFp.apiAppAppReleaseGet(appId, environment, platformName, platformValue, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppReleaseIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdGet(id: string, options?: any): AxiosPromise<AppReleaseDto> {
            return localVarFp.apiAppAppReleaseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseIdPut(id: string, body?: CreateOrUpdateAppReleaseDto, options?: any): AxiosPromise<AppReleaseDto> {
            return localVarFp.apiAppAppReleaseIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [appName] 
         * @param {string} [platform] 
         * @param {string} [productType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleaseLatestGet(appName?: string, platform?: string, productType?: string, options?: any): AxiosPromise<AppReleaseDto> {
            return localVarFp.apiAppAppReleaseLatestGet(appName, platform, productType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppReleasePost(body?: CreateOrUpdateAppReleaseDto, options?: any): AxiosPromise<AppReleaseDto> {
            return localVarFp.apiAppAppReleasePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppReleaseApi - object-oriented interface
 * @export
 * @class AppReleaseApi
 * @extends {BaseAPI}
 */
export class AppReleaseApi extends BaseAPI {
    /**
     * 
     * @param {string} [appId] 
     * @param {string} [environment] 
     * @param {string} [platformName] 
     * @param {string} [platformValue] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleaseGet(appId?: string, environment?: string, platformName?: string, platformValue?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleaseGet(appId, environment, platformName, platformValue, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleaseIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleaseIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleaseIdGet(id: string, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleaseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppReleaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleaseIdPut(id: string, body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleaseIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [appName] 
     * @param {string} [platform] 
     * @param {string} [productType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleaseLatestGet(appName?: string, platform?: string, productType?: string, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleaseLatestGet(appName, platform, productType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppReleaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public apiAppAppReleasePost(body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).apiAppAppReleasePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppSdkApi - axios parameter creator
 * @export
 */
export const AppSdkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-sdk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppSdkIdDelete', 'id', id)
            const localVarPath = `/api/app/app-sdk/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkIdPut: async (id: string, body?: CreateOrUpdateAppSdkDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppAppSdkIdPut', 'id', id)
            const localVarPath = `/api/app/app-sdk/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkPost: async (body?: CreateOrUpdateAppSdkDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-sdk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppSdkApi - functional programming interface
 * @export
 */
export const AppSdkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppSdkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppSdkGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSdkDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppSdkGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppSdkIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppSdkIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppSdkIdPut(id: string, body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSdkDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppSdkIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppSdkPost(body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSdkDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppSdkPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppSdkApi - factory interface
 * @export
 */
export const AppSdkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppSdkApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkGet(options?: any): AxiosPromise<Array<AppSdkDto>> {
            return localVarFp.apiAppAppSdkGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppAppSdkIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkIdPut(id: string, body?: CreateOrUpdateAppSdkDto, options?: any): AxiosPromise<AppSdkDto> {
            return localVarFp.apiAppAppSdkIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppSdkPost(body?: CreateOrUpdateAppSdkDto, options?: any): AxiosPromise<AppSdkDto> {
            return localVarFp.apiAppAppSdkPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppSdkApi - object-oriented interface
 * @export
 * @class AppSdkApi
 * @extends {BaseAPI}
 */
export class AppSdkApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public apiAppAppSdkGet(options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).apiAppAppSdkGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public apiAppAppSdkIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).apiAppAppSdkIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateAppSdkDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public apiAppAppSdkIdPut(id: string, body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).apiAppAppSdkIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateAppSdkDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public apiAppAppSdkPost(body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).apiAppAppSdkPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppUserScoreApi - axios parameter creator
 * @export
 */
export const AppUserScoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOrUpdateAppUserScoreDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppUserScorePost: async (body?: CreateOrUpdateAppUserScoreDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-user-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppUserScoreApi - functional programming interface
 * @export
 */
export const AppUserScoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppUserScoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOrUpdateAppUserScoreDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppAppUserScorePost(body?: CreateOrUpdateAppUserScoreDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUserScoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppAppUserScorePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppUserScoreApi - factory interface
 * @export
 */
export const AppUserScoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppUserScoreApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateOrUpdateAppUserScoreDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppAppUserScorePost(body?: CreateOrUpdateAppUserScoreDto, options?: any): AxiosPromise<AppUserScoreDto> {
            return localVarFp.apiAppAppUserScorePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppUserScoreApi - object-oriented interface
 * @export
 * @class AppUserScoreApi
 * @extends {BaseAPI}
 */
export class AppUserScoreApi extends BaseAPI {
    /**
     * 
     * @param {CreateOrUpdateAppUserScoreDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppUserScoreApi
     */
    public apiAppAppUserScorePost(body?: CreateOrUpdateAppUserScoreDto, options?: AxiosRequestConfig) {
        return AppUserScoreApiFp(this.configuration).apiAppAppUserScorePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BindDeviceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceBindPost: async (body?: BindDeviceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device/bind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceDelete: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceGet: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshDeviceStatusDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceRefreshPost: async (body?: RefreshDeviceStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BindDeviceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppDeviceBindPost(body?: BindDeviceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDeviceBindPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppDeviceDelete(token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDeviceDelete(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppDeviceGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDeviceGet(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshDeviceStatusDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppDeviceRefreshPost(body?: RefreshDeviceStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppDeviceRefreshPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceApiFp(configuration)
    return {
        /**
         * 
         * @param {BindDeviceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceBindPost(body?: BindDeviceDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppDeviceBindPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceDelete(token?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppDeviceDelete(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<DeviceDtoPagedResultDto> {
            return localVarFp.apiAppDeviceGet(sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshDeviceStatusDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppDeviceRefreshPost(body?: RefreshDeviceStatusDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppDeviceRefreshPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * 
     * @param {BindDeviceDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public apiAppDeviceBindPost(body?: BindDeviceDto, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).apiAppDeviceBindPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public apiAppDeviceDelete(token?: string, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).apiAppDeviceDelete(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public apiAppDeviceGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).apiAppDeviceGet(sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshDeviceStatusDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public apiAppDeviceRefreshPost(body?: RefreshDeviceStatusDto, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).apiAppDeviceRefreshPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmailSettingsApi - axios parameter creator
 * @export
 */
export const EmailSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateEmailSettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingPost: async (body?: UpdateEmailSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendTestEmailInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingSendTestEmailPost: async (body?: SendTestEmailInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing/send-test-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailSettingsApi - functional programming interface
 * @export
 */
export const EmailSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingManagementEmailingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingManagementEmailingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateEmailSettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingManagementEmailingPost(body?: UpdateEmailSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingManagementEmailingPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendTestEmailInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingManagementEmailingSendTestEmailPost(body?: SendTestEmailInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingManagementEmailingSendTestEmailPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailSettingsApi - factory interface
 * @export
 */
export const EmailSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingGet(options?: any): AxiosPromise<EmailSettingsDto> {
            return localVarFp.apiSettingManagementEmailingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateEmailSettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingPost(body?: UpdateEmailSettingsDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingManagementEmailingPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendTestEmailInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingManagementEmailingSendTestEmailPost(body?: SendTestEmailInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingManagementEmailingSendTestEmailPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailSettingsApi - object-oriented interface
 * @export
 * @class EmailSettingsApi
 * @extends {BaseAPI}
 */
export class EmailSettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public apiSettingManagementEmailingGet(options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).apiSettingManagementEmailingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateEmailSettingsDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public apiSettingManagementEmailingPost(body?: UpdateEmailSettingsDto, options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).apiSettingManagementEmailingPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendTestEmailInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public apiSettingManagementEmailingSendTestEmailPost(body?: SendTestEmailInput, options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).apiSettingManagementEmailingSendTestEmailPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesDelete: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesGet: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdateFeaturesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesPut: async (providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFeatureManagementFeaturesDelete(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFeatureManagementFeaturesDelete(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFeatureManagementFeaturesGet(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeatureListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFeatureManagementFeaturesGet(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdateFeaturesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFeatureManagementFeaturesPut(providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFeatureManagementFeaturesPut(providerName, providerKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesDelete(providerName?: string, providerKey?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiFeatureManagementFeaturesDelete(providerName, providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesGet(providerName?: string, providerKey?: string, options?: any): AxiosPromise<GetFeatureListResultDto> {
            return localVarFp.apiFeatureManagementFeaturesGet(providerName, providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdateFeaturesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFeatureManagementFeaturesPut(providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiFeatureManagementFeaturesPut(providerName, providerKey, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * 
     * @param {string} [providerName] 
     * @param {string} [providerKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public apiFeatureManagementFeaturesDelete(providerName?: string, providerKey?: string, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).apiFeatureManagementFeaturesDelete(providerName, providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [providerName] 
     * @param {string} [providerKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public apiFeatureManagementFeaturesGet(providerName?: string, providerKey?: string, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).apiFeatureManagementFeaturesGet(providerName, providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [providerName] 
     * @param {string} [providerKey] 
     * @param {UpdateFeaturesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public apiFeatureManagementFeaturesPut(providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).apiFeatureManagementFeaturesPut(providerName, providerKey, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * KeyValueApi - axios parameter creator
 * @export
 */
export const KeyValueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueBoolGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/bool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDateTimeGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/date-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDecimalGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/decimal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDoubleGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/double`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueIntGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {BooleanSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetBoolPost: async (key?: string, body?: BooleanSetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-bool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DateTimeSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDateTimePost: async (key?: string, body?: DateTimeSetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-date-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DecimalSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDecimalPost: async (key?: string, body?: DecimalSetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-decimal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DoubleSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDoublePost: async (key?: string, body?: DoubleSetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-double`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {Int32SetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetIntPost: async (key?: string, body?: Int32SetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-int`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {StringSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetStringPost: async (key?: string, body?: StringSetKeyValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/set-string`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueStringGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/key-value/string`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyValueApi - functional programming interface
 * @export
 */
export const KeyValueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyValueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueBoolGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueBoolGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueDateTimeGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DateTimeKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueDateTimeGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueDecimalGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecimalKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueDecimalGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueDoubleGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubleKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueDoubleGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueIntGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Int32KeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueIntGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {BooleanSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetBoolPost(key?: string, body?: BooleanSetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetBoolPost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DateTimeSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetDateTimePost(key?: string, body?: DateTimeSetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetDateTimePost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DecimalSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetDecimalPost(key?: string, body?: DecimalSetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetDecimalPost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DoubleSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetDoublePost(key?: string, body?: DoubleSetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetDoublePost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {Int32SetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetIntPost(key?: string, body?: Int32SetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetIntPost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {StringSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueSetStringPost(key?: string, body?: StringSetKeyValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueSetStringPost(key, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppKeyValueStringGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringKeyValue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppKeyValueStringGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KeyValueApi - factory interface
 * @export
 */
export const KeyValueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyValueApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueBoolGet(key?: string, options?: any): AxiosPromise<BooleanKeyValue> {
            return localVarFp.apiAppKeyValueBoolGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDateTimeGet(key?: string, options?: any): AxiosPromise<DateTimeKeyValue> {
            return localVarFp.apiAppKeyValueDateTimeGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDecimalGet(key?: string, options?: any): AxiosPromise<DecimalKeyValue> {
            return localVarFp.apiAppKeyValueDecimalGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueDoubleGet(key?: string, options?: any): AxiosPromise<DoubleKeyValue> {
            return localVarFp.apiAppKeyValueDoubleGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueIntGet(key?: string, options?: any): AxiosPromise<Int32KeyValue> {
            return localVarFp.apiAppKeyValueIntGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {BooleanSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetBoolPost(key?: string, body?: BooleanSetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetBoolPost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DateTimeSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDateTimePost(key?: string, body?: DateTimeSetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetDateTimePost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DecimalSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDecimalPost(key?: string, body?: DecimalSetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetDecimalPost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {DoubleSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetDoublePost(key?: string, body?: DoubleSetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetDoublePost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {Int32SetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetIntPost(key?: string, body?: Int32SetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetIntPost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {StringSetKeyValueDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueSetStringPost(key?: string, body?: StringSetKeyValueDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppKeyValueSetStringPost(key, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppKeyValueStringGet(key?: string, options?: any): AxiosPromise<StringKeyValue> {
            return localVarFp.apiAppKeyValueStringGet(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KeyValueApi - object-oriented interface
 * @export
 * @class KeyValueApi
 * @extends {BaseAPI}
 */
export class KeyValueApi extends BaseAPI {
    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueBoolGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueBoolGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueDateTimeGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueDateTimeGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueDecimalGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueDecimalGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueDoubleGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueDoubleGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueIntGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueIntGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {BooleanSetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetBoolPost(key?: string, body?: BooleanSetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetBoolPost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {DateTimeSetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetDateTimePost(key?: string, body?: DateTimeSetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetDateTimePost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {DecimalSetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetDecimalPost(key?: string, body?: DecimalSetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetDecimalPost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {DoubleSetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetDoublePost(key?: string, body?: DoubleSetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetDoublePost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {Int32SetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetIntPost(key?: string, body?: Int32SetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetIntPost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {StringSetKeyValueDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueSetStringPost(key?: string, body?: StringSetKeyValueDto, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueSetStringPost(key, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyValueApi
     */
    public apiAppKeyValueStringGet(key?: string, options?: AxiosRequestConfig) {
        return KeyValueApiFp(this.configuration).apiAppKeyValueStringGet(key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckPasswordPost: async (body?: UserLoginInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/check-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost: async (body?: UserLoginInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLogoutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountCheckPasswordPost(body?: UserLoginInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbpLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountCheckPasswordPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLoginPost(body?: UserLoginInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbpLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLoginPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLogoutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLogoutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCheckPasswordPost(body?: UserLoginInfo, options?: any): AxiosPromise<AbpLoginResult> {
            return localVarFp.apiAccountCheckPasswordPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(body?: UserLoginInfo, options?: any): AxiosPromise<AbpLoginResult> {
            return localVarFp.apiAccountLoginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLogoutGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountLogoutGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {UserLoginInfo} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiAccountCheckPasswordPost(body?: UserLoginInfo, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiAccountCheckPasswordPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLoginInfo} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiAccountLoginPost(body?: UserLoginInfo, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiAccountLoginPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiAccountLogoutGet(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiAccountLogoutGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MessagePublishDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessagePublishPost: async (body?: MessagePublishDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageRecallDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageRecallPost: async (body?: MessageRecallDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/recall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageSubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageSubscribePost: async (body?: MessageSubscribeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageUnsubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageUnsubscribePost: async (body?: MessageUnsubscribeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MessagePublishDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessagePublishPost(body?: MessagePublishDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessagePublishPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageRecallDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageRecallPost(body?: MessageRecallDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageRecallPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageSubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageSubscribePost(body?: MessageSubscribeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageSubscribePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageUnsubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageUnsubscribePost(body?: MessageUnsubscribeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageUnsubscribePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 
         * @param {MessagePublishDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessagePublishPost(body?: MessagePublishDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppMessagePublishPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageRecallDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageRecallPost(body?: MessageRecallDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppMessageRecallPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageSubscribePost(body?: MessageSubscribeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppMessageSubscribePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageUnsubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageUnsubscribePost(body?: MessageUnsubscribeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppMessageUnsubscribePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @param {MessagePublishDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public apiAppMessagePublishPost(body?: MessagePublishDto, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).apiAppMessagePublishPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageRecallDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public apiAppMessageRecallPost(body?: MessageRecallDto, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).apiAppMessageRecallPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSubscribeDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public apiAppMessageSubscribePost(body?: MessageSubscribeDto, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).apiAppMessageSubscribePost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageUnsubscribeDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public apiAppMessageUnsubscribePost(body?: MessageUnsubscribeDto, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).apiAppMessageUnsubscribePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageTemplateApi - axios parameter creator
 * @export
 */
export const MessageTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppMessageTemplateIdDelete', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppMessageTemplateIdGet', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdPut: async (id: string, body?: CreateOrUpdateMessageTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppMessageTemplateIdPut', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplatePost: async (body?: CreateOrUpdateMessageTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplateApi - functional programming interface
 * @export
 */
export const MessageTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTemplateDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateIdPut(id: string, body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplatePost(body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplatePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplateApi - factory interface
 * @export
 */
export const MessageTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateGet(options?: any): AxiosPromise<Array<MessageTemplateDto>> {
            return localVarFp.apiAppMessageTemplateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppMessageTemplateIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdGet(id: string, options?: any): AxiosPromise<MessageTemplateDto> {
            return localVarFp.apiAppMessageTemplateIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateIdPut(id: string, body?: CreateOrUpdateMessageTemplateDto, options?: any): AxiosPromise<MessageTemplateDto> {
            return localVarFp.apiAppMessageTemplateIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplatePost(body?: CreateOrUpdateMessageTemplateDto, options?: any): AxiosPromise<MessageTemplateDto> {
            return localVarFp.apiAppMessageTemplatePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageTemplateApi - object-oriented interface
 * @export
 * @class MessageTemplateApi
 * @extends {BaseAPI}
 */
export class MessageTemplateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public apiAppMessageTemplateGet(options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).apiAppMessageTemplateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public apiAppMessageTemplateIdDelete(id: string, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).apiAppMessageTemplateIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public apiAppMessageTemplateIdGet(id: string, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).apiAppMessageTemplateIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CreateOrUpdateMessageTemplateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public apiAppMessageTemplateIdPut(id: string, body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).apiAppMessageTemplateIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdateMessageTemplateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public apiAppMessageTemplatePost(body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).apiAppMessageTemplatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageTemplateReleaseApi - axios parameter creator
 * @export
 */
export const MessageTemplateReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [templateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleaseGet: async (templateId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleaseIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppMessageTemplateReleaseIdGet', 'id', id)
            const localVarPath = `/api/app/message-template-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMessageTemplateReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleasePost: async (body?: CreateMessageTemplateReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplateReleaseApi - functional programming interface
 * @export
 */
export const MessageTemplateReleaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplateReleaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [templateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateReleaseGet(templateId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTemplateReleaseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateReleaseGet(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateReleaseIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateReleaseIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMessageTemplateReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppMessageTemplateReleasePost(body?: CreateMessageTemplateReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppMessageTemplateReleasePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplateReleaseApi - factory interface
 * @export
 */
export const MessageTemplateReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplateReleaseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [templateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleaseGet(templateId?: string, options?: any): AxiosPromise<Array<MessageTemplateReleaseDto>> {
            return localVarFp.apiAppMessageTemplateReleaseGet(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleaseIdGet(id: string, options?: any): AxiosPromise<MessageTemplateReleaseDto> {
            return localVarFp.apiAppMessageTemplateReleaseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateMessageTemplateReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppMessageTemplateReleasePost(body?: CreateMessageTemplateReleaseDto, options?: any): AxiosPromise<MessageTemplateReleaseDto> {
            return localVarFp.apiAppMessageTemplateReleasePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageTemplateReleaseApi - object-oriented interface
 * @export
 * @class MessageTemplateReleaseApi
 * @extends {BaseAPI}
 */
export class MessageTemplateReleaseApi extends BaseAPI {
    /**
     * 
     * @param {string} [templateId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public apiAppMessageTemplateReleaseGet(templateId?: string, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).apiAppMessageTemplateReleaseGet(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public apiAppMessageTemplateReleaseIdGet(id: string, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).apiAppMessageTemplateReleaseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateMessageTemplateReleaseDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public apiAppMessageTemplateReleasePost(body?: CreateMessageTemplateReleaseDto, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).apiAppMessageTemplateReleasePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {string} message 
         * @param {number} [automaticallyCopy] 
         * @param {string} [copy] 
         * @param {string} [url] 
         * @param {string} [isArchive] 
         * @param {string} [group] 
         * @param {string} [icon] 
         * @param {string} [name] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationBarkApiKeyMessageGet: async (apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, name?: string, value?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('apiAppNotificationBarkApiKeyMessageGet', 'apiKey', apiKey)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('apiAppNotificationBarkApiKeyMessageGet', 'message', message)
            const localVarPath = `/api/app/notification/bark/{apiKey}/{message}`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)))
                .replace(`{${"message"}}`, encodeURIComponent(String(message)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (automaticallyCopy !== undefined) {
                localVarQueryParameter['automaticallyCopy'] = automaticallyCopy;
            }

            if (copy !== undefined) {
                localVarQueryParameter['copy'] = copy;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (isArchive !== undefined) {
                localVarQueryParameter['isArchive'] = isArchive;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (icon !== undefined) {
                localVarQueryParameter['icon'] = icon;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (value !== undefined) {
                localVarQueryParameter['Value'] = value;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationGet: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePushNotificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationPushPost: async (body?: CreatePushNotificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/notification/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {string} message 
         * @param {number} [automaticallyCopy] 
         * @param {string} [copy] 
         * @param {string} [url] 
         * @param {string} [isArchive] 
         * @param {string} [group] 
         * @param {string} [icon] 
         * @param {string} [name] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppNotificationBarkApiKeyMessageGet(apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, name?: string, value?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppNotificationBarkApiKeyMessageGet(apiKey, message, automaticallyCopy, copy, url, isArchive, group, icon, name, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppNotificationGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationInfoDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppNotificationGet(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePushNotificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppNotificationPushPost(body?: CreatePushNotificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppNotificationPushPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {string} message 
         * @param {number} [automaticallyCopy] 
         * @param {string} [copy] 
         * @param {string} [url] 
         * @param {string} [isArchive] 
         * @param {string} [group] 
         * @param {string} [icon] 
         * @param {string} [name] 
         * @param {string} [value] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationBarkApiKeyMessageGet(apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, name?: string, value?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppNotificationBarkApiKeyMessageGet(apiKey, message, automaticallyCopy, copy, url, isArchive, group, icon, name, value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<NotificationInfoDtoPagedResultDto> {
            return localVarFp.apiAppNotificationGet(sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePushNotificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppNotificationPushPost(body?: CreatePushNotificationDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppNotificationPushPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @param {string} apiKey 
     * @param {string} message 
     * @param {number} [automaticallyCopy] 
     * @param {string} [copy] 
     * @param {string} [url] 
     * @param {string} [isArchive] 
     * @param {string} [group] 
     * @param {string} [icon] 
     * @param {string} [name] 
     * @param {string} [value] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public apiAppNotificationBarkApiKeyMessageGet(apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, name?: string, value?: string, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).apiAppNotificationBarkApiKeyMessageGet(apiKey, message, automaticallyCopy, copy, url, isArchive, group, icon, name, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public apiAppNotificationGet(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).apiAppNotificationGet(sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePushNotificationDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public apiAppNotificationPushPost(body?: CreatePushNotificationDto, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).apiAppNotificationPushPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPermissionManagementPermissionsGet: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/permission-management/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdatePermissionsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPermissionManagementPermissionsPut: async (providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/permission-management/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPermissionManagementPermissionsGet(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPermissionListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPermissionManagementPermissionsGet(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdatePermissionsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPermissionManagementPermissionsPut(providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPermissionManagementPermissionsPut(providerName, providerKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPermissionManagementPermissionsGet(providerName?: string, providerKey?: string, options?: any): AxiosPromise<GetPermissionListResultDto> {
            return localVarFp.apiPermissionManagementPermissionsGet(providerName, providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdatePermissionsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPermissionManagementPermissionsPut(providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiPermissionManagementPermissionsPut(providerName, providerKey, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * 
     * @param {string} [providerName] 
     * @param {string} [providerKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiPermissionManagementPermissionsGet(providerName?: string, providerKey?: string, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).apiPermissionManagementPermissionsGet(providerName, providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [providerName] 
     * @param {string} [providerKey] 
     * @param {UpdatePermissionsDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public apiPermissionManagementPermissionsPut(providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).apiPermissionManagementPermissionsPut(providerName, providerKey, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfileChangePasswordPost: async (body?: ChangePasswordInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfileGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfilePut: async (body?: UpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountMyProfileChangePasswordPost(body?: ChangePasswordInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountMyProfileChangePasswordPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountMyProfileGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountMyProfileGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountMyProfilePut(body?: UpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountMyProfilePut(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfileChangePasswordPost(body?: ChangePasswordInput, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountMyProfileChangePasswordPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfileGet(options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.apiAccountMyProfileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateProfileDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMyProfilePut(body?: UpdateProfileDto, options?: any): AxiosPromise<ProfileDto> {
            return localVarFp.apiAccountMyProfilePut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordInput} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiAccountMyProfileChangePasswordPost(body?: ChangePasswordInput, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiAccountMyProfileChangePasswordPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiAccountMyProfileGet(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiAccountMyProfileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateProfileDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public apiAccountMyProfilePut(body?: UpdateProfileDto, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).apiAccountMyProfilePut(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PuupeeApi - axios parameter creator
 * @export
 */
export const PuupeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [afterVersion] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPuupeePullGet: async (afterVersion?: number, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/puupee/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (afterVersion !== undefined) {
                localVarQueryParameter['afterVersion'] = afterVersion;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['skipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['maxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdatePuupeeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPuupeePushPost: async (body?: CreateOrUpdatePuupeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/puupee/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PuupeeApi - functional programming interface
 * @export
 */
export const PuupeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PuupeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [afterVersion] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppPuupeePullGet(afterVersion?: number, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PuupeeDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppPuupeePullGet(afterVersion, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdatePuupeeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppPuupeePushPost(body?: CreateOrUpdatePuupeeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PuupeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppPuupeePushPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PuupeeApi - factory interface
 * @export
 */
export const PuupeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PuupeeApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [afterVersion] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPuupeePullGet(afterVersion?: number, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<PuupeeDtoPagedResultDto> {
            return localVarFp.apiAppPuupeePullGet(afterVersion, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrUpdatePuupeeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPuupeePushPost(body?: CreateOrUpdatePuupeeDto, options?: any): AxiosPromise<PuupeeDto> {
            return localVarFp.apiAppPuupeePushPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PuupeeApi - object-oriented interface
 * @export
 * @class PuupeeApi
 * @extends {BaseAPI}
 */
export class PuupeeApi extends BaseAPI {
    /**
     * 
     * @param {number} [afterVersion] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PuupeeApi
     */
    public apiAppPuupeePullGet(afterVersion?: number, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return PuupeeApiFp(this.configuration).apiAppPuupeePullGet(afterVersion, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrUpdatePuupeeDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PuupeeApi
     */
    public apiAppPuupeePushPost(body?: CreateOrUpdatePuupeeDto, options?: AxiosRequestConfig) {
        return PuupeeApiFp(this.configuration).apiAppPuupeePushPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesAllGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesGet: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityRolesIdDelete', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityRolesIdGet', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityRoleUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdPut: async (id: string, body?: IdentityRoleUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityRolesIdPut', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdentityRoleCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesPost: async (body?: IdentityRoleCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesAllGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesAllGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesGet(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityRoleUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesIdPut(id: string, body?: IdentityRoleUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdentityRoleCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityRolesPost(body?: IdentityRoleCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityRolesPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesAllGet(options?: any): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.apiIdentityRolesAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<IdentityRoleDtoPagedResultDto> {
            return localVarFp.apiIdentityRolesGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIdentityRolesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdGet(id: string, options?: any): AxiosPromise<IdentityRoleDto> {
            return localVarFp.apiIdentityRolesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityRoleUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesIdPut(id: string, body?: IdentityRoleUpdateDto, options?: any): AxiosPromise<IdentityRoleDto> {
            return localVarFp.apiIdentityRolesIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentityRoleCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityRolesPost(body?: IdentityRoleCreateDto, options?: any): AxiosPromise<IdentityRoleDto> {
            return localVarFp.apiIdentityRolesPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesAllGet(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesIdDelete(id: string, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesIdGet(id: string, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IdentityRoleUpdateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesIdPut(id: string, body?: IdentityRoleUpdateDto, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityRoleCreateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiIdentityRolesPost(body?: IdentityRoleCreateDto, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiIdentityRolesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSettingsSetPost: async (body?: SettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/settings/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSettingsSetPost(body?: SettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSettingsSetPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSettingsGet(options?: any): AxiosPromise<SettingsDto> {
            return localVarFp.apiAppSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSettingsSetPost(body?: SettingsDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppSettingsSetPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiAppSettingsGet(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiAppSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SettingsDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiAppSettingsSetPost(body?: SettingsDto, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiAppSettingsSetPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SimpleDataApi - axios parameter creator
 * @export
 */
export const SimpleDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [collection] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataGet: async (collection?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/simple-data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (collection !== undefined) {
                localVarQueryParameter['Collection'] = collection;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppSimpleDataIdDelete', 'id', id)
            const localVarPath = `/api/app/simple-data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppSimpleDataIdGet', 'id', id)
            const localVarPath = `/api/app/simple-data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SimpleDataDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataSavePost: async (body?: SimpleDataDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/simple-data/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimpleDataApi - functional programming interface
 * @export
 */
export const SimpleDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimpleDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [collection] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSimpleDataGet(collection?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleDataDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSimpleDataGet(collection, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSimpleDataIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSimpleDataIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSimpleDataIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSimpleDataIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SimpleDataDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSimpleDataSavePost(body?: SimpleDataDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleDataDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSimpleDataSavePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SimpleDataApi - factory interface
 * @export
 */
export const SimpleDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimpleDataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [collection] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataGet(collection?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<SimpleDataDtoPagedResultDto> {
            return localVarFp.apiAppSimpleDataGet(collection, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppSimpleDataIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataIdGet(id: string, options?: any): AxiosPromise<SimpleDataDto> {
            return localVarFp.apiAppSimpleDataIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SimpleDataDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSimpleDataSavePost(body?: SimpleDataDto, options?: any): AxiosPromise<SimpleDataDto> {
            return localVarFp.apiAppSimpleDataSavePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimpleDataApi - object-oriented interface
 * @export
 * @class SimpleDataApi
 * @extends {BaseAPI}
 */
export class SimpleDataApi extends BaseAPI {
    /**
     * 
     * @param {string} [collection] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleDataApi
     */
    public apiAppSimpleDataGet(collection?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return SimpleDataApiFp(this.configuration).apiAppSimpleDataGet(collection, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleDataApi
     */
    public apiAppSimpleDataIdDelete(id: string, options?: AxiosRequestConfig) {
        return SimpleDataApiFp(this.configuration).apiAppSimpleDataIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleDataApi
     */
    public apiAppSimpleDataIdGet(id: string, options?: AxiosRequestConfig) {
        return SimpleDataApiFp(this.configuration).apiAppSimpleDataIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SimpleDataDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleDataApi
     */
    public apiAppSimpleDataSavePost(body?: SimpleDataDto, options?: AxiosRequestConfig) {
        return SimpleDataApiFp(this.configuration).apiAppSimpleDataSavePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StorageObjectApi - axios parameter creator
 * @export
 */
export const StorageObjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectFileGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [rapidCode] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectFileOrCredentialsGet: async (rapidCode?: string, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/file-or-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (rapidCode !== undefined) {
                localVarQueryParameter['rapidCode'] = rapidCode;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectPreSignUrlPost: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/pre-sign-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectThumbGet: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/thumb`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageObjectApi - functional programming interface
 * @export
 */
export const StorageObjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageObjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppStorageObjectFileGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppStorageObjectFileGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [rapidCode] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppStorageObjectFileOrCredentialsGet(rapidCode?: string, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObjectOrCredentialsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppStorageObjectFileOrCredentialsGet(rapidCode, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppStorageObjectPreSignUrlPost(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppStorageObjectPreSignUrlPost(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppStorageObjectThumbGet(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppStorageObjectThumbGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageObjectApi - factory interface
 * @export
 */
export const StorageObjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageObjectApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectFileGet(key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppStorageObjectFileGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [rapidCode] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectFileOrCredentialsGet(rapidCode?: string, key?: string, options?: any): AxiosPromise<StorageObjectOrCredentialsDto> {
            return localVarFp.apiAppStorageObjectFileOrCredentialsGet(rapidCode, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectPreSignUrlPost(key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiAppStorageObjectPreSignUrlPost(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppStorageObjectThumbGet(key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppStorageObjectThumbGet(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageObjectApi - object-oriented interface
 * @export
 * @class StorageObjectApi
 * @extends {BaseAPI}
 */
export class StorageObjectApi extends BaseAPI {
    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public apiAppStorageObjectFileGet(key?: string, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).apiAppStorageObjectFileGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [rapidCode] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public apiAppStorageObjectFileOrCredentialsGet(rapidCode?: string, key?: string, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).apiAppStorageObjectFileOrCredentialsGet(rapidCode, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public apiAppStorageObjectPreSignUrlPost(key?: string, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).apiAppStorageObjectPreSignUrlPost(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public apiAppStorageObjectThumbGet(key?: string, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).apiAppStorageObjectThumbGet(key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSubscriptionVerifyApplePost: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/subscription/verify-apple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSubscriptionVerifyApplePost(body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSubscriptionVerifyApplePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSubscriptionVerifyApplePost(body?: object, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppSubscriptionVerifyApplePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export class SubscriptionApi extends BaseAPI {
    /**
     * 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public apiAppSubscriptionVerifyApplePost(body?: object, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).apiAppSubscriptionVerifyApplePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SyncStateApi - axios parameter creator
 * @export
 */
export const SyncStateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSyncStateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/sync-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSyncStatePuupeeChangedEtoPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/sync-state/puupee-changed-eto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncStateApi - functional programming interface
 * @export
 */
export const SyncStateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncStateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSyncStateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSyncStateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppSyncStatePuupeeChangedEtoPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PuupeeChangedEto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppSyncStatePuupeeChangedEtoPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SyncStateApi - factory interface
 * @export
 */
export const SyncStateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncStateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSyncStateGet(options?: any): AxiosPromise<SyncStateDto> {
            return localVarFp.apiAppSyncStateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppSyncStatePuupeeChangedEtoPost(options?: any): AxiosPromise<PuupeeChangedEto> {
            return localVarFp.apiAppSyncStatePuupeeChangedEtoPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncStateApi - object-oriented interface
 * @export
 * @class SyncStateApi
 * @extends {BaseAPI}
 */
export class SyncStateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncStateApi
     */
    public apiAppSyncStateGet(options?: AxiosRequestConfig) {
        return SyncStateApiFp(this.configuration).apiAppSyncStateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncStateApi
     */
    public apiAppSyncStatePuupeeChangedEtoPost(options?: AxiosRequestConfig) {
        return SyncStateApiFp(this.configuration).apiAppSyncStatePuupeeChangedEtoPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsGet: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/multi-tenancy/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdDefaultConnectionStringDelete', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdDefaultConnectionStringGet', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [defaultConnectionString] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringPut: async (id: string, defaultConnectionString?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdDefaultConnectionStringPut', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (defaultConnectionString !== undefined) {
                localVarQueryParameter['defaultConnectionString'] = defaultConnectionString;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdDelete', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdGet', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdPut: async (id: string, body?: TenantUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMultiTenancyTenantsIdPut', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsPost: async (body?: TenantCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/multi-tenancy/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsGet(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdDefaultConnectionStringGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdDefaultConnectionStringGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [defaultConnectionString] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdDefaultConnectionStringPut(id: string, defaultConnectionString?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdDefaultConnectionStringPut(id, defaultConnectionString, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsIdPut(id: string, body?: TenantUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenantCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMultiTenancyTenantsPost(body?: TenantCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMultiTenancyTenantsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<TenantDtoPagedResultDto> {
            return localVarFp.apiMultiTenancyTenantsGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringGet(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiMultiTenancyTenantsIdDefaultConnectionStringGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [defaultConnectionString] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDefaultConnectionStringPut(id: string, defaultConnectionString?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMultiTenancyTenantsIdDefaultConnectionStringPut(id, defaultConnectionString, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiMultiTenancyTenantsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdGet(id: string, options?: any): AxiosPromise<TenantDto> {
            return localVarFp.apiMultiTenancyTenantsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsIdPut(id: string, body?: TenantUpdateDto, options?: any): AxiosPromise<TenantDto> {
            return localVarFp.apiMultiTenancyTenantsIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMultiTenancyTenantsPost(body?: TenantCreateDto, options?: any): AxiosPromise<TenantDto> {
            return localVarFp.apiMultiTenancyTenantsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdDefaultConnectionStringDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdDefaultConnectionStringGet(id: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdDefaultConnectionStringGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [defaultConnectionString] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdDefaultConnectionStringPut(id: string, defaultConnectionString?: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdDefaultConnectionStringPut(id, defaultConnectionString, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdDelete(id: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdGet(id: string, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {TenantUpdateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsIdPut(id: string, body?: TenantUpdateDto, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantCreateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiMultiTenancyTenantsPost(body?: TenantCreateDto, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiMultiTenancyTenantsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestDatetimeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Test/datetime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTestDatetimeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestDateTime>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTestDatetimeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTestDatetimeGet(options?: any): AxiosPromise<TestDateTime> {
            return localVarFp.apiTestDatetimeGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiTestDatetimeGet(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).apiTestDatetimeGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersAssignableRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/assignable-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersByEmailEmailGet: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('apiIdentityUsersByEmailEmailGet', 'email', email)
            const localVarPath = `/api/identity/users/by-email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersByUsernameUserNameGet: async (userName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('apiIdentityUsersByUsernameUserNameGet', 'userName', userName)
            const localVarPath = `/api/identity/users/by-username/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersGet: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersIdDelete', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersIdGet', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdPut: async (id: string, body?: IdentityUserUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersIdPut', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdRolesGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersIdRolesGet', 'id', id)
            const localVarPath = `/api/identity/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateRolesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdRolesPut: async (id: string, body?: IdentityUserUpdateRolesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersIdRolesPut', 'id', id)
            const localVarPath = `/api/identity/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdentityUserCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersPost: async (body?: IdentityUserCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersAssignableRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersAssignableRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersByEmailEmailGet(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersByEmailEmailGet(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersByUsernameUserNameGet(userName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersByUsernameUserNameGet(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersGet(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersIdPut(id: string, body?: IdentityUserUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersIdRolesGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersIdRolesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateRolesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersIdRolesPut(id: string, body?: IdentityUserUpdateRolesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersIdRolesPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdentityUserCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersPost(body?: IdentityUserCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersAssignableRolesGet(options?: any): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.apiIdentityUsersAssignableRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersByEmailEmailGet(email: string, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiIdentityUsersByEmailEmailGet(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersByUsernameUserNameGet(userName: string, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiIdentityUsersByUsernameUserNameGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<IdentityUserDtoPagedResultDto> {
            return localVarFp.apiIdentityUsersGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiIdentityUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdGet(id: string, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiIdentityUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdPut(id: string, body?: IdentityUserUpdateDto, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiIdentityUsersIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdRolesGet(id: string, options?: any): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.apiIdentityUsersIdRolesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateRolesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersIdRolesPut(id: string, body?: IdentityUserUpdateRolesDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiIdentityUsersIdRolesPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentityUserCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersPost(body?: IdentityUserCreateDto, options?: any): AxiosPromise<IdentityUserDto> {
            return localVarFp.apiIdentityUsersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersAssignableRolesGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersAssignableRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersByEmailEmailGet(email: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersByEmailEmailGet(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersByUsernameUserNameGet(userName: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersByUsernameUserNameGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersIdDelete(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersIdGet(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IdentityUserUpdateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersIdPut(id: string, body?: IdentityUserUpdateDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersIdRolesGet(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersIdRolesGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IdentityUserUpdateRolesDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersIdRolesPut(id: string, body?: IdentityUserUpdateRolesDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersIdRolesPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentityUserCreateDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiIdentityUsersPost(body?: IdentityUserCreateDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiIdentityUsersPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserLookupApi - axios parameter creator
 * @export
 */
export const UserLookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupByUsernameUserNameGet: async (userName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('apiIdentityUsersLookupByUsernameUserNameGet', 'userName', userName)
            const localVarPath = `/api/identity/users/lookup/by-username/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupCountGet: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/lookup/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIdentityUsersLookupIdGet', 'id', id)
            const localVarPath = `/api/identity/users/lookup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupSearchGet: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/lookup/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserLookupApi - functional programming interface
 * @export
 */
export const UserLookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserLookupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersLookupByUsernameUserNameGet(userName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersLookupByUsernameUserNameGet(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersLookupCountGet(filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersLookupCountGet(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersLookupIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersLookupIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIdentityUsersLookupSearchGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIdentityUsersLookupSearchGet(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserLookupApi - factory interface
 * @export
 */
export const UserLookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserLookupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupByUsernameUserNameGet(userName: string, options?: any): AxiosPromise<UserData> {
            return localVarFp.apiIdentityUsersLookupByUsernameUserNameGet(userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupCountGet(filter?: string, options?: any): AxiosPromise<number> {
            return localVarFp.apiIdentityUsersLookupCountGet(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupIdGet(id: string, options?: any): AxiosPromise<UserData> {
            return localVarFp.apiIdentityUsersLookupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIdentityUsersLookupSearchGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: any): AxiosPromise<UserDataListResultDto> {
            return localVarFp.apiIdentityUsersLookupSearchGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserLookupApi - object-oriented interface
 * @export
 * @class UserLookupApi
 * @extends {BaseAPI}
 */
export class UserLookupApi extends BaseAPI {
    /**
     * 
     * @param {string} userName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public apiIdentityUsersLookupByUsernameUserNameGet(userName: string, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).apiIdentityUsersLookupByUsernameUserNameGet(userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public apiIdentityUsersLookupCountGet(filter?: string, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).apiIdentityUsersLookupCountGet(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public apiIdentityUsersLookupIdGet(id: string, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).apiIdentityUsersLookupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [filter] 
     * @param {string} [sorting] 
     * @param {number} [skipCount] 
     * @param {number} [maxResultCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public apiIdentityUsersLookupSearchGet(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).apiIdentityUsersLookupSearchGet(filter, sorting, skipCount, maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserStorageApi - axios parameter creator
 * @export
 */
export const UserStorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppUserStorageGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/user-storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserStorageApi - functional programming interface
 * @export
 */
export const UserStorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserStorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppUserStorageGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppUserStorageGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserStorageApi - factory interface
 * @export
 */
export const UserStorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserStorageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppUserStorageGet(options?: any): AxiosPromise<UserStorageDto> {
            return localVarFp.apiAppUserStorageGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserStorageApi - object-oriented interface
 * @export
 * @class UserStorageApi
 * @extends {BaseAPI}
 */
export class UserStorageApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageApi
     */
    public apiAppUserStorageGet(options?: AxiosRequestConfig) {
        return UserStorageApiFp(this.configuration).apiAppUserStorageGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppVerificationSendCodePost: async (body?: SendVerificationCodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/verification/send-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppVerificationSendCodePost(body?: SendVerificationCodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppVerificationSendCodePost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppVerificationSendCodePost(body?: SendVerificationCodeDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppVerificationSendCodePost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * 
     * @param {SendVerificationCodeDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public apiAppVerificationSendCodePost(body?: SendVerificationCodeDto, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).apiAppVerificationSendCodePost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


