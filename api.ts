/* tslint:disable */
/* eslint-disable */
/**
 * Puupee API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.17.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AbpLoginResult
 */
export interface AbpLoginResult {
    /**
     * 
     * @type {LoginResultType}
     * @memberof AbpLoginResult
     */
    'result'?: LoginResultType;
    /**
     * 
     * @type {string}
     * @memberof AbpLoginResult
     */
    'description'?: string;
}


/**
 * 
 * @export
 * @interface AccountDeletionDto
 */
export interface AccountDeletionDto {
    /**
     * 
     * @type {string}
     * @memberof AccountDeletionDto
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ActionApiDescriptionModel
 */
export interface ActionApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'uniqueName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'httpMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'url'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ActionApiDescriptionModel
     */
    'supportedVersions'?: Array<string>;
    /**
     * 
     * @type {Array<MethodParameterApiDescriptionModel>}
     * @memberof ActionApiDescriptionModel
     */
    'parametersOnMethod'?: Array<MethodParameterApiDescriptionModel>;
    /**
     * 
     * @type {Array<ParameterApiDescriptionModel>}
     * @memberof ActionApiDescriptionModel
     */
    'parameters'?: Array<ParameterApiDescriptionModel>;
    /**
     * 
     * @type {ReturnValueApiDescriptionModel}
     * @memberof ActionApiDescriptionModel
     */
    'returnValue'?: ReturnValueApiDescriptionModel;
    /**
     * 
     * @type {boolean}
     * @memberof ActionApiDescriptionModel
     */
    'allowAnonymous'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionApiDescriptionModel
     */
    'implementFrom'?: string;
}
/**
 * 
 * @export
 * @interface ApiKeyCreateDto
 */
export interface ApiKeyCreateDto {
    /**
     * 
     * @type {string}
     * @memberof ApiKeyCreateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiKeyCreateDto
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyCreateDto
     */
    'expireAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiKeyDto
 */
export interface ApiKeyDto {
    /**
     * 
     * @type {string}
     * @memberof ApiKeyDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyDto
     */
    'key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiKeyDto
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyDto
     */
    'expireAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiKeyDtoPagedResultDto
 */
export interface ApiKeyDtoPagedResultDto {
    /**
     * 
     * @type {Array<ApiKeyDto>}
     * @memberof ApiKeyDtoPagedResultDto
     */
    'items'?: Array<ApiKeyDto>;
    /**
     * 
     * @type {number}
     * @memberof ApiKeyDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface ApiKeyUpdateDto
 */
export interface ApiKeyUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ApiKeyUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiKeyUpdateDto
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiKeyUpdateDto
     */
    'expireAt'?: string;
}
/**
 * 
 * @export
 * @interface AppDto
 */
export interface AppDto {
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {AppFramework}
     * @memberof AppDto
     */
    'framework'?: AppFramework;
    /**
     * 
     * @type {AppType}
     * @memberof AppDto
     */
    'appType'?: AppType;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'icon'?: string;
    /**
     * 产品首页
     * @type {string}
     * @memberof AppDto
     */
    'homePage'?: string;
    /**
     * 显示排序
     * @type {number}
     * @memberof AppDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {GitRepositoryType}
     * @memberof AppDto
     */
    'gitRepositoryType'?: GitRepositoryType;
    /**
     * 
     * @type {boolean}
     * @memberof AppDto
     */
    'isEnabled'?: boolean;
    /**
     * 是否已经发布, 决定了是否给终端用户看见, 主要有一些 APP 自己使用
     * @type {boolean}
     * @memberof AppDto
     */
    'isPublished'?: boolean;
    /**
     * Webhook Url 各种事件回调地址
     * @type {string}
     * @memberof AppDto
     */
    'webhookUrl'?: string;
    /**
     * 业务域名
     * @type {string}
     * @memberof AppDto
     */
    'businessDomain'?: string;
    /**
     * 业务地址
     * @type {string}
     * @memberof AppDto
     */
    'businessUrl'?: string;
    /**
     * 可以订阅的平台 Platform 枚举, 并用\",\"分割
     * @type {string}
     * @memberof AppDto
     */
    'subscriptionPlatforms'?: string;
    /**
     * 暂时免费的平台, 付费功能免费用的平台, 用\",\"分割
     * @type {string}
     * @memberof AppDto
     */
    'freePlatforms'?: string;
    /**
     * 声明格式
     * @type {string}
     * @memberof AppDto
     */
    'specJsonSchema'?: string;
    /**
     * 默认存储空间大小
     * @type {number}
     * @memberof AppDto
     */
    'defaultStorageSize'?: number;
    /**
     * 默认单文件最大大小
     * @type {number}
     * @memberof AppDto
     */
    'defaultSingleFileMaxSize'?: number;
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof AppDto
     */
    'latestReleases'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {IdentityUserDto}
     * @memberof AppDto
     */
    'creator'?: IdentityUserDto;
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof AppDto
     */
    'features'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof AppDto
     */
    'sdks'?: Array<AppSdkDto>;
}


/**
 * 
 * @export
 * @interface AppDtoPagedResultDto
 */
export interface AppDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppDto>}
     * @memberof AppDtoPagedResultDto
     */
    'items'?: Array<AppDto>;
    /**
     * 
     * @type {number}
     * @memberof AppDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppFeatureDto
 */
export interface AppFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppFeatureDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppFeatureDto
     */
    'screenshotKeys'?: string;
}
/**
 * 
 * @export
 * @interface AppFeatureDtoPagedResultDto
 */
export interface AppFeatureDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof AppFeatureDtoPagedResultDto
     */
    'items'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {number}
     * @memberof AppFeatureDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 技术框架
 * @export
 * @enum {string}
 */

export const AppFramework = {
    Flutter: 'Flutter',
    ReactNative: 'ReactNative',
    React: 'React',
    NativeIos: 'NativeIOS',
    NativeAndroid: 'NativeAndroid',
    NativeWindows: 'NativeWindows',
    NativeMacOs: 'NativeMacOS',
    Ionic: 'Ionic',
    AspNetCore: 'AspNetCore',
    Other: 'Other',
    Golang: 'Golang'
} as const;

export type AppFramework = typeof AppFramework[keyof typeof AppFramework];


/**
 * 
 * @export
 * @enum {string}
 */

export const AppPlatform = {
    None: 'None',
    Unknown: 'Unknown',
    Android: 'Android',
    Ios: 'IOS',
    MacOs: 'MacOS',
    Windows: 'Windows',
    Linux: 'Linux',
    Web: 'Web',
    Service: 'Service',
    Other: 'Other'
} as const;

export type AppPlatform = typeof AppPlatform[keyof typeof AppPlatform];


/**
 * 
 * @export
 * @enum {string}
 */

export const AppPriceNaming = {
    Free: 'Free',
    Premium: 'Premium',
    Pro: 'Pro',
    Enterprise: 'Enterprise'
} as const;

export type AppPriceNaming = typeof AppPriceNaming[keyof typeof AppPriceNaming];


/**
 * 
 * @export
 * @interface AppPricingDto
 */
export interface AppPricingDto {
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {AppPriceNaming}
     * @memberof AppPricingDto
     */
    'naming'?: AppPriceNaming;
    /**
     * 商店订阅产品 ID
     * @type {string}
     * @memberof AppPricingDto
     */
    'monthProductId'?: string;
    /**
     * 商店订阅产品 ID
     * @type {string}
     * @memberof AppPricingDto
     */
    'yearProductId'?: string;
    /**
     * 简单描述  适用于个人网站和任何想用基本的聊天方式与游客交流的人。  适用于希望改善客户关系的早期创业公司。  为需要全功能解决方案与客户沟通的公司而设。
     * @type {string}
     * @memberof AppPricingDto
     */
    'description'?: string;
    /**
     * APPID
     * @type {string}
     * @memberof AppPricingDto
     */
    'appId'?: string;
    /**
     * 价格
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthPrice'?: number;
    /**
     * 折扣
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthDiscount'?: number;
    /**
     * 折扣后价格 DiscountPrice = Price * Discount
     * @type {number}
     * @memberof AppPricingDto
     */
    'monthDiscountPrice'?: number;
    /**
     * 折扣开始时间
     * @type {string}
     * @memberof AppPricingDto
     */
    'monthDiscountStartAt'?: string;
    /**
     * 折扣结束时间
     * @type {string}
     * @memberof AppPricingDto
     */
    'monthDiscountEndAt'?: string;
    /**
     * 价格
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearPrice'?: number;
    /**
     * 折扣
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearDiscount'?: number;
    /**
     * 折扣后价格 DiscountPrice = Price * Discount
     * @type {number}
     * @memberof AppPricingDto
     */
    'yearDiscountPrice'?: number;
    /**
     * 折扣开始时间
     * @type {string}
     * @memberof AppPricingDto
     */
    'yearDiscountStartAt'?: string;
    /**
     * 折扣结束时间
     * @type {string}
     * @memberof AppPricingDto
     */
    'yearDiscountEndAt'?: string;
    /**
     * 排序
     * @type {number}
     * @memberof AppPricingDto
     */
    'sortIndex'?: number;
    /**
     * 收费点
     * @type {Array<AppPricingItemValueDto>}
     * @memberof AppPricingDto
     */
    'items'?: Array<AppPricingItemValueDto>;
}


/**
 * 
 * @export
 * @interface AppPricingDtoPagedResultDto
 */
export interface AppPricingDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppPricingDto>}
     * @memberof AppPricingDtoPagedResultDto
     */
    'items'?: Array<AppPricingDto>;
    /**
     * 
     * @type {number}
     * @memberof AppPricingDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppPricingItemDto
 */
export interface AppPricingItemDto {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'deletionTime'?: string;
    /**
     * 键值, 例如: Seat, SingleFileMaxSize, UserStorageSize, MaxPuupeeCount, 见 AppPricingItemKeys.cs
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'key'?: string;
    /**
     * 名称: 坐席
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'name'?: string;
    /**
     * 描述, 使用 Markdown 格式, 允许包含图片
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'description'?: string;
    /**
     * 链接地址
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'linkUrl'?: string;
    /**
     * 显示模板: 包括{0}个坐席
     * @type {string}
     * @memberof AppPricingItemDto
     */
    'display'?: string;
    /**
     * 是否可用
     * @type {boolean}
     * @memberof AppPricingItemDto
     */
    'isAvailable'?: boolean;
    /**
     * 排序
     * @type {number}
     * @memberof AppPricingItemDto
     */
    'sortIndex'?: number;
}
/**
 * 
 * @export
 * @interface AppPricingItemValueDto
 */
export interface AppPricingItemValueDto {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemValueDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'deletionTime'?: string;
    /**
     * 是否可用
     * @type {boolean}
     * @memberof AppPricingItemValueDto
     */
    'isAvailable'?: boolean;
    /**
     * 是否有值
     * @type {boolean}
     * @memberof AppPricingItemValueDto
     */
    'hasValue'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AppPricingItemValueDto
     */
    'intValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'stringValue'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppPricingItemValueDto
     */
    'boolValue'?: boolean;
    /**
     * 数字值类型, FileSize: 文件大小, Count: 数目
     * @type {string}
     * @memberof AppPricingItemValueDto
     */
    'intValueType'?: string;
}
/**
 * 
 * @export
 * @interface AppReleaseDto
 */
export interface AppReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'version'?: string;
    /**
     * 版本名称
     * @type {string}
     * @memberof AppReleaseDto
     */
    'versionName'?: string;
    /**
     * 构建编号
     * @type {number}
     * @memberof AppReleaseDto
     */
    'versionCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'notes'?: string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof AppReleaseDto
     */
    'platform'?: AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppReleaseDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'downloadUrl'?: string;
    /**
     * 
     * @type {ArtifactType}
     * @memberof AppReleaseDto
     */
    'artifactType'?: ArtifactType;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isForceUpdate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppReleaseDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppReleaseDto
     */
    'environment'?: string;
}


/**
 * 
 * @export
 * @interface AppReleaseDtoPagedResultDto
 */
export interface AppReleaseDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof AppReleaseDtoPagedResultDto
     */
    'items'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {number}
     * @memberof AppReleaseDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppRunDto
 */
export interface AppRunDto {
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppRunDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunDto
     */
    'appName'?: string;
    /**
     * 
     * @type {object}
     * @memberof AppRunDto
     */
    'args'?: object;
    /**
     * 
     * @type {object}
     * @memberof AppRunDto
     */
    'envs'?: object;
}
/**
 * 
 * @export
 * @interface AppRunRecordDto
 */
export interface AppRunRecordDto {
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppRunRecordDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'appName'?: string;
    /**
     * 
     * @type {object}
     * @memberof AppRunRecordDto
     */
    'args'?: object;
    /**
     * 
     * @type {object}
     * @memberof AppRunRecordDto
     */
    'envs'?: object;
    /**
     * 
     * @type {AppRunStatus}
     * @memberof AppRunRecordDto
     */
    'status'?: AppRunStatus;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'finishAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'output'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'workerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordDto
     */
    'workerName'?: string;
}


/**
 * 
 * @export
 * @interface AppRunRecordUpdateDto
 */
export interface AppRunRecordUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppRunRecordUpdateDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {AppRunStatus}
     * @memberof AppRunRecordUpdateDto
     */
    'status': AppRunStatus;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'result'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'finishAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'output'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'workerId': string;
    /**
     * 
     * @type {string}
     * @memberof AppRunRecordUpdateDto
     */
    'workerName': string;
}


/**
 * Represents the status of an app run.
 * @export
 * @enum {string}
 */

export const AppRunStatus = {
    Pending: 'Pending',
    Distributed: 'Distributed',
    Waiting: 'Waiting',
    Running: 'Running',
    Canceled: 'Canceled',
    Failed: 'Failed',
    Succeed: 'Succeed'
} as const;

export type AppRunStatus = typeof AppRunStatus[keyof typeof AppRunStatus];


/**
 * 
 * @export
 * @interface AppSdkDto
 */
export interface AppSdkDto {
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppSdkDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'privacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'privacyUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppSdkDto
     */
    'homePage'?: string;
}
/**
 * 
 * @export
 * @interface AppSdkDtoPagedResultDto
 */
export interface AppSdkDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof AppSdkDtoPagedResultDto
     */
    'items'?: Array<AppSdkDto>;
    /**
     * 
     * @type {number}
     * @memberof AppSdkDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 应用类型
 * @export
 * @enum {string}
 */

export const AppType = {
    Client: 'Client',
    Service: 'Service',
    Web: 'Web',
    MessageAccount: 'MessageAccount',
    WechatMiniProgram: 'WechatMiniProgram',
    Extension: 'Extension',
    Runable: 'Runable',
    Worker: 'Worker'
} as const;

export type AppType = typeof AppType[keyof typeof AppType];


/**
 * 
 * @export
 * @interface AppUserScoreDto
 */
export interface AppUserScoreDto {
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppUserScoreDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AppUserScoreDto
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppUserScoreDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface AppWithUserDto
 */
export interface AppWithUserDto {
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppWithUserDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {AppFramework}
     * @memberof AppWithUserDto
     */
    'framework'?: AppFramework;
    /**
     * 
     * @type {AppType}
     * @memberof AppWithUserDto
     */
    'appType'?: AppType;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'icon'?: string;
    /**
     * 产品首页
     * @type {string}
     * @memberof AppWithUserDto
     */
    'homePage'?: string;
    /**
     * 显示排序
     * @type {number}
     * @memberof AppWithUserDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppWithUserDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {GitRepositoryType}
     * @memberof AppWithUserDto
     */
    'gitRepositoryType'?: GitRepositoryType;
    /**
     * 
     * @type {boolean}
     * @memberof AppWithUserDto
     */
    'isEnabled'?: boolean;
    /**
     * 是否已经发布, 决定了是否给终端用户看见, 主要有一些 APP 自己使用
     * @type {boolean}
     * @memberof AppWithUserDto
     */
    'isPublished'?: boolean;
    /**
     * Webhook Url 各种事件回调地址
     * @type {string}
     * @memberof AppWithUserDto
     */
    'webhookUrl'?: string;
    /**
     * 业务域名
     * @type {string}
     * @memberof AppWithUserDto
     */
    'businessDomain'?: string;
    /**
     * 业务地址
     * @type {string}
     * @memberof AppWithUserDto
     */
    'businessUrl'?: string;
    /**
     * 可以订阅的平台 Platform 枚举, 并用\",\"分割
     * @type {string}
     * @memberof AppWithUserDto
     */
    'subscriptionPlatforms'?: string;
    /**
     * 暂时免费的平台, 付费功能免费用的平台, 用\",\"分割
     * @type {string}
     * @memberof AppWithUserDto
     */
    'freePlatforms'?: string;
    /**
     * 声明格式
     * @type {string}
     * @memberof AppWithUserDto
     */
    'specJsonSchema'?: string;
    /**
     * 默认存储空间大小
     * @type {number}
     * @memberof AppWithUserDto
     */
    'defaultStorageSize'?: number;
    /**
     * 默认单文件最大大小
     * @type {number}
     * @memberof AppWithUserDto
     */
    'defaultSingleFileMaxSize'?: number;
    /**
     * 
     * @type {Array<AppReleaseDto>}
     * @memberof AppWithUserDto
     */
    'latestReleases'?: Array<AppReleaseDto>;
    /**
     * 
     * @type {IdentityUserDto}
     * @memberof AppWithUserDto
     */
    'creator'?: IdentityUserDto;
    /**
     * 
     * @type {Array<AppFeatureDto>}
     * @memberof AppWithUserDto
     */
    'features'?: Array<AppFeatureDto>;
    /**
     * 
     * @type {Array<AppSdkDto>}
     * @memberof AppWithUserDto
     */
    'sdks'?: Array<AppSdkDto>;
    /**
     * 是否已经订阅
     * @type {boolean}
     * @memberof AppWithUserDto
     */
    'subscribed'?: boolean;
}


/**
 * 
 * @export
 * @interface AppWithUserDtoPagedResultDto
 */
export interface AppWithUserDtoPagedResultDto {
    /**
     * 
     * @type {Array<AppWithUserDto>}
     * @memberof AppWithUserDtoPagedResultDto
     */
    'items'?: Array<AppWithUserDto>;
    /**
     * 
     * @type {number}
     * @memberof AppWithUserDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface AppleNotificaionDto
 */
export interface AppleNotificaionDto {
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppleNotificaionDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppleNotificaionDto
     */
    'signedPayload'?: string;
}
/**
 * 
 * @export
 * @interface AppleVerifyReceiptResult
 */
export interface AppleVerifyReceiptResult {
    /**
     * 
     * @type {string}
     * @memberof AppleVerifyReceiptResult
     */
    'environment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppleVerifyReceiptResult
     */
    'is_retryable'?: boolean;
    /**
     * 订阅订单状态
     * @type {number}
     * @memberof AppleVerifyReceiptResult
     */
    'status'?: number;
    /**
     * 
     * @type {Array<LatestReceiptInfo>}
     * @memberof AppleVerifyReceiptResult
     */
    'latest_receipt_info'?: Array<LatestReceiptInfo>;
    /**
     * 
     * @type {string}
     * @memberof AppleVerifyReceiptResult
     */
    'latest_receipt'?: string;
    /**
     * 
     * @type {Array<PendingRenewalInfo>}
     * @memberof AppleVerifyReceiptResult
     */
    'pending_renewal_info'?: Array<PendingRenewalInfo>;
    /**
     * 
     * @type {Receipt}
     * @memberof AppleVerifyReceiptResult
     */
    'receipt'?: Receipt;
}
/**
 * 
 * @export
 * @interface ApplicationApiDescriptionModel
 */
export interface ApplicationApiDescriptionModel {
    /**
     * 
     * @type {{ [key: string]: ModuleApiDescriptionModel | undefined; }}
     * @memberof ApplicationApiDescriptionModel
     */
    'modules'?: { [key: string]: ModuleApiDescriptionModel | undefined; };
    /**
     * 
     * @type {{ [key: string]: TypeApiDescriptionModel | undefined; }}
     * @memberof ApplicationApiDescriptionModel
     */
    'types'?: { [key: string]: TypeApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationAuthConfigurationDto
 */
export interface ApplicationAuthConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: boolean | undefined; }}
     * @memberof ApplicationAuthConfigurationDto
     */
    'grantedPolicies'?: { [key: string]: boolean | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationConfigurationDto
 */
export interface ApplicationConfigurationDto {
    /**
     * 
     * @type {ApplicationLocalizationConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'localization'?: ApplicationLocalizationConfigurationDto;
    /**
     * 
     * @type {ApplicationAuthConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'auth'?: ApplicationAuthConfigurationDto;
    /**
     * 
     * @type {ApplicationSettingConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'setting'?: ApplicationSettingConfigurationDto;
    /**
     * 
     * @type {CurrentUserDto}
     * @memberof ApplicationConfigurationDto
     */
    'currentUser'?: CurrentUserDto;
    /**
     * 
     * @type {ApplicationFeatureConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'features'?: ApplicationFeatureConfigurationDto;
    /**
     * 
     * @type {ApplicationGlobalFeatureConfigurationDto}
     * @memberof ApplicationConfigurationDto
     */
    'globalFeatures'?: ApplicationGlobalFeatureConfigurationDto;
    /**
     * 
     * @type {MultiTenancyInfoDto}
     * @memberof ApplicationConfigurationDto
     */
    'multiTenancy'?: MultiTenancyInfoDto;
    /**
     * 
     * @type {CurrentTenantDto}
     * @memberof ApplicationConfigurationDto
     */
    'currentTenant'?: CurrentTenantDto;
    /**
     * 
     * @type {TimingDto}
     * @memberof ApplicationConfigurationDto
     */
    'timing'?: TimingDto;
    /**
     * 
     * @type {ClockDto}
     * @memberof ApplicationConfigurationDto
     */
    'clock'?: ClockDto;
    /**
     * 
     * @type {ObjectExtensionsDto}
     * @memberof ApplicationConfigurationDto
     */
    'objectExtensions'?: ObjectExtensionsDto;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ApplicationConfigurationDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationFeatureConfigurationDto
 */
export interface ApplicationFeatureConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationFeatureConfigurationDto
     */
    'values'?: { [key: string]: string | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationGlobalFeatureConfigurationDto
 */
export interface ApplicationGlobalFeatureConfigurationDto {
    /**
     * 
     * @type {Set<string>}
     * @memberof ApplicationGlobalFeatureConfigurationDto
     */
    'enabledFeatures'?: Set<string>;
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationConfigurationDto
 */
export interface ApplicationLocalizationConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string | undefined; } | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'values'?: { [key: string]: { [key: string]: string | undefined; } | undefined; };
    /**
     * 
     * @type {{ [key: string]: ApplicationLocalizationResourceDto | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'resources'?: { [key: string]: ApplicationLocalizationResourceDto | undefined; };
    /**
     * 
     * @type {Array<LanguageInfo>}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languages'?: Array<LanguageInfo>;
    /**
     * 
     * @type {CurrentCultureDto}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'currentCulture'?: CurrentCultureDto;
    /**
     * 
     * @type {string}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'defaultResourceName'?: string;
    /**
     * 
     * @type {{ [key: string]: Array<NameValue> | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languagesMap'?: { [key: string]: Array<NameValue> | undefined; };
    /**
     * 
     * @type {{ [key: string]: Array<NameValue> | undefined; }}
     * @memberof ApplicationLocalizationConfigurationDto
     */
    'languageFilesMap'?: { [key: string]: Array<NameValue> | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationDto
 */
export interface ApplicationLocalizationDto {
    /**
     * 
     * @type {{ [key: string]: ApplicationLocalizationResourceDto | undefined; }}
     * @memberof ApplicationLocalizationDto
     */
    'resources'?: { [key: string]: ApplicationLocalizationResourceDto | undefined; };
}
/**
 * 
 * @export
 * @interface ApplicationLocalizationResourceDto
 */
export interface ApplicationLocalizationResourceDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationLocalizationResourceDto
     */
    'texts'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationLocalizationResourceDto
     */
    'baseResources'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApplicationSettingConfigurationDto
 */
export interface ApplicationSettingConfigurationDto {
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ApplicationSettingConfigurationDto
     */
    'values'?: { [key: string]: string | undefined; };
}
/**
 * Represents the type of an artifact.
 * @export
 * @enum {string}
 */

export const ArtifactType = {
    Apk: 'Apk',
    Ipa: 'Ipa',
    Exe: 'Exe',
    Msi: 'Msi',
    Dmg: 'Dmg',
    Pkg: 'Pkg',
    AppImage: 'AppImage',
    Web: 'Web',
    Service: 'Service',
    AppStore: 'AppStore',
    GooglePlay: 'GooglePlay',
    MacAppStore: 'MacAppStore',
    MicrosoftStore: 'MicrosoftStore',
    Other: 'Other'
} as const;

export type ArtifactType = typeof ArtifactType[keyof typeof ArtifactType];


/**
 * 
 * @export
 * @interface AvatarDto
 */
export interface AvatarDto {
    /**
     * 
     * @type {string}
     * @memberof AvatarDto
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BarkNotificationLevel = {
    Active: 'Active',
    TimeSensitive: 'TimeSensitive',
    Passive: 'Passive'
} as const;

export type BarkNotificationLevel = typeof BarkNotificationLevel[keyof typeof BarkNotificationLevel];


/**
 * 
 * @export
 * @interface BindDeviceDto
 */
export interface BindDeviceDto {
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'tpnsToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BindDeviceDto
     */
    'isPhysicalDevice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'name'?: string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof BindDeviceDto
     */
    'platform'?: AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof BindDeviceDto
     */
    'systemVersion'?: string;
}


/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordInput
 */
export interface ChangePasswordInput {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordInput
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface CheckSyncAuthResultDto
 */
export interface CheckSyncAuthResultDto {
    /**
     * 
     * @type {boolean}
     * @memberof CheckSyncAuthResultDto
     */
    'isAuthed'?: boolean;
}
/**
 * 
 * @export
 * @interface ClockDto
 */
export interface ClockDto {
    /**
     * 
     * @type {string}
     * @memberof ClockDto
     */
    'kind'?: string;
}
/**
 * 
 * @export
 * @interface ControllerApiDescriptionModel
 */
export interface ControllerApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'controllerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'controllerGroupName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ControllerApiDescriptionModel
     */
    'isRemoteService'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ControllerApiDescriptionModel
     */
    'isIntegrationService'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'apiVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {Array<ControllerInterfaceApiDescriptionModel>}
     * @memberof ControllerApiDescriptionModel
     */
    'interfaces'?: Array<ControllerInterfaceApiDescriptionModel>;
    /**
     * 
     * @type {{ [key: string]: ActionApiDescriptionModel | undefined; }}
     * @memberof ControllerApiDescriptionModel
     */
    'actions'?: { [key: string]: ActionApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ControllerInterfaceApiDescriptionModel
 */
export interface ControllerInterfaceApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<InterfaceMethodApiDescriptionModel>}
     * @memberof ControllerInterfaceApiDescriptionModel
     */
    'methods'?: Array<InterfaceMethodApiDescriptionModel>;
}
/**
 * 
 * @export
 * @interface CreateAvatarDto
 */
export interface CreateAvatarDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAvatarDto
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @interface CreateMessageTemplateReleaseDto
 */
export interface CreateMessageTemplateReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMessageTemplateReleaseDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageTemplateReleaseDto
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface CreateOpenIddictApplicationDto
 */
export interface CreateOpenIddictApplicationDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'displayNames'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'permissions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'postLogoutRedirectUris'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'properties'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'redirectUris'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'clientUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOpenIddictApplicationDto
     */
    'logoUri'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'grantTypes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOpenIddictApplicationDto
     */
    'scopes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateOrGetSubscriptionOrderDto
 */
export interface CreateOrGetSubscriptionOrderDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'pricingId'?: string;
    /**
     * 
     * @type {SubscriptionOrderType}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'type'?: SubscriptionOrderType;
    /**
     * 
     * @type {string}
     * @memberof CreateOrGetSubscriptionOrderDto
     */
    'productId'?: string;
}


/**
 * 
 * @export
 * @interface CreateOrUpdateAppDto
 */
export interface CreateOrUpdateAppDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {AppFramework}
     * @memberof CreateOrUpdateAppDto
     */
    'framework'?: AppFramework;
    /**
     * 
     * @type {AppType}
     * @memberof CreateOrUpdateAppDto
     */
    'appType'?: AppType;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'icon'?: string;
    /**
     * 产品首页
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'homePage'?: string;
    /**
     * 显示排序
     * @type {number}
     * @memberof CreateOrUpdateAppDto
     */
    'sortIndex'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'gitRepository'?: string;
    /**
     * 
     * @type {GitRepositoryType}
     * @memberof CreateOrUpdateAppDto
     */
    'gitRepositoryType'?: GitRepositoryType;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppDto
     */
    'isEnabled'?: boolean;
    /**
     * Webhook Url 各种事件回调地址
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'webhookUrl'?: string;
    /**
     * 业务域名
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'businessDomain'?: string;
    /**
     * 业务地址
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'businessUrl'?: string;
    /**
     * 可以订阅的平台 Platform 枚举, 并用\",\"分割
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'subscriptionPlatforms'?: string;
    /**
     * 暂时免费的平台, 付费功能免费用的平台, 用\",\"分割
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'freePlatforms'?: string;
    /**
     * 声明格式
     * @type {string}
     * @memberof CreateOrUpdateAppDto
     */
    'specJsonSchema'?: string;
    /**
     * 默认存储空间大小
     * @type {number}
     * @memberof CreateOrUpdateAppDto
     */
    'defaultStorageSize'?: number;
    /**
     * 默认单文件最大大小
     * @type {number}
     * @memberof CreateOrUpdateAppDto
     */
    'defaultSingleFileMaxSize'?: number;
    /**
     * 是否已经发布, 决定了是否给终端用户看见, 主要有一些 APP 自己使用
     * @type {boolean}
     * @memberof CreateOrUpdateAppDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {CreateOpenIddictApplicationDto}
     * @memberof CreateOrUpdateAppDto
     */
    'openClient'?: CreateOpenIddictApplicationDto;
}


/**
 * 
 * @export
 * @interface CreateOrUpdateAppFeatureDto
 */
export interface CreateOrUpdateAppFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'details'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppFeatureDto
     */
    'screenshotKeys'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppPricingDto
 */
export interface CreateOrUpdateAppPricingDto {
    /**
     * 
     * @type {AppPriceNaming}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'naming'?: AppPriceNaming;
    /**
     * 商店订阅产品 ID
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthProductId'?: string;
    /**
     * 商店订阅产品 ID
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearProductId'?: string;
    /**
     * 简单描述  适用于个人网站和任何想用基本的聊天方式与游客交流的人。  适用于希望改善客户关系的早期创业公司。  为需要全功能解决方案与客户沟通的公司而设。
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'description'?: string;
    /**
     * APPID
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'appId'?: string;
    /**
     * 价格
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthPrice'?: number;
    /**
     * 折扣
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscount'?: number;
    /**
     * 折扣后价格 DiscountPrice = Price * Discount
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountPrice'?: number;
    /**
     * 折扣开始时间
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountStartAt'?: string;
    /**
     * 折扣结束时间
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'monthDiscountEndAt'?: string;
    /**
     * 价格
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearPrice'?: number;
    /**
     * 折扣
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscount'?: number;
    /**
     * 折扣后价格 DiscountPrice = Price * Discount
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountPrice'?: number;
    /**
     * 折扣开始时间
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountStartAt'?: string;
    /**
     * 折扣结束时间
     * @type {string}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'yearDiscountEndAt'?: string;
    /**
     * 排序
     * @type {number}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'sortIndex'?: number;
    /**
     * 收费点
     * @type {Array<AppPricingItemValueDto>}
     * @memberof CreateOrUpdateAppPricingDto
     */
    'items'?: Array<AppPricingItemValueDto>;
}


/**
 * 
 * @export
 * @interface CreateOrUpdateAppPricingItemDto
 */
export interface CreateOrUpdateAppPricingItemDto {
    /**
     * 名称: 坐席
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'name'?: string;
    /**
     * 描述, 使用 Markdown 格式, 允许包含图片
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'description'?: string;
    /**
     * 链接地址
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'linkUrl'?: string;
    /**
     * 显示模板: 包括{0}个坐席
     * @type {string}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'display'?: string;
    /**
     * 排序
     * @type {number}
     * @memberof CreateOrUpdateAppPricingItemDto
     */
    'sortIndex'?: number;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppReleaseDto
 */
export interface CreateOrUpdateAppReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'version'?: string;
    /**
     * 版本名称
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'versionName'?: string;
    /**
     * 构建编号
     * @type {number}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'versionCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'notes'?: string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'platform'?: AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {ArtifactType}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'artifactType'?: ArtifactType;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'isForceUpdate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'appId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'isEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'channel'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppReleaseDto
     */
    'environment'?: string;
}


/**
 * 
 * @export
 * @interface CreateOrUpdateAppSdkDto
 */
export interface CreateOrUpdateAppSdkDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'privacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'privacyUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppSdkDto
     */
    'homePage'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateAppUserScoreDto
 */
export interface CreateOrUpdateAppUserScoreDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'appId'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateAppUserScoreDto
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrUpdateMessageTemplateDto
 */
export interface CreateOrUpdateMessageTemplateDto {
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateMessageTemplateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrUpdateMessageTemplateDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreatePushNotificationDto
 */
export interface CreatePushNotificationDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'puupeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePushNotificationDto
     */
    'app'?: string;
}
/**
 * 
 * @export
 * @interface CreateUpdateMessageSourceDto
 */
export interface CreateUpdateMessageSourceDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdateMessageSourceDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceDto
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {Array<CreateUpdateMessageSourceRouteSubDto>}
     * @memberof CreateUpdateMessageSourceDto
     */
    'routes'?: Array<CreateUpdateMessageSourceRouteSubDto>;
}
/**
 * 
 * @export
 * @interface CreateUpdateMessageSourceRouteDto
 */
export interface CreateUpdateMessageSourceRouteDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'sourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'extra'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'anticrawler'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'radar'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'rssbud'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteDto
     */
    'iconUrl'?: string;
}
/**
 * 
 * @export
 * @interface CreateUpdateMessageSourceRouteSubDto
 */
export interface CreateUpdateMessageSourceRouteSubDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteSubDto
     */
    'routeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateMessageSourceRouteSubDto
     */
    'path'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateUpdateMessageSourceRouteSubDto
     */
    'values'?: object;
}
/**
 * 
 * @export
 * @interface CurrentCultureDto
 */
export interface CurrentCultureDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'englishName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'threeLetterIsoLanguageName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'twoLetterIsoLanguageName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentCultureDto
     */
    'isRightToLeft'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'cultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentCultureDto
     */
    'nativeName'?: string;
    /**
     * 
     * @type {DateTimeFormatDto}
     * @memberof CurrentCultureDto
     */
    'dateTimeFormat'?: DateTimeFormatDto;
}
/**
 * 
 * @export
 * @interface CurrentTenantDto
 */
export interface CurrentTenantDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentTenantDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentTenantDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentTenantDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface CurrentUserDto
 */
export interface CurrentUserDto {
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'isAuthenticated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorTenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'impersonatorTenantName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'surName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentUserDto
     */
    'phoneNumberVerified'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentUserDto
     */
    'roles'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DateTimeFormatDto
 */
export interface DateTimeFormatDto {
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'calendarAlgorithmType'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'dateTimeFormatLong'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'shortDatePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'fullDateTimePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'dateSeparator'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'shortTimePattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof DateTimeFormatDto
     */
    'longTimePattern'?: string;
}
/**
 * 
 * @export
 * @interface DeviceDto
 */
export interface DeviceDto {
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'tpnsToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isPhysicalDevice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'name'?: string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof DeviceDto
     */
    'platform'?: AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'systemVersion'?: string;
}


/**
 * 
 * @export
 * @interface DeviceDtoPagedResultDto
 */
export interface DeviceDtoPagedResultDto {
    /**
     * 
     * @type {Array<DeviceDto>}
     * @memberof DeviceDtoPagedResultDto
     */
    'items'?: Array<DeviceDto>;
    /**
     * 
     * @type {number}
     * @memberof DeviceDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DeviceStatus = {
    None: 'None',
    Unknow: 'Unknow',
    Online: 'Online',
    Offline: 'Offline'
} as const;

export type DeviceStatus = typeof DeviceStatus[keyof typeof DeviceStatus];


/**
 * 
 * @export
 * @interface EmailSettingsDto
 */
export interface EmailSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpHost'?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailSettingsDto
     */
    'smtpPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'smtpDomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSettingsDto
     */
    'smtpEnableSsl'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSettingsDto
     */
    'smtpUseDefaultCredentials'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'defaultFromAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSettingsDto
     */
    'defaultFromDisplayName'?: string;
}
/**
 * 
 * @export
 * @interface EntityExtensionDto
 */
export interface EntityExtensionDto {
    /**
     * 
     * @type {{ [key: string]: ExtensionPropertyDto | undefined; }}
     * @memberof EntityExtensionDto
     */
    'properties'?: { [key: string]: ExtensionPropertyDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof EntityExtensionDto
     */
    'configuration'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ExtensionEnumDto
 */
export interface ExtensionEnumDto {
    /**
     * 
     * @type {Array<ExtensionEnumFieldDto>}
     * @memberof ExtensionEnumDto
     */
    'fields'?: Array<ExtensionEnumFieldDto>;
    /**
     * 
     * @type {string}
     * @memberof ExtensionEnumDto
     */
    'localizationResource'?: string;
}
/**
 * 
 * @export
 * @interface ExtensionEnumFieldDto
 */
export interface ExtensionEnumFieldDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionEnumFieldDto
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof ExtensionEnumFieldDto
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiCreateDto
 */
export interface ExtensionPropertyApiCreateDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiCreateDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiDto
 */
export interface ExtensionPropertyApiDto {
    /**
     * 
     * @type {ExtensionPropertyApiGetDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onGet'?: ExtensionPropertyApiGetDto;
    /**
     * 
     * @type {ExtensionPropertyApiCreateDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onCreate'?: ExtensionPropertyApiCreateDto;
    /**
     * 
     * @type {ExtensionPropertyApiUpdateDto}
     * @memberof ExtensionPropertyApiDto
     */
    'onUpdate'?: ExtensionPropertyApiUpdateDto;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiGetDto
 */
export interface ExtensionPropertyApiGetDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiGetDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyApiUpdateDto
 */
export interface ExtensionPropertyApiUpdateDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyApiUpdateDto
     */
    'isAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyAttributeDto
 */
export interface ExtensionPropertyAttributeDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyAttributeDto
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ExtensionPropertyAttributeDto
     */
    'config'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface ExtensionPropertyDto
 */
export interface ExtensionPropertyDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyDto
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {LocalizableStringDto}
     * @memberof ExtensionPropertyDto
     */
    'displayName'?: LocalizableStringDto;
    /**
     * 
     * @type {ExtensionPropertyApiDto}
     * @memberof ExtensionPropertyDto
     */
    'api'?: ExtensionPropertyApiDto;
    /**
     * 
     * @type {ExtensionPropertyUiDto}
     * @memberof ExtensionPropertyDto
     */
    'ui'?: ExtensionPropertyUiDto;
    /**
     * 
     * @type {Array<ExtensionPropertyAttributeDto>}
     * @memberof ExtensionPropertyDto
     */
    'attributes'?: Array<ExtensionPropertyAttributeDto>;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ExtensionPropertyDto
     */
    'configuration'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {object}
     * @memberof ExtensionPropertyDto
     */
    'defaultValue'?: object;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiDto
 */
export interface ExtensionPropertyUiDto {
    /**
     * 
     * @type {ExtensionPropertyUiTableDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onTable'?: ExtensionPropertyUiTableDto;
    /**
     * 
     * @type {ExtensionPropertyUiFormDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onCreateForm'?: ExtensionPropertyUiFormDto;
    /**
     * 
     * @type {ExtensionPropertyUiFormDto}
     * @memberof ExtensionPropertyUiDto
     */
    'onEditForm'?: ExtensionPropertyUiFormDto;
    /**
     * 
     * @type {ExtensionPropertyUiLookupDto}
     * @memberof ExtensionPropertyUiDto
     */
    'lookup'?: ExtensionPropertyUiLookupDto;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiFormDto
 */
export interface ExtensionPropertyUiFormDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyUiFormDto
     */
    'isVisible'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiLookupDto
 */
export interface ExtensionPropertyUiLookupDto {
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'resultListPropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'displayPropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'valuePropertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensionPropertyUiLookupDto
     */
    'filterParamName'?: string;
}
/**
 * 
 * @export
 * @interface ExtensionPropertyUiTableDto
 */
export interface ExtensionPropertyUiTableDto {
    /**
     * 
     * @type {boolean}
     * @memberof ExtensionPropertyUiTableDto
     */
    'isVisible'?: boolean;
}
/**
 * 
 * @export
 * @interface FeatureDto
 */
export interface FeatureDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'value'?: string;
    /**
     * 
     * @type {FeatureProviderDto}
     * @memberof FeatureDto
     */
    'provider'?: FeatureProviderDto;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'description'?: string;
    /**
     * 
     * @type {IStringValueType}
     * @memberof FeatureDto
     */
    'valueType'?: IStringValueType;
    /**
     * 
     * @type {number}
     * @memberof FeatureDto
     */
    'depth'?: number;
    /**
     * 
     * @type {string}
     * @memberof FeatureDto
     */
    'parentName'?: string;
}
/**
 * 
 * @export
 * @interface FeatureGroupDto
 */
export interface FeatureGroupDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureGroupDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureGroupDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {Array<FeatureDto>}
     * @memberof FeatureGroupDto
     */
    'features'?: Array<FeatureDto>;
}
/**
 * 
 * @export
 * @interface FeatureProviderDto
 */
export interface FeatureProviderDto {
    /**
     * 
     * @type {string}
     * @memberof FeatureProviderDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof FeatureProviderDto
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @interface FindTenantResultDto
 */
export interface FindTenantResultDto {
    /**
     * 
     * @type {boolean}
     * @memberof FindTenantResultDto
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FindTenantResultDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FindTenantResultDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FindTenantResultDto
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface GetFeatureListResultDto
 */
export interface GetFeatureListResultDto {
    /**
     * 
     * @type {Array<FeatureGroupDto>}
     * @memberof GetFeatureListResultDto
     */
    'groups'?: Array<FeatureGroupDto>;
}
/**
 * 
 * @export
 * @interface GetPermissionListResultDto
 */
export interface GetPermissionListResultDto {
    /**
     * 
     * @type {string}
     * @memberof GetPermissionListResultDto
     */
    'entityDisplayName'?: string;
    /**
     * 
     * @type {Array<PermissionGroupDto>}
     * @memberof GetPermissionListResultDto
     */
    'groups'?: Array<PermissionGroupDto>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GitRepositoryType = {
    GitHub: 'GitHub',
    GitLab: 'GitLab',
    BitBucket: 'BitBucket',
    Other: 'Other'
} as const;

export type GitRepositoryType = typeof GitRepositoryType[keyof typeof GitRepositoryType];


/**
 * 
 * @export
 * @interface IStringValueType
 */
export interface IStringValueType {
    /**
     * 
     * @type {string}
     * @memberof IStringValueType
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IStringValueType
     */
    'properties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {IValueValidator}
     * @memberof IStringValueType
     */
    'validator'?: IValueValidator;
}
/**
 * 
 * @export
 * @interface IValueValidator
 */
export interface IValueValidator {
    /**
     * 
     * @type {string}
     * @memberof IValueValidator
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IValueValidator
     */
    'properties'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface IanaTimeZone
 */
export interface IanaTimeZone {
    /**
     * 
     * @type {string}
     * @memberof IanaTimeZone
     */
    'timeZoneName'?: string;
}
/**
 * 
 * @export
 * @interface IdentityRoleCreateDto
 */
export interface IdentityRoleCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleCreateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleCreateDto
     */
    'isPublic'?: boolean;
}
/**
 * 
 * @export
 * @interface IdentityRoleDto
 */
export interface IdentityRoleDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isStatic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleDto
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityRoleDtoListResultDto
 */
export interface IdentityRoleDtoListResultDto {
    /**
     * 
     * @type {Array<IdentityRoleDto>}
     * @memberof IdentityRoleDtoListResultDto
     */
    'items'?: Array<IdentityRoleDto>;
}
/**
 * 
 * @export
 * @interface IdentityRoleDtoPagedResultDto
 */
export interface IdentityRoleDtoPagedResultDto {
    /**
     * 
     * @type {Array<IdentityRoleDto>}
     * @memberof IdentityRoleDtoPagedResultDto
     */
    'items'?: Array<IdentityRoleDto>;
    /**
     * 
     * @type {number}
     * @memberof IdentityRoleDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface IdentityRoleUpdateDto
 */
export interface IdentityRoleUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityRoleUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleUpdateDto
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityRoleUpdateDto
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityRoleUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUser
 */
export interface IdentityUser {
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'id'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUser
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'concurrencyStamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'normalizedUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'normalizedEmail'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'passwordHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'securityStamp'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'isExternal'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'lockoutEnd'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IdentityUser
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUser
     */
    'shouldChangePasswordOnNextLogin'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IdentityUser
     */
    'entityVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdentityUser
     */
    'lastPasswordChangeTime'?: string;
    /**
     * 
     * @type {Array<IdentityUserRole>}
     * @memberof IdentityUser
     */
    'roles'?: Array<IdentityUserRole>;
    /**
     * 
     * @type {Array<IdentityUserClaim>}
     * @memberof IdentityUser
     */
    'claims'?: Array<IdentityUserClaim>;
    /**
     * 
     * @type {Array<IdentityUserLogin>}
     * @memberof IdentityUser
     */
    'logins'?: Array<IdentityUserLogin>;
    /**
     * 
     * @type {Array<IdentityUserToken>}
     * @memberof IdentityUser
     */
    'tokens'?: Array<IdentityUserToken>;
    /**
     * 
     * @type {Array<IdentityUserOrganizationUnit>}
     * @memberof IdentityUser
     */
    'organizationUnits'?: Array<IdentityUserOrganizationUnit>;
}
/**
 * 
 * @export
 * @interface IdentityUserClaim
 */
export interface IdentityUserClaim {
    /**
     * 
     * @type {string}
     * @memberof IdentityUserClaim
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserClaim
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserClaim
     */
    'claimType'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserClaim
     */
    'claimValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserClaim
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserCreateDto
 */
export interface IdentityUserCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserCreateDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserCreateDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserCreateDto
     */
    'roleNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserCreateDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface IdentityUserDto
 */
export interface IdentityUserDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IdentityUserDto
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lockoutEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'concurrencyStamp'?: string;
    /**
     * 
     * @type {number}
     * @memberof IdentityUserDto
     */
    'entityVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserDto
     */
    'lastPasswordChangeTime'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserDtoPagedResultDto
 */
export interface IdentityUserDtoPagedResultDto {
    /**
     * 
     * @type {Array<IdentityUserDto>}
     * @memberof IdentityUserDtoPagedResultDto
     */
    'items'?: Array<IdentityUserDto>;
    /**
     * 
     * @type {number}
     * @memberof IdentityUserDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface IdentityUserLogin
 */
export interface IdentityUserLogin {
    /**
     * 
     * @type {string}
     * @memberof IdentityUserLogin
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserLogin
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserLogin
     */
    'loginProvider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserLogin
     */
    'providerKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserLogin
     */
    'providerDisplayName'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserOrganizationUnit
 */
export interface IdentityUserOrganizationUnit {
    /**
     * 
     * @type {string}
     * @memberof IdentityUserOrganizationUnit
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserOrganizationUnit
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserOrganizationUnit
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserOrganizationUnit
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserOrganizationUnit
     */
    'organizationUnitId'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserRole
 */
export interface IdentityUserRole {
    /**
     * 
     * @type {string}
     * @memberof IdentityUserRole
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserRole
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserRole
     */
    'roleId'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserToken
 */
export interface IdentityUserToken {
    /**
     * 
     * @type {string}
     * @memberof IdentityUserToken
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserToken
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserToken
     */
    'loginProvider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserToken
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserToken
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserUpdateDto
 */
export interface IdentityUserUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof IdentityUserUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserUpdateDto
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IdentityUserUpdateDto
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserUpdateDto
     */
    'roleNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityUserUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface IdentityUserUpdateRolesDto
 */
export interface IdentityUserUpdateRolesDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof IdentityUserUpdateRolesDto
     */
    'roleNames': Array<string>;
}
/**
 * 
 * @export
 * @interface InApp
 */
export interface InApp {
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'quantity'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'original_transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'purchase_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'purchase_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'purchase_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'original_purchase_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'original_purchase_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'original_purchase_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'expires_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'expires_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'expires_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'web_order_line_item_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'is_trial_period'?: string;
    /**
     * 
     * @type {string}
     * @memberof InApp
     */
    'is_in_intro_offer_period'?: string;
}
/**
 * 
 * @export
 * @interface InterfaceMethodApiDescriptionModel
 */
export interface InterfaceMethodApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<MethodParameterApiDescriptionModel>}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'parametersOnMethod'?: Array<MethodParameterApiDescriptionModel>;
    /**
     * 
     * @type {ReturnValueApiDescriptionModel}
     * @memberof InterfaceMethodApiDescriptionModel
     */
    'returnValue'?: ReturnValueApiDescriptionModel;
}
/**
 * 
 * @export
 * @interface LanguageInfo
 */
export interface LanguageInfo {
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'cultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'uiCultureName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'twoLetterISOLanguageName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LanguageInfo
     */
    'flagIcon'?: string;
}
/**
 * 
 * @export
 * @interface LatestReceiptInfo
 */
export interface LatestReceiptInfo {
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'quantity'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'original_transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'purchase_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'purchase_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'purchase_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'original_purchase_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'original_purchase_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'original_purchase_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'expires_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'expires_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'expires_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'web_order_line_item_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'is_trial_period'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestReceiptInfo
     */
    'is_in_intro_offer_period'?: string;
}
/**
 * 
 * @export
 * @interface LocalizableStringDto
 */
export interface LocalizableStringDto {
    /**
     * 
     * @type {string}
     * @memberof LocalizableStringDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalizableStringDto
     */
    'resource'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const LoginResultType = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type LoginResultType = typeof LoginResultType[keyof typeof LoginResultType];


/**
 * 
 * @export
 * @interface MessagePublishDto
 */
export interface MessagePublishDto {
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessagePublishDto
     */
    'appId'?: string;
    /**
     * 模板名称, 包含版本号  puupee/wechat-app-msg?version=1 微信应用消息模板  puupee/wechat-official-msg?version=2 微信公众号消息模板
     * @type {string}
     * @memberof MessagePublishDto
     */
    'template'?: string;
    /**
     * JSON格式数据
     * @type {{ [key: string]: object | undefined; }}
     * @memberof MessagePublishDto
     */
    'data'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface MessageRecallDto
 */
export interface MessageRecallDto {
    /**
     * 
     * @type {string}
     * @memberof MessageRecallDto
     */
    'puupeeId'?: string;
}
/**
 * 
 * @export
 * @interface MessageSourceCategoryDto
 */
export interface MessageSourceCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceCategoryDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceCategoryDto
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface MessageSourceDto
 */
export interface MessageSourceDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceDto
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageSourceDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceDto
     */
    'iconUrl'?: string;
    /**
     * 
     * @type {Array<MessageSourceRouteSubDto>}
     * @memberof MessageSourceDto
     */
    'routes'?: Array<MessageSourceRouteSubDto>;
}
/**
 * 
 * @export
 * @interface MessageSourceRouteDto
 */
export interface MessageSourceRouteDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'sourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'extra'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageSourceRouteDto
     */
    'anticrawler'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MessageSourceRouteDto
     */
    'radar'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MessageSourceRouteDto
     */
    'rssbud'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MessageSourceRouteDto
     */
    'isPublished'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteDto
     */
    'iconUrl'?: string;
}
/**
 * 
 * @export
 * @interface MessageSourceRouteSubDto
 */
export interface MessageSourceRouteSubDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteSubDto
     */
    'routeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteSubDto
     */
    'path'?: string;
    /**
     * 
     * @type {object}
     * @memberof MessageSourceRouteSubDto
     */
    'values'?: object;
}
/**
 * 
 * @export
 * @interface MessageSubscribeDto
 */
export interface MessageSubscribeDto {
    /**
     * 
     * @type {string}
     * @memberof MessageSubscribeDto
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface MessageTemplateDto
 */
export interface MessageTemplateDto {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageTemplateDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateDto
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageTemplateDto
     */
    'latestVersion'?: number;
}
/**
 * 
 * @export
 * @interface MessageTemplateReleaseDto
 */
export interface MessageTemplateReleaseDto {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageTemplateReleaseDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'templateName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageTemplateReleaseDto
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseDto
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface MessageUnsubscribeDto
 */
export interface MessageUnsubscribeDto {
    /**
     * 
     * @type {string}
     * @memberof MessageUnsubscribeDto
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface MethodParameterApiDescriptionModel
 */
export interface MethodParameterApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'typeAsString'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MethodParameterApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MethodParameterApiDescriptionModel
     */
    'isOptional'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof MethodParameterApiDescriptionModel
     */
    'defaultValue'?: object;
}
/**
 * 
 * @export
 * @interface ModuleApiDescriptionModel
 */
export interface ModuleApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    'rootPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleApiDescriptionModel
     */
    'remoteServiceName'?: string;
    /**
     * 
     * @type {{ [key: string]: ControllerApiDescriptionModel | undefined; }}
     * @memberof ModuleApiDescriptionModel
     */
    'controllers'?: { [key: string]: ControllerApiDescriptionModel | undefined; };
}
/**
 * 
 * @export
 * @interface ModuleExtensionDto
 */
export interface ModuleExtensionDto {
    /**
     * 
     * @type {{ [key: string]: EntityExtensionDto | undefined; }}
     * @memberof ModuleExtensionDto
     */
    'entities'?: { [key: string]: EntityExtensionDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ModuleExtensionDto
     */
    'configuration'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface MultiTenancyInfoDto
 */
export interface MultiTenancyInfoDto {
    /**
     * 
     * @type {boolean}
     * @memberof MultiTenancyInfoDto
     */
    'isEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface NameValue
 */
export interface NameValue {
    /**
     * 
     * @type {string}
     * @memberof NameValue
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NameValue
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface NotificationInfoDto
 */
export interface NotificationInfoDto {
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationInfoDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationInfoDto
     */
    'deletionTime'?: string;
}
/**
 * 
 * @export
 * @interface NotificationInfoDtoPagedResultDto
 */
export interface NotificationInfoDtoPagedResultDto {
    /**
     * 
     * @type {Array<NotificationInfoDto>}
     * @memberof NotificationInfoDtoPagedResultDto
     */
    'items'?: Array<NotificationInfoDto>;
    /**
     * 
     * @type {number}
     * @memberof NotificationInfoDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface ObjectExtensionsDto
 */
export interface ObjectExtensionsDto {
    /**
     * 
     * @type {{ [key: string]: ModuleExtensionDto | undefined; }}
     * @memberof ObjectExtensionsDto
     */
    'modules'?: { [key: string]: ModuleExtensionDto | undefined; };
    /**
     * 
     * @type {{ [key: string]: ExtensionEnumDto | undefined; }}
     * @memberof ObjectExtensionsDto
     */
    'enums'?: { [key: string]: ExtensionEnumDto | undefined; };
}
/**
 * 
 * @export
 * @interface ParameterApiDescriptionModel
 */
export interface ParameterApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'nameOnMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'jsonName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ParameterApiDescriptionModel
     */
    'isOptional'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof ParameterApiDescriptionModel
     */
    'defaultValue'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof ParameterApiDescriptionModel
     */
    'constraintTypes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'bindingSourceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParameterApiDescriptionModel
     */
    'descriptorName'?: string;
}
/**
 * 
 * @export
 * @interface PendingRenewalInfo
 */
export interface PendingRenewalInfo {
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'auto_renew_product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'auto_renew_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'is_in_billing_retry_period'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'original_transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'product_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'expiration_intent'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'price_consent_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'grace_period_expires_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'grace_period_expires_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingRenewalInfo
     */
    'grace_period_expires_date_pst'?: string;
}
/**
 * 
 * @export
 * @interface PermissionGrantInfoDto
 */
export interface PermissionGrantInfoDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGrantInfoDto
     */
    'parentName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PermissionGrantInfoDto
     */
    'isGranted'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PermissionGrantInfoDto
     */
    'allowedProviders'?: Array<string>;
    /**
     * 
     * @type {Array<ProviderInfoDto>}
     * @memberof PermissionGrantInfoDto
     */
    'grantedProviders'?: Array<ProviderInfoDto>;
}
/**
 * 
 * @export
 * @interface PermissionGroupDto
 */
export interface PermissionGroupDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayNameKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PermissionGroupDto
     */
    'displayNameResource'?: string;
    /**
     * 
     * @type {Array<PermissionGrantInfoDto>}
     * @memberof PermissionGroupDto
     */
    'permissions'?: Array<PermissionGrantInfoDto>;
}
/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof ProfileDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'isExternal'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileDto
     */
    'hasPassword'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProfileDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface PropertyApiDescriptionModel
 */
export interface PropertyApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'jsonName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'typeSimple'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PropertyApiDescriptionModel
     */
    'isRequired'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PropertyApiDescriptionModel
     */
    'minLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof PropertyApiDescriptionModel
     */
    'maxLength'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'minimum'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'maximum'?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertyApiDescriptionModel
     */
    'regex'?: string;
}
/**
 * 
 * @export
 * @interface ProviderInfoDto
 */
export interface ProviderInfoDto {
    /**
     * 
     * @type {string}
     * @memberof ProviderInfoDto
     */
    'providerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderInfoDto
     */
    'providerKey'?: string;
}
/**
 * 
 * @export
 * @interface Receipt
 */
export interface Receipt {
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'receipt_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    'adam_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    'app_item_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'bundle_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'application_version'?: string;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    'download_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Receipt
     */
    'version_external_identifier'?: number;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'receipt_creation_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'receipt_creation_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'receipt_creation_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'request_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'request_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'request_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'original_purchase_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'original_purchase_date_ms'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'original_purchase_date_pst'?: string;
    /**
     * 
     * @type {string}
     * @memberof Receipt
     */
    'original_application_version'?: string;
    /**
     * 
     * @type {Array<InApp>}
     * @memberof Receipt
     */
    'in_app'?: Array<InApp>;
}
/**
 * 
 * @export
 * @interface RefreshDeviceStatusDto
 */
export interface RefreshDeviceStatusDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDeviceStatusDto
     */
    'token'?: string;
    /**
     * 
     * @type {DeviceStatus}
     * @memberof RefreshDeviceStatusDto
     */
    'status'?: DeviceStatus;
}


/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof RegisterDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'emailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'appName': string;
}
/**
 * 
 * @export
 * @interface RemoteServiceErrorInfo
 */
export interface RemoteServiceErrorInfo {
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceErrorInfo
     */
    'details'?: string;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof RemoteServiceErrorInfo
     */
    'data'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {Array<RemoteServiceValidationErrorInfo>}
     * @memberof RemoteServiceErrorInfo
     */
    'validationErrors'?: Array<RemoteServiceValidationErrorInfo>;
}
/**
 * 
 * @export
 * @interface RemoteServiceErrorResponse
 */
export interface RemoteServiceErrorResponse {
    /**
     * 
     * @type {RemoteServiceErrorInfo}
     * @memberof RemoteServiceErrorResponse
     */
    'error'?: RemoteServiceErrorInfo;
}
/**
 * 
 * @export
 * @interface RemoteServiceValidationErrorInfo
 */
export interface RemoteServiceValidationErrorInfo {
    /**
     * 
     * @type {string}
     * @memberof RemoteServiceValidationErrorInfo
     */
    'message'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoteServiceValidationErrorInfo
     */
    'members'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'resetToken': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ReturnValueApiDescriptionModel
 */
export interface ReturnValueApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof ReturnValueApiDescriptionModel
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReturnValueApiDescriptionModel
     */
    'typeSimple'?: string;
}
/**
 * 
 * @export
 * @interface SendPasswordResetCodeDto
 */
export interface SendPasswordResetCodeDto {
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'appName': string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'returnUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendPasswordResetCodeDto
     */
    'returnUrlHash'?: string;
}
/**
 * 
 * @export
 * @interface SendTestEmailInput
 */
export interface SendTestEmailInput {
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'senderEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'targetEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof SendTestEmailInput
     */
    'body'?: string;
}
/**
 * 
 * @export
 * @interface SendVerificationCodeDto
 */
export interface SendVerificationCodeDto {
    /**
     * 验证码发送器 暂时支持: SMS: 手机短信验证码
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'codeSender'?: string;
    /**
     * 验证码接受者, 用户账户
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'account'?: string;
    /**
     * 验证码用途
     * @type {string}
     * @memberof SendVerificationCodeDto
     */
    'purpose'?: string;
}
/**
 * 
 * @export
 * @interface StorageObjectCredentials
 */
export interface StorageObjectCredentials {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'endPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'protocal'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'bucketName'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'regionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'securityToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'accessKeySecret'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'expiration'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectCredentials
     */
    'expiredTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectCredentials
     */
    'appId'?: string;
}
/**
 * 
 * @export
 * @interface StorageObjectDto
 */
export interface StorageObjectDto {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StorageObjectDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'url'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectDto
     */
    'syncVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'key'?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObjectDto
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'md5'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'sliceMd5'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'rapidCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'contentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'extension'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageClass'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageObjectCreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'storageObjectUpdatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObjectDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface StorageObjectOrCredentialsDto
 */
export interface StorageObjectOrCredentialsDto {
    /**
     * 
     * @type {StorageObjectDto}
     * @memberof StorageObjectOrCredentialsDto
     */
    'storageObject'?: StorageObjectDto;
    /**
     * 
     * @type {StorageObjectCredentials}
     * @memberof StorageObjectOrCredentialsDto
     */
    'credentials'?: StorageObjectCredentials;
}
/**
 * 
 * @export
 * @interface SubscriptionDto
 */
export interface SubscriptionDto {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'deletionTime'?: string;
    /**
     * 会员过期时间
     * @type {string}
     * @memberof SubscriptionDto
     */
    'expireAt'?: string;
    /**
     * 应用 ID
     * @type {string}
     * @memberof SubscriptionDto
     */
    'appId'?: string;
    /**
     * 
     * @type {AppPriceNaming}
     * @memberof SubscriptionDto
     */
    'priceNaming'?: AppPriceNaming;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDto
     */
    'pricingId'?: string;
}


/**
 * 
 * @export
 * @interface SubscriptionOrderDto
 */
export interface SubscriptionOrderDto {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionOrderDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {SubscriptionOrderType}
     * @memberof SubscriptionOrderDto
     */
    'type'?: SubscriptionOrderType;
    /**
     * 
     * @type {SubscriptionOrderStatus}
     * @memberof SubscriptionOrderDto
     */
    'status'?: SubscriptionOrderStatus;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'pricingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionOrderDto
     */
    'productId'?: string;
}


/**
 * 订阅订单状态
 * @export
 * @enum {string}
 */

export const SubscriptionOrderStatus = {
    Waiting: 'Waiting',
    Overtime: 'Overtime',
    Finished: 'Finished'
} as const;

export type SubscriptionOrderStatus = typeof SubscriptionOrderStatus[keyof typeof SubscriptionOrderStatus];


/**
 * 订阅订单类型
 * @export
 * @enum {string}
 */

export const SubscriptionOrderType = {
    AppleAuto: 'AppleAuto',
    AlipayOnce: 'AlipayOnce',
    AlipayAuto: 'AlipayAuto',
    WechatOnce: 'WechatOnce',
    WechatAuto: 'WechatAuto'
} as const;

export type SubscriptionOrderType = typeof SubscriptionOrderType[keyof typeof SubscriptionOrderType];


/**
 * 
 * @export
 * @interface TenantCreateDto
 */
export interface TenantCreateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantCreateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'adminEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof TenantCreateDto
     */
    'adminPassword': string;
}
/**
 * 
 * @export
 * @interface TenantDto
 */
export interface TenantDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenantDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface TenantDtoPagedResultDto
 */
export interface TenantDtoPagedResultDto {
    /**
     * 
     * @type {Array<TenantDto>}
     * @memberof TenantDtoPagedResultDto
     */
    'items'?: Array<TenantDto>;
    /**
     * 
     * @type {number}
     * @memberof TenantDtoPagedResultDto
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface TenantUpdateDto
 */
export interface TenantUpdateDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof TenantUpdateDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TenantUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TenantUpdateDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface TimeZone
 */
export interface TimeZone {
    /**
     * 
     * @type {IanaTimeZone}
     * @memberof TimeZone
     */
    'iana'?: IanaTimeZone;
    /**
     * 
     * @type {WindowsTimeZone}
     * @memberof TimeZone
     */
    'windows'?: WindowsTimeZone;
}
/**
 * 
 * @export
 * @interface TimingDto
 */
export interface TimingDto {
    /**
     * 
     * @type {TimeZone}
     * @memberof TimingDto
     */
    'timeZone'?: TimeZone;
}
/**
 * 
 * @export
 * @interface TypeApiDescriptionModel
 */
export interface TypeApiDescriptionModel {
    /**
     * 
     * @type {string}
     * @memberof TypeApiDescriptionModel
     */
    'baseType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TypeApiDescriptionModel
     */
    'isEnum'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    'enumNames'?: Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof TypeApiDescriptionModel
     */
    'enumValues'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TypeApiDescriptionModel
     */
    'genericArguments'?: Array<string>;
    /**
     * 
     * @type {Array<PropertyApiDescriptionModel>}
     * @memberof TypeApiDescriptionModel
     */
    'properties'?: Array<PropertyApiDescriptionModel>;
}
/**
 * 
 * @export
 * @interface UpdateEmailSettingsDto
 */
export interface UpdateEmailSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpHost'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpUserName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpDomain'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpEnableSsl'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateEmailSettingsDto
     */
    'smtpUseDefaultCredentials'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'defaultFromAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailSettingsDto
     */
    'defaultFromDisplayName': string;
}
/**
 * 
 * @export
 * @interface UpdateFeatureDto
 */
export interface UpdateFeatureDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateFeatureDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateFeatureDto
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface UpdateFeaturesDto
 */
export interface UpdateFeaturesDto {
    /**
     * 
     * @type {Array<UpdateFeatureDto>}
     * @memberof UpdateFeaturesDto
     */
    'features'?: Array<UpdateFeatureDto>;
}
/**
 * 
 * @export
 * @interface UpdatePermissionDto
 */
export interface UpdatePermissionDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePermissionDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePermissionDto
     */
    'isGranted'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdatePermissionsDto
 */
export interface UpdatePermissionsDto {
    /**
     * 
     * @type {Array<UpdatePermissionDto>}
     * @memberof UpdatePermissionsDto
     */
    'permissions'?: Array<UpdatePermissionDto>;
}
/**
 * 
 * @export
 * @interface UpdateProfileDto
 */
export interface UpdateProfileDto {
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof UpdateProfileDto
     */
    'extraProperties'?: { [key: string]: object | undefined; };
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'surname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'concurrencyStamp'?: string;
}
/**
 * 
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'surname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserData
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserData
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {{ [key: string]: object | undefined; }}
     * @memberof UserData
     */
    'extraProperties'?: { [key: string]: object | undefined; };
}
/**
 * 
 * @export
 * @interface UserDataListResultDto
 */
export interface UserDataListResultDto {
    /**
     * 
     * @type {Array<UserData>}
     * @memberof UserDataListResultDto
     */
    'items'?: Array<UserData>;
}
/**
 * 
 * @export
 * @interface UserLoginInfo
 */
export interface UserLoginInfo {
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfo
     */
    'userNameOrEmailAddress': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginInfo
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof UserLoginInfo
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface UserProfileDto
 */
export interface UserProfileDto {
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'userName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileDto
     */
    'hasPassword'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifyPasswordResetTokenInput
 */
export interface VerifyPasswordResetTokenInput {
    /**
     * 
     * @type {string}
     * @memberof VerifyPasswordResetTokenInput
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyPasswordResetTokenInput
     */
    'resetToken': string;
}
/**
 * 
 * @export
 * @interface VerifyReceiptDto
 */
export interface VerifyReceiptDto {
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyReceiptDto
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'receiptData': string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof VerifyReceiptDto
     */
    'platform': AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptDto
     */
    'deviceToken': string;
}


/**
 * 校验结果
 * @export
 * @interface VerifyReceiptResult
 */
export interface VerifyReceiptResult {
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'creationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'creatorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'lastModificationTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'lastModifierId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyReceiptResult
     */
    'isDeleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'deleterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'deletionTime'?: string;
    /**
     * 
     * @type {IdentityUser}
     * @memberof VerifyReceiptResult
     */
    'deleter'?: IdentityUser;
    /**
     * 
     * @type {IdentityUser}
     * @memberof VerifyReceiptResult
     */
    'creator'?: IdentityUser;
    /**
     * 
     * @type {IdentityUser}
     * @memberof VerifyReceiptResult
     */
    'lastModifier'?: IdentityUser;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'orderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'receiptData'?: string;
    /**
     * 
     * @type {AppPlatform}
     * @memberof VerifyReceiptResult
     */
    'platform'?: AppPlatform;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'deviceToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof VerifyReceiptResult
     */
    'ok'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'statusCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'resultData'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyReceiptResult
     */
    'recordId'?: string;
    /**
     * 
     * @type {AppleVerifyReceiptResult}
     * @memberof VerifyReceiptResult
     */
    'appleVerifyReceiptResult'?: AppleVerifyReceiptResult;
}


/**
 * 
 * @export
 * @interface WindowsTimeZone
 */
export interface WindowsTimeZone {
    /**
     * 
     * @type {string}
     * @memberof WindowsTimeZone
     */
    'timeZoneId'?: string;
}

/**
 * AbpApiDefinitionApi - axios parameter creator
 * @export
 */
export const AbpApiDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [includeTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (includeTypes?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/abp/api-definition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (includeTypes !== undefined) {
                localVarQueryParameter['IncludeTypes'] = includeTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApiDefinitionApi - functional programming interface
 * @export
 */
export const AbpApiDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApiDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(includeTypes?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationApiDescriptionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(includeTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApiDefinitionApi - factory interface
 * @export
 */
export const AbpApiDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApiDefinitionApiFp(configuration)
    return {
        /**
         * 
         * @param {AbpApiDefinitionApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: AbpApiDefinitionApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApplicationApiDescriptionModel> {
            return localVarFp.get(requestParameters.includeTypes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in AbpApiDefinitionApi.
 * @export
 * @interface AbpApiDefinitionApiGetRequest
 */
export interface AbpApiDefinitionApiGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AbpApiDefinitionApiGet
     */
    readonly includeTypes?: boolean
}

/**
 * AbpApiDefinitionApi - object-oriented interface
 * @export
 * @class AbpApiDefinitionApi
 * @extends {BaseAPI}
 */
export class AbpApiDefinitionApi extends BaseAPI {
    /**
     * 
     * @param {AbpApiDefinitionApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApiDefinitionApi
     */
    public get(requestParameters: AbpApiDefinitionApiGetRequest = {}, options?: AxiosRequestConfig) {
        return AbpApiDefinitionApiFp(this.configuration).get(requestParameters.includeTypes, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpApplicationConfigurationApi - axios parameter creator
 * @export
 */
export const AbpApplicationConfigurationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {boolean} [includeLocalizationResources] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (includeLocalizationResources?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/abp/application-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (includeLocalizationResources !== undefined) {
                localVarQueryParameter['IncludeLocalizationResources'] = includeLocalizationResources;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApplicationConfigurationApi - functional programming interface
 * @export
 */
export const AbpApplicationConfigurationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApplicationConfigurationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {boolean} [includeLocalizationResources] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(includeLocalizationResources?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationConfigurationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(includeLocalizationResources, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApplicationConfigurationApi - factory interface
 * @export
 */
export const AbpApplicationConfigurationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApplicationConfigurationApiFp(configuration)
    return {
        /**
         * 
         * @param {AbpApplicationConfigurationApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: AbpApplicationConfigurationApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApplicationConfigurationDto> {
            return localVarFp.get(requestParameters.includeLocalizationResources, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in AbpApplicationConfigurationApi.
 * @export
 * @interface AbpApplicationConfigurationApiGetRequest
 */
export interface AbpApplicationConfigurationApiGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AbpApplicationConfigurationApiGet
     */
    readonly includeLocalizationResources?: boolean
}

/**
 * AbpApplicationConfigurationApi - object-oriented interface
 * @export
 * @class AbpApplicationConfigurationApi
 * @extends {BaseAPI}
 */
export class AbpApplicationConfigurationApi extends BaseAPI {
    /**
     * 
     * @param {AbpApplicationConfigurationApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApplicationConfigurationApi
     */
    public get(requestParameters: AbpApplicationConfigurationApiGetRequest = {}, options?: AxiosRequestConfig) {
        return AbpApplicationConfigurationApiFp(this.configuration).get(requestParameters.includeLocalizationResources, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpApplicationLocalizationApi - axios parameter creator
 * @export
 */
export const AbpApplicationLocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cultureName 
         * @param {boolean} [onlyDynamics] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (cultureName: string, onlyDynamics?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cultureName' is not null or undefined
            assertParamExists('get', 'cultureName', cultureName)
            const localVarPath = `/api/abp/application-localization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (cultureName !== undefined) {
                localVarQueryParameter['CultureName'] = cultureName;
            }

            if (onlyDynamics !== undefined) {
                localVarQueryParameter['OnlyDynamics'] = onlyDynamics;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpApplicationLocalizationApi - functional programming interface
 * @export
 */
export const AbpApplicationLocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpApplicationLocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cultureName 
         * @param {boolean} [onlyDynamics] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(cultureName: string, onlyDynamics?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationLocalizationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(cultureName, onlyDynamics, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpApplicationLocalizationApi - factory interface
 * @export
 */
export const AbpApplicationLocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpApplicationLocalizationApiFp(configuration)
    return {
        /**
         * 
         * @param {AbpApplicationLocalizationApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: AbpApplicationLocalizationApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicationLocalizationDto> {
            return localVarFp.get(requestParameters.cultureName, requestParameters.onlyDynamics, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in AbpApplicationLocalizationApi.
 * @export
 * @interface AbpApplicationLocalizationApiGetRequest
 */
export interface AbpApplicationLocalizationApiGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AbpApplicationLocalizationApiGet
     */
    readonly cultureName: string

    /**
     * 
     * @type {boolean}
     * @memberof AbpApplicationLocalizationApiGet
     */
    readonly onlyDynamics?: boolean
}

/**
 * AbpApplicationLocalizationApi - object-oriented interface
 * @export
 * @class AbpApplicationLocalizationApi
 * @extends {BaseAPI}
 */
export class AbpApplicationLocalizationApi extends BaseAPI {
    /**
     * 
     * @param {AbpApplicationLocalizationApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpApplicationLocalizationApi
     */
    public get(requestParameters: AbpApplicationLocalizationApiGetRequest, options?: AxiosRequestConfig) {
        return AbpApplicationLocalizationApiFp(this.configuration).get(requestParameters.cultureName, requestParameters.onlyDynamics, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AbpTenantApi - axios parameter creator
 * @export
 */
export const AbpTenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTenantById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findTenantById', 'id', id)
            const localVarPath = `/api/abp/multi-tenancy/tenants/by-id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTenantByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('findTenantByName', 'name', name)
            const localVarPath = `/api/abp/multi-tenancy/tenants/by-name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AbpTenantApi - functional programming interface
 * @export
 */
export const AbpTenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AbpTenantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTenantById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTenantResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTenantById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTenantByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTenantResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTenantByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AbpTenantApi - factory interface
 * @export
 */
export const AbpTenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AbpTenantApiFp(configuration)
    return {
        /**
         * 
         * @param {AbpTenantApiFindTenantByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTenantById(requestParameters: AbpTenantApiFindTenantByIdRequest, options?: AxiosRequestConfig): AxiosPromise<FindTenantResultDto> {
            return localVarFp.findTenantById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AbpTenantApiFindTenantByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTenantByName(requestParameters: AbpTenantApiFindTenantByNameRequest, options?: AxiosRequestConfig): AxiosPromise<FindTenantResultDto> {
            return localVarFp.findTenantByName(requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findTenantById operation in AbpTenantApi.
 * @export
 * @interface AbpTenantApiFindTenantByIdRequest
 */
export interface AbpTenantApiFindTenantByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AbpTenantApiFindTenantById
     */
    readonly id: string
}

/**
 * Request parameters for findTenantByName operation in AbpTenantApi.
 * @export
 * @interface AbpTenantApiFindTenantByNameRequest
 */
export interface AbpTenantApiFindTenantByNameRequest {
    /**
     * 
     * @type {string}
     * @memberof AbpTenantApiFindTenantByName
     */
    readonly name: string
}

/**
 * AbpTenantApi - object-oriented interface
 * @export
 * @class AbpTenantApi
 * @extends {BaseAPI}
 */
export class AbpTenantApi extends BaseAPI {
    /**
     * 
     * @param {AbpTenantApiFindTenantByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpTenantApi
     */
    public findTenantById(requestParameters: AbpTenantApiFindTenantByIdRequest, options?: AxiosRequestConfig) {
        return AbpTenantApiFp(this.configuration).findTenantById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AbpTenantApiFindTenantByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbpTenantApi
     */
    public findTenantByName(requestParameters: AbpTenantApiFindTenantByNameRequest, options?: AxiosRequestConfig) {
        return AbpTenantApiFp(this.configuration).findTenantByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (body?: ChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/account/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查同步认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSyncAuth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/account/check-sync-auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountDeletionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAccount: async (body?: AccountDeletionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/account/destroy-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (body?: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (body?: ResetPasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendPasswordResetCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordResetCode: async (body?: SendPasswordResetCodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/send-password-reset-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyPasswordResetTokenInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPasswordResetToken: async (body?: VerifyPasswordResetTokenInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/verify-password-reset-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(body?: ChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 检查同步认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkSyncAuth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckSyncAuthResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkSyncAuth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountDeletionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyAccount(body?: AccountDeletionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyAccount(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body?: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(body?: ResetPasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendPasswordResetCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPasswordResetCode(body?: SendPasswordResetCodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPasswordResetCode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyPasswordResetTokenInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyPasswordResetToken(body?: VerifyPasswordResetTokenInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyPasswordResetToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {AccountApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: AccountApiChangePasswordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查同步认证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkSyncAuth(options?: AxiosRequestConfig): AxiosPromise<CheckSyncAuthResultDto> {
            return localVarFp.checkSyncAuth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiDestroyAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAccount(requestParameters: AccountApiDestroyAccountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.destroyAccount(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: AxiosRequestConfig): AxiosPromise<UserProfileDto> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: AccountApiRegisterRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.register(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiResetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(requestParameters: AccountApiResetPasswordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiSendPasswordResetCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPasswordResetCode(requestParameters: AccountApiSendPasswordResetCodeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendPasswordResetCode(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiVerifyPasswordResetTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPasswordResetToken(requestParameters: AccountApiVerifyPasswordResetTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.verifyPasswordResetToken(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePassword operation in AccountApi.
 * @export
 * @interface AccountApiChangePasswordRequest
 */
export interface AccountApiChangePasswordRequest {
    /**
     * 
     * @type {ChangePasswordDto}
     * @memberof AccountApiChangePassword
     */
    readonly body?: ChangePasswordDto
}

/**
 * Request parameters for destroyAccount operation in AccountApi.
 * @export
 * @interface AccountApiDestroyAccountRequest
 */
export interface AccountApiDestroyAccountRequest {
    /**
     * 
     * @type {AccountDeletionDto}
     * @memberof AccountApiDestroyAccount
     */
    readonly body?: AccountDeletionDto
}

/**
 * Request parameters for register operation in AccountApi.
 * @export
 * @interface AccountApiRegisterRequest
 */
export interface AccountApiRegisterRequest {
    /**
     * 
     * @type {RegisterDto}
     * @memberof AccountApiRegister
     */
    readonly body?: RegisterDto
}

/**
 * Request parameters for resetPassword operation in AccountApi.
 * @export
 * @interface AccountApiResetPasswordRequest
 */
export interface AccountApiResetPasswordRequest {
    /**
     * 
     * @type {ResetPasswordDto}
     * @memberof AccountApiResetPassword
     */
    readonly body?: ResetPasswordDto
}

/**
 * Request parameters for sendPasswordResetCode operation in AccountApi.
 * @export
 * @interface AccountApiSendPasswordResetCodeRequest
 */
export interface AccountApiSendPasswordResetCodeRequest {
    /**
     * 
     * @type {SendPasswordResetCodeDto}
     * @memberof AccountApiSendPasswordResetCode
     */
    readonly body?: SendPasswordResetCodeDto
}

/**
 * Request parameters for verifyPasswordResetToken operation in AccountApi.
 * @export
 * @interface AccountApiVerifyPasswordResetTokenRequest
 */
export interface AccountApiVerifyPasswordResetTokenRequest {
    /**
     * 
     * @type {VerifyPasswordResetTokenInput}
     * @memberof AccountApiVerifyPasswordResetToken
     */
    readonly body?: VerifyPasswordResetTokenInput
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {AccountApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public changePassword(requestParameters: AccountApiChangePasswordRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).changePassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查同步认证
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public checkSyncAuth(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).checkSyncAuth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiDestroyAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public destroyAccount(requestParameters: AccountApiDestroyAccountRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).destroyAccount(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public get(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public register(requestParameters: AccountApiRegisterRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).register(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public resetPassword(requestParameters: AccountApiResetPasswordRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).resetPassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiSendPasswordResetCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public sendPasswordResetCode(requestParameters: AccountApiSendPasswordResetCodeRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).sendPasswordResetCode(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiVerifyPasswordResetTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public verifyPasswordResetToken(requestParameters: AccountApiVerifyPasswordResetTokenRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).verifyPasswordResetToken(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export const ApiKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiKeyCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: ApiKeyCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiKeyUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: ApiKeyUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export const ApiKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiKeyCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: ApiKeyCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiKeyUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: ApiKeyUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiKeysApi - factory interface
 * @export
 */
export const ApiKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiKeysApiFp(configuration)
    return {
        /**
         * 
         * @param {ApiKeysApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: ApiKeysApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiKeysApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: ApiKeysApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiKeyDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiKeysApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ApiKeysApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiKeysApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: ApiKeysApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiKeyDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiKeysApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: ApiKeysApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiDeleteRequest
 */
export interface ApiKeysApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeysApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiCreateRequest
 */
export interface ApiKeysApiCreateRequest {
    /**
     * 
     * @type {ApiKeyCreateDto}
     * @memberof ApiKeysApiCreate
     */
    readonly body?: ApiKeyCreateDto
}

/**
 * Request parameters for getById operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiGetByIdRequest
 */
export interface ApiKeysApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeysApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiGetListRequest
 */
export interface ApiKeysApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeysApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof ApiKeysApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof ApiKeysApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in ApiKeysApi.
 * @export
 * @interface ApiKeysApiUpdateRequest
 */
export interface ApiKeysApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiKeysApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ApiKeyUpdateDto}
     * @memberof ApiKeysApiUpdate
     */
    readonly body?: ApiKeyUpdateDto
}

/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export class ApiKeysApi extends BaseAPI {
    /**
     * 
     * @param {ApiKeysApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public _delete(requestParameters: ApiKeysApiDeleteRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiKeysApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public create(requestParameters: ApiKeysApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiKeysApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public getById(requestParameters: ApiKeysApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiKeysApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public getList(requestParameters: ApiKeysApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiKeysApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    public update(requestParameters: ApiKeysApiUpdateRequest, options?: AxiosRequestConfig) {
        return ApiKeysApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除应用
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建新应用
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/by-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} [env] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures: async (appId: string, env?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getFeatures', 'appId', appId)
            const localVarPath = `/api/app/app/features/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (env !== undefined) {
                localVarQueryParameter['env'] = env;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户的应用列表
         * @param {string} [creatorId] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (creatorId !== undefined) {
                localVarQueryParameter['CreatorId'] = creatorId;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取开发者所有 APP 包括未发布的
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByDeveloperAll: async (developerAccount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/by-developer-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (developerAccount !== undefined) {
                localVarQueryParameter['developerAccount'] = developerAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 所有开发者已发布 APP 列表
         * @param {any} [type] 
         * @param {string} [developerAccount] 
         * @param {string} [currentAppName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPublic: async (type?: any, developerAccount?: string, currentAppName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (developerAccount !== undefined) {
                localVarQueryParameter['DeveloperAccount'] = developerAccount;
            }

            if (currentAppName !== undefined) {
                localVarQueryParameter['CurrentAppName'] = currentAppName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取APP列表包含用户订阅信息
         * @param {any} [type] 
         * @param {string} [searchKey] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListWithUser: async (type?: any, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/with-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (searchKey !== undefined) {
                localVarQueryParameter['SearchKey'] = searchKey;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} [env] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSdksById: async (appId: string, env?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getSdksById', 'appId', appId)
            const localVarPath = `/api/app/app/sdks-by-id/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (env !== undefined) {
                localVarQueryParameter['env'] = env;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取上传凭证
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadCredentials: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/upload-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWithUser', 'id', id)
            const localVarPath = `/api/app/app/{id}/with-user`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AppRunDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        run: async (body?: AppRunDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 APP 信息
         * @param {string} id 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AppRunRecordUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunState: async (id: string, body?: AppRunRecordUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRunState', 'id', id)
            const localVarPath = `/api/app/app/{id}/run-state`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除应用
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 创建新应用
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByName(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} [env] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatures(appId: string, env?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppFeatureDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(appId, env, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取当前用户的应用列表
         * @param {string} [creatorId] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(creatorId?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(creatorId, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取开发者所有 APP 包括未发布的
         * @param {string} [developerAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByDeveloperAll(developerAccount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByDeveloperAll(developerAccount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 所有开发者已发布 APP 列表
         * @param {any} [type] 
         * @param {string} [developerAccount] 
         * @param {string} [currentAppName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListPublic(type?: any, developerAccount?: string, currentAppName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListPublic(type, developerAccount, currentAppName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取APP列表包含用户订阅信息
         * @param {any} [type] 
         * @param {string} [searchKey] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListWithUser(type?: any, searchKey?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppWithUserDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListWithUser(type, searchKey, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} [env] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSdksById(appId: string, env?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSdkDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSdksById(appId, env, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取上传凭证
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadCredentials(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObjectCredentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadCredentials(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppWithUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AppRunDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async run(body?: AppRunDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppRunRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.run(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新 APP 信息
         * @param {string} id 
         * @param {CreateOrUpdateAppDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {AppRunRecordUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRunState(id: string, body?: AppRunRecordUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppRunRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunState(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除应用
         * @param {AppApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建新应用
         * @param {AppApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {AppApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AppApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {AppApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName(requestParameters: AppApiGetByNameRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppDto> {
            return localVarFp.getByName(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppApiGetFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures(requestParameters: AppApiGetFeaturesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AppFeatureDto>> {
            return localVarFp.getFeatures(requestParameters.appId, requestParameters.env, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户的应用列表
         * @param {AppApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.creatorId, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取开发者所有 APP 包括未发布的
         * @param {AppApiGetListByDeveloperAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByDeveloperAll(requestParameters: AppApiGetListByDeveloperAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.getListByDeveloperAll(requestParameters.developerAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 所有开发者已发布 APP 列表
         * @param {AppApiGetListPublicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListPublic(requestParameters: AppApiGetListPublicRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppDtoPagedResultDto> {
            return localVarFp.getListPublic(requestParameters.type, requestParameters.developerAccount, requestParameters.currentAppName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取APP列表包含用户订阅信息
         * @param {AppApiGetListWithUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListWithUser(requestParameters: AppApiGetListWithUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppWithUserDtoPagedResultDto> {
            return localVarFp.getListWithUser(requestParameters.type, requestParameters.searchKey, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppApiGetSdksByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSdksById(requestParameters: AppApiGetSdksByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AppSdkDto>> {
            return localVarFp.getSdksById(requestParameters.appId, requestParameters.env, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取上传凭证
         * @param {AppApiGetUploadCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadCredentials(requestParameters: AppApiGetUploadCredentialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<StorageObjectCredentials> {
            return localVarFp.getUploadCredentials(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取 APP 详情
         * @param {AppApiGetWithUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithUser(requestParameters: AppApiGetWithUserRequest, options?: AxiosRequestConfig): AxiosPromise<AppWithUserDto> {
            return localVarFp.getWithUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppApiRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        run(requestParameters: AppApiRunRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppRunRecordDto> {
            return localVarFp.run(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新 APP 信息
         * @param {AppApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppApiUpdateRunStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRunState(requestParameters: AppApiUpdateRunStateRequest, options?: AxiosRequestConfig): AxiosPromise<AppRunRecordDto> {
            return localVarFp.updateRunState(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppApi.
 * @export
 * @interface AppApiDeleteRequest
 */
export interface AppApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppApi.
 * @export
 * @interface AppApiCreateRequest
 */
export interface AppApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppDto}
     * @memberof AppApiCreate
     */
    readonly body?: CreateOrUpdateAppDto
}

/**
 * Request parameters for getById operation in AppApi.
 * @export
 * @interface AppApiGetByIdRequest
 */
export interface AppApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getByName operation in AppApi.
 * @export
 * @interface AppApiGetByNameRequest
 */
export interface AppApiGetByNameRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetByName
     */
    readonly name?: string
}

/**
 * Request parameters for getFeatures operation in AppApi.
 * @export
 * @interface AppApiGetFeaturesRequest
 */
export interface AppApiGetFeaturesRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetFeatures
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof AppApiGetFeatures
     */
    readonly env?: string
}

/**
 * Request parameters for getList operation in AppApi.
 * @export
 * @interface AppApiGetListRequest
 */
export interface AppApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetList
     */
    readonly creatorId?: string

    /**
     * 
     * @type {string}
     * @memberof AppApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for getListByDeveloperAll operation in AppApi.
 * @export
 * @interface AppApiGetListByDeveloperAllRequest
 */
export interface AppApiGetListByDeveloperAllRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetListByDeveloperAll
     */
    readonly developerAccount?: string
}

/**
 * Request parameters for getListPublic operation in AppApi.
 * @export
 * @interface AppApiGetListPublicRequest
 */
export interface AppApiGetListPublicRequest {
    /**
     * 
     * @type {any}
     * @memberof AppApiGetListPublic
     */
    readonly type?: any

    /**
     * 
     * @type {string}
     * @memberof AppApiGetListPublic
     */
    readonly developerAccount?: string

    /**
     * 
     * @type {string}
     * @memberof AppApiGetListPublic
     */
    readonly currentAppName?: string
}

/**
 * Request parameters for getListWithUser operation in AppApi.
 * @export
 * @interface AppApiGetListWithUserRequest
 */
export interface AppApiGetListWithUserRequest {
    /**
     * 
     * @type {any}
     * @memberof AppApiGetListWithUser
     */
    readonly type?: any

    /**
     * 
     * @type {string}
     * @memberof AppApiGetListWithUser
     */
    readonly searchKey?: string

    /**
     * 
     * @type {string}
     * @memberof AppApiGetListWithUser
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppApiGetListWithUser
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppApiGetListWithUser
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for getSdksById operation in AppApi.
 * @export
 * @interface AppApiGetSdksByIdRequest
 */
export interface AppApiGetSdksByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetSdksById
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof AppApiGetSdksById
     */
    readonly env?: string
}

/**
 * Request parameters for getUploadCredentials operation in AppApi.
 * @export
 * @interface AppApiGetUploadCredentialsRequest
 */
export interface AppApiGetUploadCredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetUploadCredentials
     */
    readonly key?: string
}

/**
 * Request parameters for getWithUser operation in AppApi.
 * @export
 * @interface AppApiGetWithUserRequest
 */
export interface AppApiGetWithUserRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiGetWithUser
     */
    readonly id: string
}

/**
 * Request parameters for run operation in AppApi.
 * @export
 * @interface AppApiRunRequest
 */
export interface AppApiRunRequest {
    /**
     * 
     * @type {AppRunDto}
     * @memberof AppApiRun
     */
    readonly body?: AppRunDto
}

/**
 * Request parameters for update operation in AppApi.
 * @export
 * @interface AppApiUpdateRequest
 */
export interface AppApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppDto}
     * @memberof AppApiUpdate
     */
    readonly body?: CreateOrUpdateAppDto
}

/**
 * Request parameters for updateRunState operation in AppApi.
 * @export
 * @interface AppApiUpdateRunStateRequest
 */
export interface AppApiUpdateRunStateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppApiUpdateRunState
     */
    readonly id: string

    /**
     * 
     * @type {AppRunRecordUpdateDto}
     * @memberof AppApiUpdateRunState
     */
    readonly body?: AppRunRecordUpdateDto
}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @summary 删除应用
     * @param {AppApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public _delete(requestParameters: AppApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建新应用
     * @param {AppApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public create(requestParameters: AppApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取 APP 详情
     * @param {AppApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getById(requestParameters: AppApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取 APP 详情
     * @param {AppApiGetByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getByName(requestParameters: AppApiGetByNameRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppApiGetFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getFeatures(requestParameters: AppApiGetFeaturesRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getFeatures(requestParameters.appId, requestParameters.env, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户的应用列表
     * @param {AppApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getList(requestParameters: AppApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getList(requestParameters.creatorId, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取开发者所有 APP 包括未发布的
     * @param {AppApiGetListByDeveloperAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getListByDeveloperAll(requestParameters: AppApiGetListByDeveloperAllRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getListByDeveloperAll(requestParameters.developerAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 所有开发者已发布 APP 列表
     * @param {AppApiGetListPublicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getListPublic(requestParameters: AppApiGetListPublicRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getListPublic(requestParameters.type, requestParameters.developerAccount, requestParameters.currentAppName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取APP列表包含用户订阅信息
     * @param {AppApiGetListWithUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getListWithUser(requestParameters: AppApiGetListWithUserRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getListWithUser(requestParameters.type, requestParameters.searchKey, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppApiGetSdksByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getSdksById(requestParameters: AppApiGetSdksByIdRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getSdksById(requestParameters.appId, requestParameters.env, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取上传凭证
     * @param {AppApiGetUploadCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getUploadCredentials(requestParameters: AppApiGetUploadCredentialsRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getUploadCredentials(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取 APP 详情
     * @param {AppApiGetWithUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public getWithUser(requestParameters: AppApiGetWithUserRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).getWithUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppApiRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public run(requestParameters: AppApiRunRequest = {}, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).run(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新 APP 信息
     * @param {AppApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public update(requestParameters: AppApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppApiUpdateRunStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public updateRunState(requestParameters: AppApiUpdateRunStateRequest, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).updateRunState(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppFeatureApi - axios parameter creator
 * @export
 */
export const AppFeatureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app-feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppFeatureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-feature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-feature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppFeatureDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app-feature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppFeatureApi - functional programming interface
 * @export
 */
export const AppFeatureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppFeatureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppFeatureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppFeatureDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppFeatureDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppFeatureDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppFeatureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppFeatureApi - factory interface
 * @export
 */
export const AppFeatureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppFeatureApiFp(configuration)
    return {
        /**
         * 
         * @param {AppFeatureApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppFeatureApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppFeatureApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppFeatureApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppFeatureDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppFeatureApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppFeatureApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppFeatureDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppFeatureApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppFeatureApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppFeatureDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppFeatureApi.
 * @export
 * @interface AppFeatureApiDeleteRequest
 */
export interface AppFeatureApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppFeatureApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppFeatureApi.
 * @export
 * @interface AppFeatureApiCreateRequest
 */
export interface AppFeatureApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppFeatureDto}
     * @memberof AppFeatureApiCreate
     */
    readonly body?: CreateOrUpdateAppFeatureDto
}

/**
 * Request parameters for getList operation in AppFeatureApi.
 * @export
 * @interface AppFeatureApiGetListRequest
 */
export interface AppFeatureApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AppFeatureApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppFeatureApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppFeatureApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in AppFeatureApi.
 * @export
 * @interface AppFeatureApiUpdateRequest
 */
export interface AppFeatureApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppFeatureApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppFeatureDto}
     * @memberof AppFeatureApiUpdate
     */
    readonly body?: CreateOrUpdateAppFeatureDto
}

/**
 * AppFeatureApi - object-oriented interface
 * @export
 * @class AppFeatureApi
 * @extends {BaseAPI}
 */
export class AppFeatureApi extends BaseAPI {
    /**
     * 
     * @param {AppFeatureApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public _delete(requestParameters: AppFeatureApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppFeatureApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public create(requestParameters: AppFeatureApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppFeatureApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public getList(requestParameters: AppFeatureApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppFeatureApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppFeatureApi
     */
    public update(requestParameters: AppFeatureApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppFeatureApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppPricingApi - axios parameter creator
 * @export
 */
export const AppPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppPricingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByAppId: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getListByAppId', 'appId', appId)
            const localVarPath = `/api/app/app-pricing/by-app-id/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingItemsByAppId: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getPricingItemsByAppId', 'appId', appId)
            const localVarPath = `/api/app/app-pricing/pricing-items-by-app-id/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppPricingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app-pricing/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppPricingApi - functional programming interface
 * @export
 */
export const AppPricingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppPricingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListByAppId(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppPricingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListByAppId(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} appId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingItemsByAppId(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppPricingItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingItemsByAppId(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppPricingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppPricingApi - factory interface
 * @export
 */
export const AppPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppPricingApiFp(configuration)
    return {
        /**
         * 
         * @param {AppPricingApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppPricingApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppPricingApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppPricingDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AppPricingApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppPricingDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppPricingApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppPricingDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiGetListByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListByAppId(requestParameters: AppPricingApiGetListByAppIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AppPricingDto>> {
            return localVarFp.getListByAppId(requestParameters.appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiGetPricingItemsByAppIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingItemsByAppId(requestParameters: AppPricingApiGetPricingItemsByAppIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AppPricingItemDto>> {
            return localVarFp.getPricingItemsByAppId(requestParameters.appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppPricingApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppPricingDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppPricingApi.
 * @export
 * @interface AppPricingApiDeleteRequest
 */
export interface AppPricingApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppPricingApi.
 * @export
 * @interface AppPricingApiCreateRequest
 */
export interface AppPricingApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppPricingDto}
     * @memberof AppPricingApiCreate
     */
    readonly body?: CreateOrUpdateAppPricingDto
}

/**
 * Request parameters for getById operation in AppPricingApi.
 * @export
 * @interface AppPricingApiGetByIdRequest
 */
export interface AppPricingApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in AppPricingApi.
 * @export
 * @interface AppPricingApiGetListRequest
 */
export interface AppPricingApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppPricingApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppPricingApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for getListByAppId operation in AppPricingApi.
 * @export
 * @interface AppPricingApiGetListByAppIdRequest
 */
export interface AppPricingApiGetListByAppIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiGetListByAppId
     */
    readonly appId: string
}

/**
 * Request parameters for getPricingItemsByAppId operation in AppPricingApi.
 * @export
 * @interface AppPricingApiGetPricingItemsByAppIdRequest
 */
export interface AppPricingApiGetPricingItemsByAppIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiGetPricingItemsByAppId
     */
    readonly appId: string
}

/**
 * Request parameters for update operation in AppPricingApi.
 * @export
 * @interface AppPricingApiUpdateRequest
 */
export interface AppPricingApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppPricingDto}
     * @memberof AppPricingApiUpdate
     */
    readonly body?: CreateOrUpdateAppPricingDto
}

/**
 * AppPricingApi - object-oriented interface
 * @export
 * @class AppPricingApi
 * @extends {BaseAPI}
 */
export class AppPricingApi extends BaseAPI {
    /**
     * 
     * @param {AppPricingApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public _delete(requestParameters: AppPricingApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public create(requestParameters: AppPricingApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public getById(requestParameters: AppPricingApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public getList(requestParameters: AppPricingApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiGetListByAppIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public getListByAppId(requestParameters: AppPricingApiGetListByAppIdRequest, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).getListByAppId(requestParameters.appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiGetPricingItemsByAppIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public getPricingItemsByAppId(requestParameters: AppPricingApiGetPricingItemsByAppIdRequest, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).getPricingItemsByAppId(requestParameters.appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingApi
     */
    public update(requestParameters: AppPricingApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppPricingApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppPricingItemApi - axios parameter creator
 * @export
 */
export const AppPricingItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppPricingItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-pricing-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppPricingItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app-pricing-item/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppPricingItemApi - functional programming interface
 * @export
 */
export const AppPricingItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppPricingItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppPricingItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppPricingItemDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppPricingItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppPricingItemDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppPricingItemApi - factory interface
 * @export
 */
export const AppPricingItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppPricingItemApiFp(configuration)
    return {
        /**
         * 
         * @param {AppPricingItemApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppPricingItemApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingItemApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppPricingItemApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppPricingItemDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingItemApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AppPricingItemApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppPricingItemDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<AppPricingItemDto>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppPricingItemApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppPricingItemApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppPricingItemDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppPricingItemApi.
 * @export
 * @interface AppPricingItemApiDeleteRequest
 */
export interface AppPricingItemApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppPricingItemApi.
 * @export
 * @interface AppPricingItemApiCreateRequest
 */
export interface AppPricingItemApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppPricingItemDto}
     * @memberof AppPricingItemApiCreate
     */
    readonly body?: CreateOrUpdateAppPricingItemDto
}

/**
 * Request parameters for getById operation in AppPricingItemApi.
 * @export
 * @interface AppPricingItemApiGetByIdRequest
 */
export interface AppPricingItemApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for update operation in AppPricingItemApi.
 * @export
 * @interface AppPricingItemApiUpdateRequest
 */
export interface AppPricingItemApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppPricingItemApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppPricingItemDto}
     * @memberof AppPricingItemApiUpdate
     */
    readonly body?: CreateOrUpdateAppPricingItemDto
}

/**
 * AppPricingItemApi - object-oriented interface
 * @export
 * @class AppPricingItemApi
 * @extends {BaseAPI}
 */
export class AppPricingItemApi extends BaseAPI {
    /**
     * 
     * @param {AppPricingItemApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public _delete(requestParameters: AppPricingItemApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingItemApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public create(requestParameters: AppPricingItemApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingItemApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public getById(requestParameters: AppPricingItemApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public getList(options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppPricingItemApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppPricingItemApi
     */
    public update(requestParameters: AppPricingItemApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppPricingItemApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppReleaseApi - axios parameter creator
 * @export
 */
export const AppReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除版本
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建新版本
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取版本
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取最新版本
         * @param {string} [appName] 
         * @param {any} [platform] 
         * @param {any} [productType] 
         * @param {string} [environment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatest: async (appName?: string, platform?: any, productType?: any, environment?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appName !== undefined) {
                localVarQueryParameter['AppName'] = appName;
            }

            if (platform !== undefined) {
                localVarQueryParameter['Platform'] = platform;
            }

            if (productType !== undefined) {
                localVarQueryParameter['ProductType'] = productType;
            }

            if (environment !== undefined) {
                localVarQueryParameter['Environment'] = environment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取版本列表
         * @param {string} [appId] 
         * @param {string} [environment] 
         * @param {any} [platform] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (appId?: string, environment?: string, platform?: any, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appId !== undefined) {
                localVarQueryParameter['AppId'] = appId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['Environment'] = environment;
            }

            if (platform !== undefined) {
                localVarQueryParameter['Platform'] = platform;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新版本
         * @param {string} id 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppReleaseApi - functional programming interface
 * @export
 */
export const AppReleaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppReleaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除版本
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 创建新版本
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取版本
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取最新版本
         * @param {string} [appName] 
         * @param {any} [platform] 
         * @param {any} [productType] 
         * @param {string} [environment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatest(appName?: string, platform?: any, productType?: any, environment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatest(appName, platform, productType, environment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取版本列表
         * @param {string} [appId] 
         * @param {string} [environment] 
         * @param {any} [platform] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(appId?: string, environment?: string, platform?: any, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(appId, environment, platform, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新版本
         * @param {string} id 
         * @param {CreateOrUpdateAppReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppReleaseApi - factory interface
 * @export
 */
export const AppReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppReleaseApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除版本
         * @param {AppReleaseApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppReleaseApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建新版本
         * @param {AppReleaseApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppReleaseApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppReleaseDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取版本
         * @param {AppReleaseApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AppReleaseApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AppReleaseDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取最新版本
         * @param {AppReleaseApiGetLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatest(requestParameters: AppReleaseApiGetLatestRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppReleaseDto> {
            return localVarFp.getLatest(requestParameters.appName, requestParameters.platform, requestParameters.productType, requestParameters.environment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取版本列表
         * @param {AppReleaseApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppReleaseApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppReleaseDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.appId, requestParameters.environment, requestParameters.platform, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新版本
         * @param {AppReleaseApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppReleaseApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppReleaseDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiDeleteRequest
 */
export interface AppReleaseApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiCreateRequest
 */
export interface AppReleaseApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppReleaseDto}
     * @memberof AppReleaseApiCreate
     */
    readonly body?: CreateOrUpdateAppReleaseDto
}

/**
 * Request parameters for getById operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiGetByIdRequest
 */
export interface AppReleaseApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getLatest operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiGetLatestRequest
 */
export interface AppReleaseApiGetLatestRequest {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetLatest
     */
    readonly appName?: string

    /**
     * 
     * @type {any}
     * @memberof AppReleaseApiGetLatest
     */
    readonly platform?: any

    /**
     * 
     * @type {any}
     * @memberof AppReleaseApiGetLatest
     */
    readonly productType?: any

    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetLatest
     */
    readonly environment?: string
}

/**
 * Request parameters for getList operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiGetListRequest
 */
export interface AppReleaseApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetList
     */
    readonly appId?: string

    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetList
     */
    readonly environment?: string

    /**
     * 
     * @type {any}
     * @memberof AppReleaseApiGetList
     */
    readonly platform?: any

    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppReleaseApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppReleaseApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in AppReleaseApi.
 * @export
 * @interface AppReleaseApiUpdateRequest
 */
export interface AppReleaseApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppReleaseApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppReleaseDto}
     * @memberof AppReleaseApiUpdate
     */
    readonly body?: CreateOrUpdateAppReleaseDto
}

/**
 * AppReleaseApi - object-oriented interface
 * @export
 * @class AppReleaseApi
 * @extends {BaseAPI}
 */
export class AppReleaseApi extends BaseAPI {
    /**
     * 
     * @summary 删除版本
     * @param {AppReleaseApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public _delete(requestParameters: AppReleaseApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建新版本
     * @param {AppReleaseApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public create(requestParameters: AppReleaseApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取版本
     * @param {AppReleaseApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public getById(requestParameters: AppReleaseApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取最新版本
     * @param {AppReleaseApiGetLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public getLatest(requestParameters: AppReleaseApiGetLatestRequest = {}, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).getLatest(requestParameters.appName, requestParameters.platform, requestParameters.productType, requestParameters.environment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取版本列表
     * @param {AppReleaseApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public getList(requestParameters: AppReleaseApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).getList(requestParameters.appId, requestParameters.environment, requestParameters.platform, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新版本
     * @param {AppReleaseApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppReleaseApi
     */
    public update(requestParameters: AppReleaseApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppReleaseApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppSdkApi - axios parameter creator
 * @export
 */
export const AppSdkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/app-sdk/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppSdkDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-sdk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-sdk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateAppSdkDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/app-sdk/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppSdkApi - functional programming interface
 * @export
 */
export const AppSdkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppSdkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSdkDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSdkDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateAppSdkDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateAppSdkDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSdkDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppSdkApi - factory interface
 * @export
 */
export const AppSdkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppSdkApiFp(configuration)
    return {
        /**
         * 
         * @param {AppSdkApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: AppSdkApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppSdkApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppSdkApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppSdkDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppSdkApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AppSdkApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppSdkDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AppSdkApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AppSdkApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<AppSdkDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in AppSdkApi.
 * @export
 * @interface AppSdkApiDeleteRequest
 */
export interface AppSdkApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AppSdkApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in AppSdkApi.
 * @export
 * @interface AppSdkApiCreateRequest
 */
export interface AppSdkApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppSdkDto}
     * @memberof AppSdkApiCreate
     */
    readonly body?: CreateOrUpdateAppSdkDto
}

/**
 * Request parameters for getList operation in AppSdkApi.
 * @export
 * @interface AppSdkApiGetListRequest
 */
export interface AppSdkApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof AppSdkApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof AppSdkApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof AppSdkApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in AppSdkApi.
 * @export
 * @interface AppSdkApiUpdateRequest
 */
export interface AppSdkApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AppSdkApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateAppSdkDto}
     * @memberof AppSdkApiUpdate
     */
    readonly body?: CreateOrUpdateAppSdkDto
}

/**
 * AppSdkApi - object-oriented interface
 * @export
 * @class AppSdkApi
 * @extends {BaseAPI}
 */
export class AppSdkApi extends BaseAPI {
    /**
     * 
     * @param {AppSdkApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public _delete(requestParameters: AppSdkApiDeleteRequest, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppSdkApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public create(requestParameters: AppSdkApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppSdkApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public getList(requestParameters: AppSdkApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AppSdkApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppSdkApi
     */
    public update(requestParameters: AppSdkApiUpdateRequest, options?: AxiosRequestConfig) {
        return AppSdkApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppUserScoreApi - axios parameter creator
 * @export
 */
export const AppUserScoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateOrUpdateAppUserScoreDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateAppUserScoreDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/app-user-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppUserScoreApi - functional programming interface
 * @export
 */
export const AppUserScoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppUserScoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateOrUpdateAppUserScoreDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateAppUserScoreDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUserScoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppUserScoreApi - factory interface
 * @export
 */
export const AppUserScoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppUserScoreApiFp(configuration)
    return {
        /**
         * 
         * @param {AppUserScoreApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AppUserScoreApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppUserScoreDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in AppUserScoreApi.
 * @export
 * @interface AppUserScoreApiCreateRequest
 */
export interface AppUserScoreApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateAppUserScoreDto}
     * @memberof AppUserScoreApiCreate
     */
    readonly body?: CreateOrUpdateAppUserScoreDto
}

/**
 * AppUserScoreApi - object-oriented interface
 * @export
 * @class AppUserScoreApi
 * @extends {BaseAPI}
 */
export class AppUserScoreApi extends BaseAPI {
    /**
     * 
     * @param {AppUserScoreApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppUserScoreApi
     */
    public create(requestParameters: AppUserScoreApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AppUserScoreApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AvatarApi - axios parameter creator
 * @export
 */
export const AvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAvatarDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateAvatarDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCredentials: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/avatar/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarApi - functional programming interface
 * @export
 */
export const AvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAvatarDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateAvatarDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvatarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCredentials(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObjectCredentials>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCredentials(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvatarApi - factory interface
 * @export
 */
export const AvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarApiFp(configuration)
    return {
        /**
         * 
         * @param {AvatarApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AvatarApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AvatarDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AvatarApiGetCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCredentials(requestParameters: AvatarApiGetCredentialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<StorageObjectCredentials> {
            return localVarFp.getCredentials(requestParameters.key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in AvatarApi.
 * @export
 * @interface AvatarApiCreateRequest
 */
export interface AvatarApiCreateRequest {
    /**
     * 
     * @type {CreateAvatarDto}
     * @memberof AvatarApiCreate
     */
    readonly body?: CreateAvatarDto
}

/**
 * Request parameters for getCredentials operation in AvatarApi.
 * @export
 * @interface AvatarApiGetCredentialsRequest
 */
export interface AvatarApiGetCredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof AvatarApiGetCredentials
     */
    readonly key?: string
}

/**
 * AvatarApi - object-oriented interface
 * @export
 * @class AvatarApi
 * @extends {BaseAPI}
 */
export class AvatarApi extends BaseAPI {
    /**
     * 
     * @param {AvatarApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarApi
     */
    public create(requestParameters: AvatarApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return AvatarApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AvatarApiGetCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarApi
     */
    public getCredentials(requestParameters: AvatarApiGetCredentialsRequest = {}, options?: AxiosRequestConfig) {
        return AvatarApiFp(this.configuration).getCredentials(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BindDeviceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bind: async (body?: BindDeviceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device/bind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/device/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByToken: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device/by-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshDeviceStatusDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (body?: RefreshDeviceStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BindDeviceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bind(body?: BindDeviceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bind(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByToken(token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RefreshDeviceStatusDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(body?: RefreshDeviceStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceApiFp(configuration)
    return {
        /**
         * 
         * @param {DeviceApiBindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bind(requestParameters: DeviceApiBindRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bind(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: DeviceApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceApiGetByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByToken(requestParameters: DeviceApiGetByTokenRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.getByToken(requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: DeviceApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceApiRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(requestParameters: DeviceApiRefreshRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refresh(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: DeviceApiRemoveRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(requestParameters.token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bind operation in DeviceApi.
 * @export
 * @interface DeviceApiBindRequest
 */
export interface DeviceApiBindRequest {
    /**
     * 
     * @type {BindDeviceDto}
     * @memberof DeviceApiBind
     */
    readonly body?: BindDeviceDto
}

/**
 * Request parameters for getById operation in DeviceApi.
 * @export
 * @interface DeviceApiGetByIdRequest
 */
export interface DeviceApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getByToken operation in DeviceApi.
 * @export
 * @interface DeviceApiGetByTokenRequest
 */
export interface DeviceApiGetByTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceApiGetByToken
     */
    readonly token?: string
}

/**
 * Request parameters for getList operation in DeviceApi.
 * @export
 * @interface DeviceApiGetListRequest
 */
export interface DeviceApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof DeviceApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof DeviceApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for refresh operation in DeviceApi.
 * @export
 * @interface DeviceApiRefreshRequest
 */
export interface DeviceApiRefreshRequest {
    /**
     * 
     * @type {RefreshDeviceStatusDto}
     * @memberof DeviceApiRefresh
     */
    readonly body?: RefreshDeviceStatusDto
}

/**
 * Request parameters for remove operation in DeviceApi.
 * @export
 * @interface DeviceApiRemoveRequest
 */
export interface DeviceApiRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceApiRemove
     */
    readonly token?: string
}

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * 
     * @param {DeviceApiBindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public bind(requestParameters: DeviceApiBindRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).bind(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getById(requestParameters: DeviceApiGetByIdRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiGetByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getByToken(requestParameters: DeviceApiGetByTokenRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getByToken(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public getList(requestParameters: DeviceApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public refresh(requestParameters: DeviceApiRefreshRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).refresh(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public remove(requestParameters: DeviceApiRemoveRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).remove(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DynamicClaimsApi - axios parameter creator
 * @export
 */
export const DynamicClaimsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/dynamic-claims/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DynamicClaimsApi - functional programming interface
 * @export
 */
export const DynamicClaimsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DynamicClaimsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DynamicClaimsApi - factory interface
 * @export
 */
export const DynamicClaimsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DynamicClaimsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refresh(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DynamicClaimsApi - object-oriented interface
 * @export
 * @class DynamicClaimsApi
 * @extends {BaseAPI}
 */
export class DynamicClaimsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DynamicClaimsApi
     */
    public refresh(options?: AxiosRequestConfig) {
        return DynamicClaimsApiFp(this.configuration).refresh(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EmailSettingsApi - axios parameter creator
 * @export
 */
export const EmailSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendTestEmailInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTestEmail: async (body?: SendTestEmailInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing/send-test-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateEmailSettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (body?: UpdateEmailSettingsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/emailing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailSettingsApi - functional programming interface
 * @export
 */
export const EmailSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendTestEmailInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTestEmail(body?: SendTestEmailInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTestEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateEmailSettingsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body?: UpdateEmailSettingsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailSettingsApi - factory interface
 * @export
 */
export const EmailSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: AxiosRequestConfig): AxiosPromise<EmailSettingsDto> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailSettingsApiSendTestEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTestEmail(requestParameters: EmailSettingsApiSendTestEmailRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendTestEmail(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmailSettingsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: EmailSettingsApiUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sendTestEmail operation in EmailSettingsApi.
 * @export
 * @interface EmailSettingsApiSendTestEmailRequest
 */
export interface EmailSettingsApiSendTestEmailRequest {
    /**
     * 
     * @type {SendTestEmailInput}
     * @memberof EmailSettingsApiSendTestEmail
     */
    readonly body?: SendTestEmailInput
}

/**
 * Request parameters for update operation in EmailSettingsApi.
 * @export
 * @interface EmailSettingsApiUpdateRequest
 */
export interface EmailSettingsApiUpdateRequest {
    /**
     * 
     * @type {UpdateEmailSettingsDto}
     * @memberof EmailSettingsApiUpdate
     */
    readonly body?: UpdateEmailSettingsDto
}

/**
 * EmailSettingsApi - object-oriented interface
 * @export
 * @class EmailSettingsApi
 * @extends {BaseAPI}
 */
export class EmailSettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public get(options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailSettingsApiSendTestEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public sendTestEmail(requestParameters: EmailSettingsApiSendTestEmailRequest = {}, options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).sendTestEmail(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmailSettingsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSettingsApi
     */
    public update(requestParameters: EmailSettingsApiUpdateRequest = {}, options?: AxiosRequestConfig) {
        return EmailSettingsApiFp(this.configuration).update(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeaturesApi - axios parameter creator
 * @export
 */
export const FeaturesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdateFeaturesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/feature-management/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturesApi - functional programming interface
 * @export
 */
export const FeaturesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeatureListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdateFeaturesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(providerName?: string, providerKey?: string, body?: UpdateFeaturesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(providerName, providerKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeaturesApi - factory interface
 * @export
 */
export const FeaturesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturesApiFp(configuration)
    return {
        /**
         * 
         * @param {FeaturesApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: FeaturesApiDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeaturesApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: FeaturesApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetFeatureListResultDto> {
            return localVarFp.get(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeaturesApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: FeaturesApiUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.providerName, requestParameters.providerKey, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in FeaturesApi.
 * @export
 * @interface FeaturesApiDeleteRequest
 */
export interface FeaturesApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDelete
     */
    readonly providerName?: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiDelete
     */
    readonly providerKey?: string
}

/**
 * Request parameters for get operation in FeaturesApi.
 * @export
 * @interface FeaturesApiGetRequest
 */
export interface FeaturesApiGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGet
     */
    readonly providerName?: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiGet
     */
    readonly providerKey?: string
}

/**
 * Request parameters for update operation in FeaturesApi.
 * @export
 * @interface FeaturesApiUpdateRequest
 */
export interface FeaturesApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof FeaturesApiUpdate
     */
    readonly providerName?: string

    /**
     * 
     * @type {string}
     * @memberof FeaturesApiUpdate
     */
    readonly providerKey?: string

    /**
     * 
     * @type {UpdateFeaturesDto}
     * @memberof FeaturesApiUpdate
     */
    readonly body?: UpdateFeaturesDto
}

/**
 * FeaturesApi - object-oriented interface
 * @export
 * @class FeaturesApi
 * @extends {BaseAPI}
 */
export class FeaturesApi extends BaseAPI {
    /**
     * 
     * @param {FeaturesApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public _delete(requestParameters: FeaturesApiDeleteRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration)._delete(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeaturesApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public get(requestParameters: FeaturesApiGetRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).get(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeaturesApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturesApi
     */
    public update(requestParameters: FeaturesApiUpdateRequest = {}, options?: AxiosRequestConfig) {
        return FeaturesApiFp(this.configuration).update(requestParameters.providerName, requestParameters.providerKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword: async (body?: UserLoginInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/check-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (body?: UserLoginInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPassword(body?: UserLoginInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbpLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserLoginInfo} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(body?: UserLoginInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbpLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginApiCheckPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPassword(requestParameters: LoginApiCheckPasswordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AbpLoginResult> {
            return localVarFp.checkPassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: LoginApiLoginRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AbpLoginResult> {
            return localVarFp.login(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkPassword operation in LoginApi.
 * @export
 * @interface LoginApiCheckPasswordRequest
 */
export interface LoginApiCheckPasswordRequest {
    /**
     * 
     * @type {UserLoginInfo}
     * @memberof LoginApiCheckPassword
     */
    readonly body?: UserLoginInfo
}

/**
 * Request parameters for login operation in LoginApi.
 * @export
 * @interface LoginApiLoginRequest
 */
export interface LoginApiLoginRequest {
    /**
     * 
     * @type {UserLoginInfo}
     * @memberof LoginApiLogin
     */
    readonly body?: UserLoginInfo
}

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {LoginApiCheckPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public checkPassword(requestParameters: LoginApiCheckPasswordRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).checkPassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public login(requestParameters: LoginApiLoginRequest = {}, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).login(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logout(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MessagePublishDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publish: async (body?: MessagePublishDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageRecallDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recall: async (body?: MessageRecallDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/recall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageSubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe: async (body?: MessageSubscribeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageUnsubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe: async (body?: MessageUnsubscribeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MessagePublishDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publish(body?: MessagePublishDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publish(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageRecallDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recall(body?: MessageRecallDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recall(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageSubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribe(body?: MessageSubscribeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribe(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageUnsubscribeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unsubscribe(body?: MessageUnsubscribeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unsubscribe(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageApiPublishRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publish(requestParameters: MessageApiPublishRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publish(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageApiRecallRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recall(requestParameters: MessageApiRecallRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.recall(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageApiSubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe(requestParameters: MessageApiSubscribeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscribe(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageApiUnsubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unsubscribe(requestParameters: MessageApiUnsubscribeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unsubscribe(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for publish operation in MessageApi.
 * @export
 * @interface MessageApiPublishRequest
 */
export interface MessageApiPublishRequest {
    /**
     * 
     * @type {MessagePublishDto}
     * @memberof MessageApiPublish
     */
    readonly body?: MessagePublishDto
}

/**
 * Request parameters for recall operation in MessageApi.
 * @export
 * @interface MessageApiRecallRequest
 */
export interface MessageApiRecallRequest {
    /**
     * 
     * @type {MessageRecallDto}
     * @memberof MessageApiRecall
     */
    readonly body?: MessageRecallDto
}

/**
 * Request parameters for subscribe operation in MessageApi.
 * @export
 * @interface MessageApiSubscribeRequest
 */
export interface MessageApiSubscribeRequest {
    /**
     * 
     * @type {MessageSubscribeDto}
     * @memberof MessageApiSubscribe
     */
    readonly body?: MessageSubscribeDto
}

/**
 * Request parameters for unsubscribe operation in MessageApi.
 * @export
 * @interface MessageApiUnsubscribeRequest
 */
export interface MessageApiUnsubscribeRequest {
    /**
     * 
     * @type {MessageUnsubscribeDto}
     * @memberof MessageApiUnsubscribe
     */
    readonly body?: MessageUnsubscribeDto
}

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @param {MessageApiPublishRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public publish(requestParameters: MessageApiPublishRequest = {}, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).publish(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageApiRecallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public recall(requestParameters: MessageApiRecallRequest = {}, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).recall(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageApiSubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public subscribe(requestParameters: MessageApiSubscribeRequest = {}, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).subscribe(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageApiUnsubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public unsubscribe(requestParameters: MessageApiUnsubscribeRequest = {}, options?: AxiosRequestConfig) {
        return MessageApiFp(this.configuration).unsubscribe(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageSourceApi - axios parameter creator
 * @export
 */
export const MessageSourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/message-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateUpdateMessageSourceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/message-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getPublishedList', 'categoryId', categoryId)
            const localVarPath = `/api/app/message-source/published-list/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateUpdateMessageSourceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/message-source/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageSourceApi - functional programming interface
 * @export
 */
export const MessageSourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageSourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateUpdateMessageSourceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUpdateMessageSourceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSourceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} categoryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageSourceDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateUpdateMessageSourceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUpdateMessageSourceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageSourceApi - factory interface
 * @export
 */
export const MessageSourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageSourceApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageSourceApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: MessageSourceApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MessageSourceApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateUpdateMessageSourceDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MessageSourceApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MessageSourceDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList(requestParameters: MessageSourceApiGetPublishedListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MessageSourceDto>> {
            return localVarFp.getPublishedList(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: MessageSourceApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUpdateMessageSourceDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in MessageSourceApi.
 * @export
 * @interface MessageSourceApiDeleteRequest
 */
export interface MessageSourceApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in MessageSourceApi.
 * @export
 * @interface MessageSourceApiCreateRequest
 */
export interface MessageSourceApiCreateRequest {
    /**
     * 
     * @type {CreateUpdateMessageSourceDto}
     * @memberof MessageSourceApiCreate
     */
    readonly body?: CreateUpdateMessageSourceDto
}

/**
 * Request parameters for getById operation in MessageSourceApi.
 * @export
 * @interface MessageSourceApiGetByIdRequest
 */
export interface MessageSourceApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getPublishedList operation in MessageSourceApi.
 * @export
 * @interface MessageSourceApiGetPublishedListRequest
 */
export interface MessageSourceApiGetPublishedListRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceApiGetPublishedList
     */
    readonly categoryId: string
}

/**
 * Request parameters for update operation in MessageSourceApi.
 * @export
 * @interface MessageSourceApiUpdateRequest
 */
export interface MessageSourceApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateUpdateMessageSourceDto}
     * @memberof MessageSourceApiUpdate
     */
    readonly body?: CreateUpdateMessageSourceDto
}

/**
 * MessageSourceApi - object-oriented interface
 * @export
 * @class MessageSourceApi
 * @extends {BaseAPI}
 */
export class MessageSourceApi extends BaseAPI {
    /**
     * 
     * @param {MessageSourceApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceApi
     */
    public _delete(requestParameters: MessageSourceApiDeleteRequest, options?: AxiosRequestConfig) {
        return MessageSourceApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceApi
     */
    public create(requestParameters: MessageSourceApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return MessageSourceApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceApi
     */
    public getById(requestParameters: MessageSourceApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MessageSourceApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceApiGetPublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceApi
     */
    public getPublishedList(requestParameters: MessageSourceApiGetPublishedListRequest, options?: AxiosRequestConfig) {
        return MessageSourceApiFp(this.configuration).getPublishedList(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceApi
     */
    public update(requestParameters: MessageSourceApiUpdateRequest, options?: AxiosRequestConfig) {
        return MessageSourceApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageSourceCategoryApi - axios parameter creator
 * @export
 */
export const MessageSourceCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-source-category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageSourceCategoryApi - functional programming interface
 * @export
 */
export const MessageSourceCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageSourceCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageSourceCategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageSourceCategoryApi - factory interface
 * @export
 */
export const MessageSourceCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageSourceCategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<MessageSourceCategoryDto>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageSourceCategoryApi - object-oriented interface
 * @export
 * @class MessageSourceCategoryApi
 * @extends {BaseAPI}
 */
export class MessageSourceCategoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceCategoryApi
     */
    public getList(options?: AxiosRequestConfig) {
        return MessageSourceCategoryApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageSourceRouteApi - axios parameter creator
 * @export
 */
export const MessageSourceRouteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/message-source-route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceRouteDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateUpdateMessageSourceRouteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-source-route`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/message-source-route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList: async (sourceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceId' is not null or undefined
            assertParamExists('getPublishedList', 'sourceId', sourceId)
            const localVarPath = `/api/app/message-source-route/published-list/{sourceId}`
                .replace(`{${"sourceId"}}`, encodeURIComponent(String(sourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceRouteDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateUpdateMessageSourceRouteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/message-source-route/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageSourceRouteApi - functional programming interface
 * @export
 */
export const MessageSourceRouteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageSourceRouteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceRouteDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateUpdateMessageSourceRouteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSourceRouteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishedList(sourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageSourceRouteDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishedList(sourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceRouteDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateUpdateMessageSourceRouteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageSourceRouteApi - factory interface
 * @export
 */
export const MessageSourceRouteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageSourceRouteApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageSourceRouteApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: MessageSourceRouteApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MessageSourceRouteApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MessageSourceRouteApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MessageSourceRouteDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteApiGetPublishedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishedList(requestParameters: MessageSourceRouteApiGetPublishedListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MessageSourceRouteDto>> {
            return localVarFp.getPublishedList(requestParameters.sourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: MessageSourceRouteApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in MessageSourceRouteApi.
 * @export
 * @interface MessageSourceRouteApiDeleteRequest
 */
export interface MessageSourceRouteApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in MessageSourceRouteApi.
 * @export
 * @interface MessageSourceRouteApiCreateRequest
 */
export interface MessageSourceRouteApiCreateRequest {
    /**
     * 
     * @type {CreateUpdateMessageSourceRouteDto}
     * @memberof MessageSourceRouteApiCreate
     */
    readonly body?: CreateUpdateMessageSourceRouteDto
}

/**
 * Request parameters for getById operation in MessageSourceRouteApi.
 * @export
 * @interface MessageSourceRouteApiGetByIdRequest
 */
export interface MessageSourceRouteApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getPublishedList operation in MessageSourceRouteApi.
 * @export
 * @interface MessageSourceRouteApiGetPublishedListRequest
 */
export interface MessageSourceRouteApiGetPublishedListRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteApiGetPublishedList
     */
    readonly sourceId: string
}

/**
 * Request parameters for update operation in MessageSourceRouteApi.
 * @export
 * @interface MessageSourceRouteApiUpdateRequest
 */
export interface MessageSourceRouteApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateUpdateMessageSourceRouteDto}
     * @memberof MessageSourceRouteApiUpdate
     */
    readonly body?: CreateUpdateMessageSourceRouteDto
}

/**
 * MessageSourceRouteApi - object-oriented interface
 * @export
 * @class MessageSourceRouteApi
 * @extends {BaseAPI}
 */
export class MessageSourceRouteApi extends BaseAPI {
    /**
     * 
     * @param {MessageSourceRouteApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteApi
     */
    public _delete(requestParameters: MessageSourceRouteApiDeleteRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteApi
     */
    public create(requestParameters: MessageSourceRouteApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return MessageSourceRouteApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteApi
     */
    public getById(requestParameters: MessageSourceRouteApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteApiGetPublishedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteApi
     */
    public getPublishedList(requestParameters: MessageSourceRouteApiGetPublishedListRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteApiFp(this.configuration).getPublishedList(requestParameters.sourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteApi
     */
    public update(requestParameters: MessageSourceRouteApiUpdateRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageSourceRouteSubApi - axios parameter creator
 * @export
 */
export const MessageSourceRouteSubApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/message-source-route-sub/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceRouteSubDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateUpdateMessageSourceRouteSubDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-source-route-sub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/message-source-route-sub/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-source-route-sub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceRouteSubDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateUpdateMessageSourceRouteSubDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/message-source-route-sub/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageSourceRouteSubApi - functional programming interface
 * @export
 */
export const MessageSourceRouteSubApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageSourceRouteSubApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateUpdateMessageSourceRouteSubDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateUpdateMessageSourceRouteSubDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageSourceRouteSubDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageSourceRouteSubDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateUpdateMessageSourceRouteSubDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateUpdateMessageSourceRouteSubDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageSourceRouteSubApi - factory interface
 * @export
 */
export const MessageSourceRouteSubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageSourceRouteSubApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageSourceRouteSubApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: MessageSourceRouteSubApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteSubApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MessageSourceRouteSubApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteSubApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MessageSourceRouteSubApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MessageSourceRouteSubDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<MessageSourceRouteSubDto>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageSourceRouteSubApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: MessageSourceRouteSubApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in MessageSourceRouteSubApi.
 * @export
 * @interface MessageSourceRouteSubApiDeleteRequest
 */
export interface MessageSourceRouteSubApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteSubApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in MessageSourceRouteSubApi.
 * @export
 * @interface MessageSourceRouteSubApiCreateRequest
 */
export interface MessageSourceRouteSubApiCreateRequest {
    /**
     * 
     * @type {CreateUpdateMessageSourceRouteSubDto}
     * @memberof MessageSourceRouteSubApiCreate
     */
    readonly body?: CreateUpdateMessageSourceRouteSubDto
}

/**
 * Request parameters for getById operation in MessageSourceRouteSubApi.
 * @export
 * @interface MessageSourceRouteSubApiGetByIdRequest
 */
export interface MessageSourceRouteSubApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteSubApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for update operation in MessageSourceRouteSubApi.
 * @export
 * @interface MessageSourceRouteSubApiUpdateRequest
 */
export interface MessageSourceRouteSubApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageSourceRouteSubApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateUpdateMessageSourceRouteSubDto}
     * @memberof MessageSourceRouteSubApiUpdate
     */
    readonly body?: CreateUpdateMessageSourceRouteSubDto
}

/**
 * MessageSourceRouteSubApi - object-oriented interface
 * @export
 * @class MessageSourceRouteSubApi
 * @extends {BaseAPI}
 */
export class MessageSourceRouteSubApi extends BaseAPI {
    /**
     * 
     * @param {MessageSourceRouteSubApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteSubApi
     */
    public _delete(requestParameters: MessageSourceRouteSubApiDeleteRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteSubApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteSubApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteSubApi
     */
    public create(requestParameters: MessageSourceRouteSubApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return MessageSourceRouteSubApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteSubApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteSubApi
     */
    public getById(requestParameters: MessageSourceRouteSubApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteSubApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteSubApi
     */
    public getList(options?: AxiosRequestConfig) {
        return MessageSourceRouteSubApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageSourceRouteSubApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageSourceRouteSubApi
     */
    public update(requestParameters: MessageSourceRouteSubApiUpdateRequest, options?: AxiosRequestConfig) {
        return MessageSourceRouteSubApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageTemplateApi - axios parameter creator
 * @export
 */
export const MessageTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateOrUpdateMessageTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: CreateOrUpdateMessageTemplateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/app/message-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplateApi - functional programming interface
 * @export
 */
export const MessageTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTemplateDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateOrUpdateMessageTemplateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: CreateOrUpdateMessageTemplateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplateApi - factory interface
 * @export
 */
export const MessageTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplateApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageTemplateApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: MessageTemplateApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageTemplateApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MessageTemplateApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageTemplateApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MessageTemplateApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<Array<MessageTemplateDto>> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageTemplateApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: MessageTemplateApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in MessageTemplateApi.
 * @export
 * @interface MessageTemplateApiDeleteRequest
 */
export interface MessageTemplateApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in MessageTemplateApi.
 * @export
 * @interface MessageTemplateApiCreateRequest
 */
export interface MessageTemplateApiCreateRequest {
    /**
     * 
     * @type {CreateOrUpdateMessageTemplateDto}
     * @memberof MessageTemplateApiCreate
     */
    readonly body?: CreateOrUpdateMessageTemplateDto
}

/**
 * Request parameters for getById operation in MessageTemplateApi.
 * @export
 * @interface MessageTemplateApiGetByIdRequest
 */
export interface MessageTemplateApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for update operation in MessageTemplateApi.
 * @export
 * @interface MessageTemplateApiUpdateRequest
 */
export interface MessageTemplateApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CreateOrUpdateMessageTemplateDto}
     * @memberof MessageTemplateApiUpdate
     */
    readonly body?: CreateOrUpdateMessageTemplateDto
}

/**
 * MessageTemplateApi - object-oriented interface
 * @export
 * @class MessageTemplateApi
 * @extends {BaseAPI}
 */
export class MessageTemplateApi extends BaseAPI {
    /**
     * 
     * @param {MessageTemplateApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public _delete(requestParameters: MessageTemplateApiDeleteRequest, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageTemplateApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public create(requestParameters: MessageTemplateApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageTemplateApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public getById(requestParameters: MessageTemplateApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public getList(options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageTemplateApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateApi
     */
    public update(requestParameters: MessageTemplateApiUpdateRequest, options?: AxiosRequestConfig) {
        return MessageTemplateApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageTemplateReleaseApi - axios parameter creator
 * @export
 */
export const MessageTemplateReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMessageTemplateReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: CreateMessageTemplateReleaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/app/message-template-release/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [templateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (templateId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/message-template-release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageTemplateReleaseApi - functional programming interface
 * @export
 */
export const MessageTemplateReleaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageTemplateReleaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMessageTemplateReleaseDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: CreateMessageTemplateReleaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateReleaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [templateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(templateId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTemplateReleaseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageTemplateReleaseApi - factory interface
 * @export
 */
export const MessageTemplateReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageTemplateReleaseApiFp(configuration)
    return {
        /**
         * 
         * @param {MessageTemplateReleaseApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MessageTemplateReleaseApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateReleaseDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageTemplateReleaseApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: MessageTemplateReleaseApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<MessageTemplateReleaseDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MessageTemplateReleaseApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: MessageTemplateReleaseApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<MessageTemplateReleaseDto>> {
            return localVarFp.getList(requestParameters.templateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in MessageTemplateReleaseApi.
 * @export
 * @interface MessageTemplateReleaseApiCreateRequest
 */
export interface MessageTemplateReleaseApiCreateRequest {
    /**
     * 
     * @type {CreateMessageTemplateReleaseDto}
     * @memberof MessageTemplateReleaseApiCreate
     */
    readonly body?: CreateMessageTemplateReleaseDto
}

/**
 * Request parameters for getById operation in MessageTemplateReleaseApi.
 * @export
 * @interface MessageTemplateReleaseApiGetByIdRequest
 */
export interface MessageTemplateReleaseApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in MessageTemplateReleaseApi.
 * @export
 * @interface MessageTemplateReleaseApiGetListRequest
 */
export interface MessageTemplateReleaseApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageTemplateReleaseApiGetList
     */
    readonly templateId?: string
}

/**
 * MessageTemplateReleaseApi - object-oriented interface
 * @export
 * @class MessageTemplateReleaseApi
 * @extends {BaseAPI}
 */
export class MessageTemplateReleaseApi extends BaseAPI {
    /**
     * 
     * @param {MessageTemplateReleaseApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public create(requestParameters: MessageTemplateReleaseApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageTemplateReleaseApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public getById(requestParameters: MessageTemplateReleaseApiGetByIdRequest, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MessageTemplateReleaseApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageTemplateReleaseApi
     */
    public getList(requestParameters: MessageTemplateReleaseApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return MessageTemplateReleaseApiFp(this.configuration).getList(requestParameters.templateId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bark 推送，兼容 Bark 推送协议  TODO: 验证 API KEY 功能, 添加[个人访问令牌]功能
         * @param {string} apiKey Bark apiKey, 需要申请，注意不要泄露，泄露后产生安全问题请及时移除或禁用 apiKey
         * @param {string} message 消息内容
         * @param {number} [automaticallyCopy] 携带参数 automaticallyCopy&#x3D;1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）
         * @param {string} [copy] 携带copy参数， 则上面两种复制操作，将只复制copy参数的值
         * @param {string} [url] 点击推送将跳转到url的地址（发送时，URL参数需要编码）
         * @param {string} [isArchive] 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。\\n如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。
         * @param {string} [group] 指定推送消息分组，可在历史记录中按分组查看推送。
         * @param {string} [icon] 指定推送消息图标, icon (仅 iOS15 或以上支持）
         * @param {any} [level] 设置时效性通知 active：不设置时的默认值，系统会立即亮屏显示通知。\\ntimeSensitive：时效性通知，可在专注状态下显示通知。\\npassive：仅将通知添加到通知列表，不会亮屏提醒
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bark: async (apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, level?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('bark', 'apiKey', apiKey)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('bark', 'message', message)
            const localVarPath = `/api/app/notification/bark/{apiKey}/{message}`
                .replace(`{${"apiKey"}}`, encodeURIComponent(String(apiKey)))
                .replace(`{${"message"}}`, encodeURIComponent(String(message)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (automaticallyCopy !== undefined) {
                localVarQueryParameter['automaticallyCopy'] = automaticallyCopy;
            }

            if (copy !== undefined) {
                localVarQueryParameter['copy'] = copy;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (isArchive !== undefined) {
                localVarQueryParameter['isArchive'] = isArchive;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (icon !== undefined) {
                localVarQueryParameter['icon'] = icon;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePushNotificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        push: async (body?: CreatePushNotificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/notification/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bark 推送，兼容 Bark 推送协议  TODO: 验证 API KEY 功能, 添加[个人访问令牌]功能
         * @param {string} apiKey Bark apiKey, 需要申请，注意不要泄露，泄露后产生安全问题请及时移除或禁用 apiKey
         * @param {string} message 消息内容
         * @param {number} [automaticallyCopy] 携带参数 automaticallyCopy&#x3D;1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）
         * @param {string} [copy] 携带copy参数， 则上面两种复制操作，将只复制copy参数的值
         * @param {string} [url] 点击推送将跳转到url的地址（发送时，URL参数需要编码）
         * @param {string} [isArchive] 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。\\n如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。
         * @param {string} [group] 指定推送消息分组，可在历史记录中按分组查看推送。
         * @param {string} [icon] 指定推送消息图标, icon (仅 iOS15 或以上支持）
         * @param {any} [level] 设置时效性通知 active：不设置时的默认值，系统会立即亮屏显示通知。\\ntimeSensitive：时效性通知，可在专注状态下显示通知。\\npassive：仅将通知添加到通知列表，不会亮屏提醒
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bark(apiKey: string, message: string, automaticallyCopy?: number, copy?: string, url?: string, isArchive?: string, group?: string, icon?: string, level?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bark(apiKey, message, automaticallyCopy, copy, url, isArchive, group, icon, level, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationInfoDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePushNotificationDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async push(body?: CreatePushNotificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.push(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Bark 推送，兼容 Bark 推送协议  TODO: 验证 API KEY 功能, 添加[个人访问令牌]功能
         * @param {NotificationApiBarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bark(requestParameters: NotificationApiBarkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.bark(requestParameters.apiKey, requestParameters.message, requestParameters.automaticallyCopy, requestParameters.copy, requestParameters.url, requestParameters.isArchive, requestParameters.group, requestParameters.icon, requestParameters.level, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: NotificationApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<NotificationInfoDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationApiPushRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        push(requestParameters: NotificationApiPushRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.push(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bark operation in NotificationApi.
 * @export
 * @interface NotificationApiBarkRequest
 */
export interface NotificationApiBarkRequest {
    /**
     * Bark apiKey, 需要申请，注意不要泄露，泄露后产生安全问题请及时移除或禁用 apiKey
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly apiKey: string

    /**
     * 消息内容
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly message: string

    /**
     * 携带参数 automaticallyCopy&#x3D;1， 收到推送时，推送内容会自动复制到粘贴板（如发现不能自动复制，可尝试重启一下手机）
     * @type {number}
     * @memberof NotificationApiBark
     */
    readonly automaticallyCopy?: number

    /**
     * 携带copy参数， 则上面两种复制操作，将只复制copy参数的值
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly copy?: string

    /**
     * 点击推送将跳转到url的地址（发送时，URL参数需要编码）
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly url?: string

    /**
     * 指定是否需要保存推送信息到历史记录，1 为保存，其他值为不保存。\\n如果不指定这个参数，推送信息将按照APP内设置来决定是否保存。
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly isArchive?: string

    /**
     * 指定推送消息分组，可在历史记录中按分组查看推送。
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly group?: string

    /**
     * 指定推送消息图标, icon (仅 iOS15 或以上支持）
     * @type {string}
     * @memberof NotificationApiBark
     */
    readonly icon?: string

    /**
     * 设置时效性通知 active：不设置时的默认值，系统会立即亮屏显示通知。\\ntimeSensitive：时效性通知，可在专注状态下显示通知。\\npassive：仅将通知添加到通知列表，不会亮屏提醒
     * @type {any}
     * @memberof NotificationApiBark
     */
    readonly level?: any
}

/**
 * Request parameters for getList operation in NotificationApi.
 * @export
 * @interface NotificationApiGetListRequest
 */
export interface NotificationApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof NotificationApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof NotificationApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for push operation in NotificationApi.
 * @export
 * @interface NotificationApiPushRequest
 */
export interface NotificationApiPushRequest {
    /**
     * 
     * @type {CreatePushNotificationDto}
     * @memberof NotificationApiPush
     */
    readonly body?: CreatePushNotificationDto
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary Bark 推送，兼容 Bark 推送协议  TODO: 验证 API KEY 功能, 添加[个人访问令牌]功能
     * @param {NotificationApiBarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public bark(requestParameters: NotificationApiBarkRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).bark(requestParameters.apiKey, requestParameters.message, requestParameters.automaticallyCopy, requestParameters.copy, requestParameters.url, requestParameters.isArchive, requestParameters.group, requestParameters.icon, requestParameters.level, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public getList(requestParameters: NotificationApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).getList(requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationApiPushRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public push(requestParameters: NotificationApiPushRequest = {}, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).push(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (providerName?: string, providerKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/permission-management/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdatePermissionsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/permission-management/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (providerName !== undefined) {
                localVarQueryParameter['providerName'] = providerName;
            }

            if (providerKey !== undefined) {
                localVarQueryParameter['providerKey'] = providerKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(providerName?: string, providerKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPermissionListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(providerName, providerKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [providerName] 
         * @param {string} [providerKey] 
         * @param {UpdatePermissionsDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(providerName?: string, providerKey?: string, body?: UpdatePermissionsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(providerName, providerKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * 
         * @param {PermissionsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: PermissionsApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPermissionListResultDto> {
            return localVarFp.get(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PermissionsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: PermissionsApiUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.providerName, requestParameters.providerKey, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in PermissionsApi.
 * @export
 * @interface PermissionsApiGetRequest
 */
export interface PermissionsApiGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PermissionsApiGet
     */
    readonly providerName?: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiGet
     */
    readonly providerKey?: string
}

/**
 * Request parameters for update operation in PermissionsApi.
 * @export
 * @interface PermissionsApiUpdateRequest
 */
export interface PermissionsApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PermissionsApiUpdate
     */
    readonly providerName?: string

    /**
     * 
     * @type {string}
     * @memberof PermissionsApiUpdate
     */
    readonly providerKey?: string

    /**
     * 
     * @type {UpdatePermissionsDto}
     * @memberof PermissionsApiUpdate
     */
    readonly body?: UpdatePermissionsDto
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * 
     * @param {PermissionsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public get(requestParameters: PermissionsApiGetRequest = {}, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).get(requestParameters.providerName, requestParameters.providerKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PermissionsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public update(requestParameters: PermissionsApiUpdateRequest = {}, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).update(requestParameters.providerName, requestParameters.providerKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (body?: ChangePasswordInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (body?: UpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/my-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordInput} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(body?: ChangePasswordInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body?: UpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {ProfileApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: ProfileApiChangePasswordRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: AxiosRequestConfig): AxiosPromise<ProfileDto> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: ProfileApiUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProfileDto> {
            return localVarFp.update(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePassword operation in ProfileApi.
 * @export
 * @interface ProfileApiChangePasswordRequest
 */
export interface ProfileApiChangePasswordRequest {
    /**
     * 
     * @type {ChangePasswordInput}
     * @memberof ProfileApiChangePassword
     */
    readonly body?: ChangePasswordInput
}

/**
 * Request parameters for update operation in ProfileApi.
 * @export
 * @interface ProfileApiUpdateRequest
 */
export interface ProfileApiUpdateRequest {
    /**
     * 
     * @type {UpdateProfileDto}
     * @memberof ProfileApiUpdate
     */
    readonly body?: UpdateProfileDto
}

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @param {ProfileApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public changePassword(requestParameters: ProfileApiChangePasswordRequest = {}, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).changePassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public get(options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public update(requestParameters: ProfileApiUpdateRequest = {}, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).update(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdentityRoleCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: IdentityRoleCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityRoleUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: IdentityRoleUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/identity/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdentityRoleCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: IdentityRoleCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityRoleUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: IdentityRoleUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @param {RoleApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: RoleApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: RoleApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllList(options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.getAllList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: RoleApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: RoleApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RoleApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: RoleApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in RoleApi.
 * @export
 * @interface RoleApiDeleteRequest
 */
export interface RoleApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in RoleApi.
 * @export
 * @interface RoleApiCreateRequest
 */
export interface RoleApiCreateRequest {
    /**
     * 
     * @type {IdentityRoleCreateDto}
     * @memberof RoleApiCreate
     */
    readonly body?: IdentityRoleCreateDto
}

/**
 * Request parameters for getById operation in RoleApi.
 * @export
 * @interface RoleApiGetByIdRequest
 */
export interface RoleApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in RoleApi.
 * @export
 * @interface RoleApiGetListRequest
 */
export interface RoleApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiGetList
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof RoleApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof RoleApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof RoleApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in RoleApi.
 * @export
 * @interface RoleApiUpdateRequest
 */
export interface RoleApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RoleApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {IdentityRoleUpdateDto}
     * @memberof RoleApiUpdate
     */
    readonly body?: IdentityRoleUpdateDto
}

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @param {RoleApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public _delete(requestParameters: RoleApiDeleteRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public create(requestParameters: RoleApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getAllList(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getAllList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getById(requestParameters: RoleApiGetByIdRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public getList(requestParameters: RoleApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RoleApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public update(requestParameters: RoleApiUpdateRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StorageObjectApi - axios parameter creator
 * @export
 */
export const StorageObjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [rapidCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileOrCredentials: async (rapidCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/file-or-credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (rapidCode !== undefined) {
                localVarQueryParameter['rapidCode'] = rapidCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preSignUrl: async (key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/storage-object/pre-sign-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageObjectApi - functional programming interface
 * @export
 */
export const StorageObjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageObjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [rapidCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileOrCredentials(rapidCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObjectOrCredentialsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileOrCredentials(rapidCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preSignUrl(key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preSignUrl(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageObjectApi - factory interface
 * @export
 */
export const StorageObjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageObjectApiFp(configuration)
    return {
        /**
         * 
         * @param {StorageObjectApiGetFileOrCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileOrCredentials(requestParameters: StorageObjectApiGetFileOrCredentialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<StorageObjectOrCredentialsDto> {
            return localVarFp.getFileOrCredentials(requestParameters.rapidCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StorageObjectApiPreSignUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preSignUrl(requestParameters: StorageObjectApiPreSignUrlRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.preSignUrl(requestParameters.key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFileOrCredentials operation in StorageObjectApi.
 * @export
 * @interface StorageObjectApiGetFileOrCredentialsRequest
 */
export interface StorageObjectApiGetFileOrCredentialsRequest {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectApiGetFileOrCredentials
     */
    readonly rapidCode?: string
}

/**
 * Request parameters for preSignUrl operation in StorageObjectApi.
 * @export
 * @interface StorageObjectApiPreSignUrlRequest
 */
export interface StorageObjectApiPreSignUrlRequest {
    /**
     * 
     * @type {string}
     * @memberof StorageObjectApiPreSignUrl
     */
    readonly key?: string
}

/**
 * StorageObjectApi - object-oriented interface
 * @export
 * @class StorageObjectApi
 * @extends {BaseAPI}
 */
export class StorageObjectApi extends BaseAPI {
    /**
     * 
     * @param {StorageObjectApiGetFileOrCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public getFileOrCredentials(requestParameters: StorageObjectApiGetFileOrCredentialsRequest = {}, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).getFileOrCredentials(requestParameters.rapidCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StorageObjectApiPreSignUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageObjectApi
     */
    public preSignUrl(requestParameters: StorageObjectApiPreSignUrlRequest = {}, options?: AxiosRequestConfig) {
        return StorageObjectApiFp(this.configuration).preSignUrl(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 苹果订阅 Callback 地址
         * @param {AppleNotificaionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleNotifications: async (body?: AppleNotificaionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/subscription/apple-notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrGetSubscriptionOrderDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (body?: CreateOrGetSubscriptionOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/subscription/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (appId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyReceiptDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyReceipt: async (body?: VerifyReceiptDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/subscription/verify-receipt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 苹果订阅 Callback 地址
         * @param {AppleNotificaionDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appleNotifications(body?: AppleNotificaionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appleNotifications(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrGetSubscriptionOrderDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(body?: CreateOrGetSubscriptionOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [appId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(appId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {VerifyReceiptDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyReceipt(body?: VerifyReceiptDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyReceiptResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyReceipt(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary 苹果订阅 Callback 地址
         * @param {SubscriptionApiAppleNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appleNotifications(requestParameters: SubscriptionApiAppleNotificationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appleNotifications(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: SubscriptionApiCreateOrderRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SubscriptionOrderDto> {
            return localVarFp.createOrder(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: SubscriptionApiGetByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SubscriptionDto> {
            return localVarFp.getById(requestParameters.appId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionApiVerifyReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyReceipt(requestParameters: SubscriptionApiVerifyReceiptRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifyReceiptResult> {
            return localVarFp.verifyReceipt(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appleNotifications operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiAppleNotificationsRequest
 */
export interface SubscriptionApiAppleNotificationsRequest {
    /**
     * 
     * @type {AppleNotificaionDto}
     * @memberof SubscriptionApiAppleNotifications
     */
    readonly body?: AppleNotificaionDto
}

/**
 * Request parameters for createOrder operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiCreateOrderRequest
 */
export interface SubscriptionApiCreateOrderRequest {
    /**
     * 
     * @type {CreateOrGetSubscriptionOrderDto}
     * @memberof SubscriptionApiCreateOrder
     */
    readonly body?: CreateOrGetSubscriptionOrderDto
}

/**
 * Request parameters for getById operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetByIdRequest
 */
export interface SubscriptionApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionApiGetById
     */
    readonly appId?: string
}

/**
 * Request parameters for verifyReceipt operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiVerifyReceiptRequest
 */
export interface SubscriptionApiVerifyReceiptRequest {
    /**
     * 
     * @type {VerifyReceiptDto}
     * @memberof SubscriptionApiVerifyReceipt
     */
    readonly body?: VerifyReceiptDto
}

/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export class SubscriptionApi extends BaseAPI {
    /**
     * 
     * @summary 苹果订阅 Callback 地址
     * @param {SubscriptionApiAppleNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public appleNotifications(requestParameters: SubscriptionApiAppleNotificationsRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).appleNotifications(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public createOrder(requestParameters: SubscriptionApiCreateOrderRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).createOrder(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public getById(requestParameters: SubscriptionApiGetByIdRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getById(requestParameters.appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionApiVerifyReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    public verifyReceipt(requestParameters: SubscriptionApiVerifyReceiptRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).verifyReceipt(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenantCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: TenantCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/multi-tenancy/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefaultConnectionString: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDefaultConnectionString', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultConnectionString: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDefaultConnectionString', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/multi-tenancy/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: TenantUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [defaultConnectionString] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultConnectionString: async (id: string, defaultConnectionString?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDefaultConnectionString', 'id', id)
            const localVarPath = `/api/multi-tenancy/tenants/{id}/default-connection-string`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (defaultConnectionString !== undefined) {
                localVarQueryParameter['defaultConnectionString'] = defaultConnectionString;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenantCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: TenantCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDefaultConnectionString(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDefaultConnectionString(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultConnectionString(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultConnectionString(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {TenantUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: TenantUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [defaultConnectionString] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefaultConnectionString(id: string, defaultConnectionString?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefaultConnectionString(id, defaultConnectionString, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantApiFp(configuration)
    return {
        /**
         * 
         * @param {TenantApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: TenantApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: TenantApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiDeleteDefaultConnectionStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDefaultConnectionString(requestParameters: TenantApiDeleteDefaultConnectionStringRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDefaultConnectionString(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TenantApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TenantDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiGetDefaultConnectionStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultConnectionString(requestParameters: TenantApiGetDefaultConnectionStringRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getDefaultConnectionString(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: TenantApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: TenantApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<TenantDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TenantApiUpdateDefaultConnectionStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultConnectionString(requestParameters: TenantApiUpdateDefaultConnectionStringRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDefaultConnectionString(requestParameters.id, requestParameters.defaultConnectionString, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in TenantApi.
 * @export
 * @interface TenantApiDeleteRequest
 */
export interface TenantApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in TenantApi.
 * @export
 * @interface TenantApiCreateRequest
 */
export interface TenantApiCreateRequest {
    /**
     * 
     * @type {TenantCreateDto}
     * @memberof TenantApiCreate
     */
    readonly body?: TenantCreateDto
}

/**
 * Request parameters for deleteDefaultConnectionString operation in TenantApi.
 * @export
 * @interface TenantApiDeleteDefaultConnectionStringRequest
 */
export interface TenantApiDeleteDefaultConnectionStringRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiDeleteDefaultConnectionString
     */
    readonly id: string
}

/**
 * Request parameters for getById operation in TenantApi.
 * @export
 * @interface TenantApiGetByIdRequest
 */
export interface TenantApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getDefaultConnectionString operation in TenantApi.
 * @export
 * @interface TenantApiGetDefaultConnectionStringRequest
 */
export interface TenantApiGetDefaultConnectionStringRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiGetDefaultConnectionString
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in TenantApi.
 * @export
 * @interface TenantApiGetListRequest
 */
export interface TenantApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiGetList
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof TenantApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof TenantApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof TenantApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for update operation in TenantApi.
 * @export
 * @interface TenantApiUpdateRequest
 */
export interface TenantApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {TenantUpdateDto}
     * @memberof TenantApiUpdate
     */
    readonly body?: TenantUpdateDto
}

/**
 * Request parameters for updateDefaultConnectionString operation in TenantApi.
 * @export
 * @interface TenantApiUpdateDefaultConnectionStringRequest
 */
export interface TenantApiUpdateDefaultConnectionStringRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantApiUpdateDefaultConnectionString
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof TenantApiUpdateDefaultConnectionString
     */
    readonly defaultConnectionString?: string
}

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * 
     * @param {TenantApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public _delete(requestParameters: TenantApiDeleteRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public create(requestParameters: TenantApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiDeleteDefaultConnectionStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public deleteDefaultConnectionString(requestParameters: TenantApiDeleteDefaultConnectionStringRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).deleteDefaultConnectionString(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getById(requestParameters: TenantApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiGetDefaultConnectionStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getDefaultConnectionString(requestParameters: TenantApiGetDefaultConnectionStringRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getDefaultConnectionString(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public getList(requestParameters: TenantApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public update(requestParameters: TenantApiUpdateRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TenantApiUpdateDefaultConnectionStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public updateDefaultConnectionString(requestParameters: TenantApiUpdateDefaultConnectionStringRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).updateDefaultConnectionString(requestParameters.id, requestParameters.defaultConnectionString, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimeZoneSettingsApi - axios parameter creator
 * @export
 */
export const TimeZoneSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/timezone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimezones: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/timezone/timezones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [timezone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (timezone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setting-management/timezone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (timezone !== undefined) {
                localVarQueryParameter['timezone'] = timezone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeZoneSettingsApi - functional programming interface
 * @export
 */
export const TimeZoneSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeZoneSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimezones(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NameValue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimezones(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [timezone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(timezone?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(timezone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeZoneSettingsApi - factory interface
 * @export
 */
export const TimeZoneSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeZoneSettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimezones(options?: AxiosRequestConfig): AxiosPromise<Array<NameValue>> {
            return localVarFp.getTimezones(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TimeZoneSettingsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: TimeZoneSettingsApiUpdateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.timezone, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for update operation in TimeZoneSettingsApi.
 * @export
 * @interface TimeZoneSettingsApiUpdateRequest
 */
export interface TimeZoneSettingsApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TimeZoneSettingsApiUpdate
     */
    readonly timezone?: string
}

/**
 * TimeZoneSettingsApi - object-oriented interface
 * @export
 * @class TimeZoneSettingsApi
 * @extends {BaseAPI}
 */
export class TimeZoneSettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeZoneSettingsApi
     */
    public get(options?: AxiosRequestConfig) {
        return TimeZoneSettingsApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeZoneSettingsApi
     */
    public getTimezones(options?: AxiosRequestConfig) {
        return TimeZoneSettingsApiFp(this.configuration).getTimezones(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TimeZoneSettingsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeZoneSettingsApi
     */
    public update(requestParameters: TimeZoneSettingsApiUpdateRequest = {}, options?: AxiosRequestConfig) {
        return TimeZoneSettingsApiFp(this.configuration).update(requestParameters.timezone, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdentityUserCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body?: IdentityUserCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByEmail: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('findByEmail', 'email', email)
            const localVarPath = `/api/identity/users/by-email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByUsername: async (userName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('findByUsername', 'userName', userName)
            const localVarPath = `/api/identity/users/by-username/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignableRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/assignable-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoles', 'id', id)
            const localVarPath = `/api/identity/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body?: IdentityUserUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/identity/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateRolesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoles: async (id: string, body?: IdentityUserUpdateRolesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRoles', 'id', id)
            const localVarPath = `/api/identity/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdentityUserCreateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body?: IdentityUserCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByEmail(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByEmail(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByUsername(userName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByUsername(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignableRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignableRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDtoPagedResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityRoleDtoListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body?: IdentityUserUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IdentityUserUpdateRolesDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoles(id: string, body?: IdentityUserUpdateRolesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoles(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UserApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: UserApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: UserApiCreateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.create(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiFindByEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByEmail(requestParameters: UserApiFindByEmailRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.findByEmail(requestParameters.email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiFindByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByUsername(requestParameters: UserApiFindByUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.findByUsername(requestParameters.userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignableRoles(options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.getAssignableRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: UserApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: UserApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDtoPagedResultDto> {
            return localVarFp.getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiGetRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(requestParameters: UserApiGetRolesRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityRoleDtoListResultDto> {
            return localVarFp.getRoles(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: UserApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityUserDto> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserApiUpdateRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoles(requestParameters: UserApiUpdateRolesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRoles(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in UserApi.
 * @export
 * @interface UserApiDeleteRequest
 */
export interface UserApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in UserApi.
 * @export
 * @interface UserApiCreateRequest
 */
export interface UserApiCreateRequest {
    /**
     * 
     * @type {IdentityUserCreateDto}
     * @memberof UserApiCreate
     */
    readonly body?: IdentityUserCreateDto
}

/**
 * Request parameters for findByEmail operation in UserApi.
 * @export
 * @interface UserApiFindByEmailRequest
 */
export interface UserApiFindByEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiFindByEmail
     */
    readonly email: string
}

/**
 * Request parameters for findByUsername operation in UserApi.
 * @export
 * @interface UserApiFindByUsernameRequest
 */
export interface UserApiFindByUsernameRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiFindByUsername
     */
    readonly userName: string
}

/**
 * Request parameters for getById operation in UserApi.
 * @export
 * @interface UserApiGetByIdRequest
 */
export interface UserApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for getList operation in UserApi.
 * @export
 * @interface UserApiGetListRequest
 */
export interface UserApiGetListRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetList
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiGetList
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof UserApiGetList
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiGetList
     */
    readonly maxResultCount?: number
}

/**
 * Request parameters for getRoles operation in UserApi.
 * @export
 * @interface UserApiGetRolesRequest
 */
export interface UserApiGetRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiGetRoles
     */
    readonly id: string
}

/**
 * Request parameters for update operation in UserApi.
 * @export
 * @interface UserApiUpdateRequest
 */
export interface UserApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {IdentityUserUpdateDto}
     * @memberof UserApiUpdate
     */
    readonly body?: IdentityUserUpdateDto
}

/**
 * Request parameters for updateRoles operation in UserApi.
 * @export
 * @interface UserApiUpdateRolesRequest
 */
export interface UserApiUpdateRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiUpdateRoles
     */
    readonly id: string

    /**
     * 
     * @type {IdentityUserUpdateRolesDto}
     * @memberof UserApiUpdateRoles
     */
    readonly body?: IdentityUserUpdateRolesDto
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public _delete(requestParameters: UserApiDeleteRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public create(requestParameters: UserApiCreateRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).create(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiFindByEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public findByEmail(requestParameters: UserApiFindByEmailRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).findByEmail(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiFindByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public findByUsername(requestParameters: UserApiFindByUsernameRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).findByUsername(requestParameters.userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAssignableRoles(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getAssignableRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getById(requestParameters: UserApiGetByIdRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getList(requestParameters: UserApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getList(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiGetRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getRoles(requestParameters: UserApiGetRolesRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getRoles(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public update(requestParameters: UserApiUpdateRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUpdateRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateRoles(requestParameters: UserApiUpdateRolesRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).updateRoles(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserLookupApi - axios parameter creator
 * @export
 */
export const UserLookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById', 'id', id)
            const localVarPath = `/api/identity/users/lookup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByUserName: async (userName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('findByUserName', 'userName', userName)
            const localVarPath = `/api/identity/users/lookup/by-username/{userName}`
                .replace(`{${"userName"}}`, encodeURIComponent(String(userName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCount: async (filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/lookup/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/identity/users/lookup/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (sorting !== undefined) {
                localVarQueryParameter['Sorting'] = sorting;
            }

            if (skipCount !== undefined) {
                localVarQueryParameter['SkipCount'] = skipCount;
            }

            if (maxResultCount !== undefined) {
                localVarQueryParameter['MaxResultCount'] = maxResultCount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserLookupApi - functional programming interface
 * @export
 */
export const UserLookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserLookupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findByUserName(userName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findByUserName(userName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCount(filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCount(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [filter] 
         * @param {string} [sorting] 
         * @param {number} [skipCount] 
         * @param {number} [maxResultCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(filter?: string, sorting?: string, skipCount?: number, maxResultCount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataListResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(filter, sorting, skipCount, maxResultCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserLookupApi - factory interface
 * @export
 */
export const UserLookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserLookupApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLookupApiFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(requestParameters: UserLookupApiFindByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UserData> {
            return localVarFp.findById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLookupApiFindByUserNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findByUserName(requestParameters: UserLookupApiFindByUserNameRequest, options?: AxiosRequestConfig): AxiosPromise<UserData> {
            return localVarFp.findByUserName(requestParameters.userName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLookupApiGetCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCount(requestParameters: UserLookupApiGetCountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.getCount(requestParameters.filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserLookupApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: UserLookupApiSearchRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserDataListResultDto> {
            return localVarFp.search(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for findById operation in UserLookupApi.
 * @export
 * @interface UserLookupApiFindByIdRequest
 */
export interface UserLookupApiFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLookupApiFindById
     */
    readonly id: string
}

/**
 * Request parameters for findByUserName operation in UserLookupApi.
 * @export
 * @interface UserLookupApiFindByUserNameRequest
 */
export interface UserLookupApiFindByUserNameRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLookupApiFindByUserName
     */
    readonly userName: string
}

/**
 * Request parameters for getCount operation in UserLookupApi.
 * @export
 * @interface UserLookupApiGetCountRequest
 */
export interface UserLookupApiGetCountRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLookupApiGetCount
     */
    readonly filter?: string
}

/**
 * Request parameters for search operation in UserLookupApi.
 * @export
 * @interface UserLookupApiSearchRequest
 */
export interface UserLookupApiSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof UserLookupApiSearch
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof UserLookupApiSearch
     */
    readonly sorting?: string

    /**
     * 
     * @type {number}
     * @memberof UserLookupApiSearch
     */
    readonly skipCount?: number

    /**
     * 
     * @type {number}
     * @memberof UserLookupApiSearch
     */
    readonly maxResultCount?: number
}

/**
 * UserLookupApi - object-oriented interface
 * @export
 * @class UserLookupApi
 * @extends {BaseAPI}
 */
export class UserLookupApi extends BaseAPI {
    /**
     * 
     * @param {UserLookupApiFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public findById(requestParameters: UserLookupApiFindByIdRequest, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).findById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLookupApiFindByUserNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public findByUserName(requestParameters: UserLookupApiFindByUserNameRequest, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).findByUserName(requestParameters.userName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLookupApiGetCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public getCount(requestParameters: UserLookupApiGetCountRequest = {}, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).getCount(requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserLookupApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserLookupApi
     */
    public search(requestParameters: UserLookupApiSearchRequest = {}, options?: AxiosRequestConfig) {
        return UserLookupApiFp(this.configuration).search(requestParameters.filter, requestParameters.sorting, requestParameters.skipCount, requestParameters.maxResultCount, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode: async (body?: SendVerificationCodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/verification/send-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCodeAnonymous: async (body?: SendVerificationCodeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/verification/send-code-anonymous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCode(body?: SendVerificationCodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCode(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendVerificationCodeDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCodeAnonymous(body?: SendVerificationCodeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCodeAnonymous(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @param {VerificationApiSendCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCode(requestParameters: VerificationApiSendCodeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendCode(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerificationApiSendCodeAnonymousRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCodeAnonymous(requestParameters: VerificationApiSendCodeAnonymousRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendCodeAnonymous(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sendCode operation in VerificationApi.
 * @export
 * @interface VerificationApiSendCodeRequest
 */
export interface VerificationApiSendCodeRequest {
    /**
     * 
     * @type {SendVerificationCodeDto}
     * @memberof VerificationApiSendCode
     */
    readonly body?: SendVerificationCodeDto
}

/**
 * Request parameters for sendCodeAnonymous operation in VerificationApi.
 * @export
 * @interface VerificationApiSendCodeAnonymousRequest
 */
export interface VerificationApiSendCodeAnonymousRequest {
    /**
     * 
     * @type {SendVerificationCodeDto}
     * @memberof VerificationApiSendCodeAnonymous
     */
    readonly body?: SendVerificationCodeDto
}

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * 
     * @param {VerificationApiSendCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public sendCode(requestParameters: VerificationApiSendCodeRequest = {}, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).sendCode(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerificationApiSendCodeAnonymousRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public sendCodeAnonymous(requestParameters: VerificationApiSendCodeAnonymousRequest = {}, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).sendCodeAnonymous(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


